@using Microsoft.Maui.Controls;
@using Microsoft.JSInterop
@inject IJSRuntime JS

<!-- Mini Player -->
<div class="music-player" id="music-player" 
    @ontouchstart=OnLabelDrag 
    @onmousedown=OnLabelDrag 
    @ontouchenter=OnLabelDrag
    @ondragstart=OnLabelDrag
    @onclick=OpenPlayer>

    <img src="/images/emptyAlbum.png" class="miniplayer-img" />
    <div class="miniplayer-text">
        <p class="miniplayer-paragraph">Song title</p>
        <p class="miniplayer-paragraph artistTitle">Artist name</p>
    </div>

    <div class="miniplayer-icon">
        <img class="miniplayer-iconimg" src="images/heart.svg" @onclick=FavouriteSong/>
        <img class="miniplayer-iconimg" src="images/play.svg" @onclick=PlaySong/>
    </div>
</div>

<!-- Full media controller -->
<div class="music-screen" id="music-screen">
    @if(!queueScreen)
    {// Queue Screen HTML
        <div class="music-screen-tools">
            <button class="GoBackButton" @onclick=ClosePlayer>
                <img src="/images/down.svg" class="">
            </button>
            <button class="GoBackButton ">
                <img src="/images/more-horiz.svg" class="">
            </button>
        </div>

        <img src="/images/emptyAlbum.png" class="music-screen-img" />

        <div class="music-screen-bottominfo">
            <h1 class="music-name">Song Title</h1>
            <p class="artist-name">Artist Name</p>

            <progress class="progress progress1" max="100" value="80"></progress>

            <div class="controls">
                <button class="btn-small"><!-- Shuffle --><img class="miniplayer-iconimg" src="images/shuffle.svg" /></button>
                <button class="btn-small"><!-- Back --><img class="miniplayer-iconimg" src="images/skip-previous.svg" /></button>
                <button class="btn-large play"><!-- pause play --><img class="miniplayer-iconimg" src="images/play.svg" /></button>
                <button class="btn-small"><!-- Skip --><img class="miniplayer-iconimg" src="images/skip-next.svg" /></button>
                <button class="btn-small"><!-- Back --><img class="miniplayer-iconimg" src="images/repeat-off.svg" /></button>
            </div>
            <div class="music-screen-nav">
                <button class="btn-small"><!-- Fav --><img class="miniplayer-iconimg" src="images/heart.svg"></button>
                <button class="btn-small" @onclick=OpenQueue><!-- Queue --><img class="miniplayer-iconimg" src="images/queue.svg"></button>
            </div>
        </div>
    }
    else
    {// Queue Screen HTML
        <div class="music-screen-tools">
            <button class="GoBackButton" @onclick=ReturnToPlayer>
                <img src="/images/back.svg" class="">
            </button>
        </div>

         <div style="overflow:hidden;">

         </div>
    }
</div>

@code {
    [Parameter] public MusicPlayerContainer reference { get; set; }

    public bool isActive { get; set; } = true;

    public bool isPlaying { get; set; } = false;
    public bool isOpen { get; set; } = false;

    public bool queueScreen { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        reference = this;
        await JS.InvokeAsync<string>("dragElement", "music-player");
    }
    void OnLabelSwiped(SwipedEventArgs e)
    {
        // TODO: Response to swipe gesture

        // Check e.Direction

        StateHasChanged();
    }

    // Methods for handling interactions with the mini playeer
    void PlaySong()
    {

    }
    void PauseSong()
    {

    }
    void FavouriteSong()
    {

    }
    void OpenQueue()
    {
        MauiProgram.MusicPlayerIsQueueOpen = true;
        queueScreen = true;

        StateHasChanged();
    }
    public void ReturnToPlayer()
    {
        MauiProgram.MusicPlayerIsQueueOpen = false;
        queueScreen = false;

        StateHasChanged();
    }

    // Methods for handling the movement and controls of the main media player
    async void OnLabelDrag()
    {
        await JS.InvokeAsync<string>("dragElement", "music-player");
        //isOpen = true;
    }
    public async Task OpenPlayer()
    {
        MauiProgram.mainLayout.OpenPlayer();
        isOpen = true;
    }
    public async Task ClosePlayer()
    {
        MauiProgram.mainLayout.ClosePlayer();
        isOpen = false;
    }
    [JSInvokable("SetPlayerOpen")]
    public static void SetPlayerOpen()
    {
        MauiProgram.mainLayout.musicPlayerContainer.isOpen = true;
    }
    [JSInvokable("SetPlayerClosed")]
    public static void SetPlayerClosed()
    {
        MauiProgram.mainLayout.musicPlayerContainer.isOpen = false;
    }
}
