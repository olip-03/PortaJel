@using Microsoft.Maui.Controls;
@using Microsoft.JSInterop;
@using BlazorAnimate;
@using PortaJel_Blazor.Classes;
@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.Shared;

@inject IJSRuntime JS

<!-- Mini Player -->
<div class="music-player" id="music-player" style="display:none;"
    @ontouchstart=OnLabelDrag 
    @onmousedown=OnLabelDrag 
    @ontouchenter=OnLabelDrag
    @ondragstart=OnLabelDrag
    @onclick=OpenPlayer>

    @if (MauiProgram.mediaService.songQueue.Count() > 0)
    {
        <img src="@MauiProgram.mediaService.songQueue.FirstOrDefault().imageSrc" class="miniplayer-img" id="music-player-img" />
    }
    else
    {
        <img src="/images/emptyAlbum.png" class="miniplayer-img" id="music-player-img"/>
    }
    <div class="miniplayer-text">
        @if (MauiProgram.mediaService.songQueue.Count() > 0)
        {
            <p class="miniplayer-paragraph" id="music-player-title">@MauiProgram.mediaService.songQueue.FirstOrDefault().name</p>
            <p class="miniplayer-paragraph artistTitle" id="music-player-artist">@MauiProgram.mediaService.songQueue.FirstOrDefault().artist</p>
        }
        else
        {
            <p class="miniplayer-paragraph" id="music-player-title">Song title</p>
            <p class="miniplayer-paragraph artistTitle" id="music-player-artist">Artist name</p>
        }
    </div>

    <div class="miniplayer-icon">
        <img class="miniplayer-iconimg" src="images/heart.svg" @onclick=FavouriteSong/>
        <img class="miniplayer-iconimg" src="images/play.svg" @onclick=PlaySong/>
    </div>
</div>

<!-- Full media controller -->
<div class="music-screen" id="music-screen">
    <!-- Music Player -->
    <div class="music-screen-tools">
        <!-- Back Btn -->
        <button class="GoBackButton" @onclick=ClosePlayer>
            <img src="/images/down.svg" class="">
        </button>
        <!-- Context Menu Btn -->
        <button class="GoBackButton">
            <img src="/images/more-horiz.svg" class="">
        </button>
    </div>

    @if (MauiProgram.mediaService.songQueue.Count() > 0)
    {
        <img src="@MauiProgram.mediaService.songQueue.FirstOrDefault().imageSrc" class="music-screen-img" />
    }
    else
    {
        <img src="/images/emptyAlbum.png" class="music-screen-img" />
    }

    <div class="music-screen-bottominfo">
        @if (MauiProgram.mediaService.songQueue.Count() > 0)
        {
            <h1 class="music-name">@MauiProgram.mediaService.songQueue.FirstOrDefault().name</h1>
            <p class="artist-name">@MauiProgram.mediaService.songQueue.FirstOrDefault().artist</p>
        }
        else
        {
            <h1 class="music-name">Song Title</h1>
            <p class="artist-name">Artist Name</p>
        }


        <progress class="progress progress1" max="100" value="80"></progress>

        <div class="controls">
            <button class="btn-small"><!-- Shuffle --><img class="miniplayer-iconimg" src="images/shuffle.svg" /></button>
            <button class="btn-small"><!-- Back --><img class="miniplayer-iconimg" src="images/skip-previous.svg" /></button>
            <button class="btn-large play"><!-- pause play --><img class="miniplayer-iconimg" src="images/play.svg" /></button>
            <button class="btn-small"><!-- Skip --><img class="miniplayer-iconimg" src="images/skip-next.svg" /></button>
            <button class="btn-small"><!-- Back --><img class="miniplayer-iconimg" src="images/repeat-off.svg" /></button>
        </div>
        <div class="music-screen-nav">
            <button class="btn-small"><!-- Fav --><img class="miniplayer-iconimg" src="images/heart.svg"></button>
            <button class="btn-small" @onclick=OpenQueue><!-- Queue --><img class="miniplayer-iconimg" src="images/queue.svg"></button>
        </div>
    </div>

    <!-- Queue Screen 
        Display should be none by default. Should overlay the regualar music player when required
    -->
    <div class="music-screen-queue" id="queue-screen">
        <button class="GoBackButton" @onclick=ReturnToPlayer>
            <img src="/images/back.svg" class="">
        </button>

        <div class="music-queue-list" id="music-queue-list">
            @for (int i = 0; i < MauiProgram.mediaService.songQueue.Count(); i++)
            {
                Song song = MauiProgram.mediaService.songQueue.ElementAt(i);
                <!-- Song Container -->
                <div class="music-queue-songcontainer">
                    <!-- Image -->
                    <img class="music-queue-songcontainer-img" src="@song.imageSrc">
                    <!-- Song information -->
                    <div class="music-queue-songcontainer-artistinfo">
                        <b>@song.name</b>
                        <p>@song.artist</p>
                    </div>
                    <!-- Context menu button-->
                    <div class="music-queue-songcontainer-contextmenu">
                        <img src="/images/more-horiz.svg" class="music-queue-songcontainer-contextmenu-img">
                    </div>
                </div>
            }
        </div>

        <div class="controls" style="margin-bottom: 1rem;">
            <button class="btn-small"><!-- Shuffle --><img class="miniplayer-iconimg" src="images/shuffle.svg" /></button>
            <button class="btn-small"><!-- Back --><img class="miniplayer-iconimg" src="images/skip-previous.svg" /></button>
            <button class="btn-large play"><!-- pause play --><img class="miniplayer-iconimg" src="images/play.svg" /></button>
            <button class="btn-small"><!-- Skip --><img class="miniplayer-iconimg" src="images/skip-next.svg" /></button>
            <button class="btn-small"><!-- Back --><img class="miniplayer-iconimg" src="images/repeat-off.svg" /></button>
        </div>
    </div>
</div>

@code {
    [Parameter] public MusicPlayerContainer reference { get; set; }

    public bool isActive { get; set; } = true;

    public bool isPlaying { get; set; } = false;
    public bool isOpen { get; set; } = false;

    public bool queueScreen { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        reference = this;
        await JS.InvokeAsync<string>("dragElement", "music-player");
    }
    void OnLabelSwiped(SwipedEventArgs e)
    {
        // TODO: Response to swipe gesture

        // Check e.Direction

        StateHasChanged();
    }

    // Methods for handling interactions with the mini playeer
    void PlaySong()
    {

    }
    void PauseSong()
    {

    }
    async void FavouriteSong()
    {
        Song data = MauiProgram.mediaService.songQueue.FirstOrDefault();

        data.isFavourite = !data.isFavourite;
        StateHasChanged();
        await MauiProgram.servers[0].FavouriteItem(data.id, data.isFavourite);
    }
    public async void OpenQueue()
    {
        MauiProgram.MusicPlayerIsQueueOpen = true;
        queueScreen = true;
        await JS.InvokeAsync<string>("openQueue");
        await JS.InvokeAsync<string>("initQueueList");
    }
    public async void ReturnToPlayer()
    {
        MauiProgram.MusicPlayerIsQueueOpen = false;
        queueScreen = false;
        await JS.InvokeAsync<string>("closeQueue");
    }

    // Methods for handling the movement and controls of the main media player
    async void OnLabelDrag()
    {
        await JS.InvokeAsync<string>("dragElement", "music-player");
        //isOpen = true;
    }
    public async Task OpenPlayer()
    {
        MauiProgram.mainLayout.OpenPlayer();
        MauiProgram.MusicPlayerIsOpen = true;
        isOpen = true;
    }
    public async Task ClosePlayer()
    {
        MauiProgram.mainLayout.ClosePlayer();
        MauiProgram.MusicPlayerIsOpen = false;
        isOpen = false;
    }
    [JSInvokable("SetPlayerOpen")]
    public static void SetPlayerOpen()
    {
        MauiProgram.mainLayout.musicPlayerContainer.isOpen = true;
        MauiProgram.MusicPlayerIsOpen = true;
    }
    [JSInvokable("SetPlayerClosed")]
    public static void SetPlayerClosed()
    {
        MauiProgram.mainLayout.musicPlayerContainer.isOpen = false;
        MauiProgram.MusicPlayerIsOpen = true;
    }
}
