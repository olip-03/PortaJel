@using PortaJel_Blazor.Data;
@using PortaJel_Blazor;
@using Microsoft.Maui.Controls;
@using PortaJel_Blazor.Pages;
@using PortaJel_Blazor.Pages.Views;
@using PortaJel_Blazor.Classes;
@using BlazorAnimate;

@if (isGrid)
{
    <div class="grid-album-container">
        @if (album.isArtist == true)
        { // this item is an artist
            <div class="grid-album-cover" @onclick=NavigateToArtist @oncontextmenu=OpenContextMenu>
                <img class="grid-artist-img" src="@album.imageAtResolution(resolution)" loading="lazy" />
            </div>
            <div @onclick=NavigateToArtist>
                <div class="album-name">@album.name</div>
                <div class="album-artist">@album.GetArtistName()</div>
            </div>
        }
        else
        {
            <div class="grid-album-cover" @onclick=NavigateToAlbum @oncontextmenu=OpenContextMenu>
                <img class="grid-album-img" src="@album.imageAtResolution(resolution)" loading="lazy" />
            </div>
            <div @onclick=NavigateToAlbum>
                <div class="album-name">@album.name</div>
                <div class="album-artist">@album.GetArtistName()</div>
            </div>
        }
    </div>
}
else
{
    @if (album.isArtist == true)
    {
        <div class="album-container" @oncontextmenu=OpenContextMenu>
            <div class="artist-cover" @onclick=NavigateToArtist>
                <img class="artist-cover" src="@album.imageAtResolution(resolution)" />
            </div>
            <div @onclick=NavigateToArtist>
                <div class="album-name">@album.name</div>
                <div class="album-artist">@album.GetArtistName()</div>
            </div>
            <div class="favorite-button" @onclick=FavouriteItem>
                @if (album.isFavourite)
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <svg class="favorite-button-icon" viewBox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg">
                            <path d="M 480 -120 L 422 -172 C 354.667 -232.667 299 -285 255 -329 C 211 -373 176 -412.5 150 -447.5 C 124 -482.5 105.833 -514.667 95.5 -544 C 85.167 -573.333 80 -603.333 80 -634 C 80 -696.667 101 -749 143 -791 C 185 -833 237.333 -854 300 -854 C 334.667 -854 367.667 -846.667 399 -832 C 430.333 -817.333 457.333 -796.667 480 -770 C 502.667 -796.667 529.667 -817.333 561 -832 C 592.333 -846.667 625.333 -854 660 -854 C 722.667 -854 775 -833 817 -791 C 859 -749 880 -696.667 880 -634 C 880 -603.333 874.833 -573.333 864.5 -544 C 854.167 -514.667 836 -482.5 810 -447.5 C 784 -412.5 749 -373 705 -329 C 661 -285 605.333 -232.667 538 -172 L 480 -120 Z M 480 -501 Z" fill="currentColor" transform="matrix(1, 0, 0, 1, 7.105427357601002e-15, 1.1368683772161603e-13)" />
                        </svg>
                    </Animate>
                }
                else
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img class="favorite-button-icon" src="/images/heart.svg" />
                    </Animate>
                }
            </div>
        </div>
    }
    else
    {
        <div class="album-container" @oncontextmenu=OpenContextMenu>
            <div class="album-cover" @onclick=NavigateToAlbum>
                <img class="album-cover" src="@album.imageAtResolution(resolution)" />
            </div>
            <div @onclick=NavigateToAlbum>
                <div class="album-name">@album.name</div>
                <div class="album-artist">@album.GetArtistName()</div>
                <div class="album-metadata">
                    <div class="album-metadata-container"><b class="album-metadata-text">flac</b></div>
                </div>
            </div>
            <div class="favorite-button" @onclick=FavouriteItem>
                @if (album.isFavourite)
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <svg class="favorite-button-icon" viewBox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg">
                            <path d="M 480 -120 L 422 -172 C 354.667 -232.667 299 -285 255 -329 C 211 -373 176 -412.5 150 -447.5 C 124 -482.5 105.833 -514.667 95.5 -544 C 85.167 -573.333 80 -603.333 80 -634 C 80 -696.667 101 -749 143 -791 C 185 -833 237.333 -854 300 -854 C 334.667 -854 367.667 -846.667 399 -832 C 430.333 -817.333 457.333 -796.667 480 -770 C 502.667 -796.667 529.667 -817.333 561 -832 C 592.333 -846.667 625.333 -854 660 -854 C 722.667 -854 775 -833 817 -791 C 859 -749 880 -696.667 880 -634 C 880 -603.333 874.833 -573.333 864.5 -544 C 854.167 -514.667 836 -482.5 810 -447.5 C 784 -412.5 749 -373 705 -329 C 661 -285 605.333 -232.667 538 -172 L 480 -120 Z M 480 -501 Z" fill="currentColor" transform="matrix(1, 0, 0, 1, 7.105427357601002e-15, 1.1368683772161603e-13)" />
                        </svg>
                    </Animate>

                }
                else
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img class="favorite-button-icon" src="/images/heart.svg" />
                    </Animate>
                }
            </div>
        </div>
    }
}

@code {
    [Parameter] public Album album { get; set; } = new Album();
    [Parameter] public bool isGrid { get; set; } = false;

    private int resolution = 300;

    private void NavigateToAlbum()
    {
        if (album != null)
        {
            if (album.id == Guid.Empty) { return; }
            MauiProgram.mainLayout.NavigateAlbum(album.id);
        }
    }
    private void NavigateToArtist()
    {
        if (album != null)
        {
            if (album.id == Guid.Empty) { return; }
            MauiProgram.mainLayout.NavigateArtist(album.id);
        }
    }
    private async void FavouriteItem()
    {
        album.isFavourite = !album.isFavourite;
        StateHasChanged();
        await MauiProgram.servers[0].FavouriteItem(album.id, album.isFavourite);
    }
    private async void OpenContextMenu()
    {
        MauiProgram.ContextMenuTaskList.Clear();
        MauiProgram.ShowContextMenuImage = true;
        MauiProgram.ContextMenuMainText = album.name;
        MauiProgram.ContextMenuSubText = album.GetArtistName();
        MauiProgram.ContextMenuImage = album.imageAtResolution(resolution);

        if (album.isFavourite)
        {
            MauiProgram.ContextMenuTaskList.Add(new ContextMenuItem("Remove From Favourites", "light_heart_minus.png", new Task(() =>
            {

            })));
        }
        else
        {
            MauiProgram.ContextMenuTaskList.Add(new ContextMenuItem("Add To Favourites", "light_heart_plus.png", new Task(() =>
            {

            })));
        }
        MauiProgram.ContextMenuTaskList.Add(new ContextMenuItem("Download", "light_cloud_download.png", new Task(() =>
        {

        })));
        MauiProgram.ContextMenuTaskList.Add(new ContextMenuItem("Add To Playlist", "light_playlist.png", new Task(() =>
        {

        })));
        MauiProgram.ContextMenuTaskList.Add(new ContextMenuItem("Add To Queue", "light_queue.png", new Task(() =>
        {

        })));
        MauiProgram.ContextMenuTaskList.Add(new ContextMenuItem("View Album", "light_album.png", new Task(() =>
        {
            MauiProgram.mainLayout.NavigateArtist(album.id);
        })));
        MauiProgram.ContextMenuTaskList.Add(new ContextMenuItem("View Artist", "light_artist.png", new Task(() =>
        {
            MauiProgram.mainLayout.NavigateArtist(album.artists.FirstOrDefault().id);
        })));
        MauiProgram.ContextMenuTaskList.Add(new ContextMenuItem("Close", "light_close.png", new Task(() =>
        {
            MauiProgram.mainPage.CloseContextMenu();
        })));

        await MauiProgram.mainLayout.OpenContextMenu();
    }
}
