@using PortaJel_Blazor.Data;
@namespace PortaJel_Blazor.Shared

<li class="music-item PageSecondaryColor" @onclick=NavigateToAlbum @oncontextmenu=OpenContextMenu>
    <div class="image-container" style="display: grid;">
        @{ 
            string imageSrc = imgSrc;
            string placeholder = "data:image/png;base64, " + placeholderBase64;
        }
        <img class="album-image album-cover-img opacityTransition"
             src="@imageSrc"
             style="opacity: 0" 
             onerror="this.src='/images/emptyAlbum.png'"/>
        <img class="album-image-placeholder"
             src=" @placeholder" 
             onerror="this.style.opacity=0" />
    </div>
    <div class="music-details PrimaryTextColor">
        @if(musicItem is Album)
        {
            Album album = (Album)musicItem;
            string artistName = " • " + album.ArtistNames;
            <b class="PrimaryTextColor">@album.Name</b> @artistName
        }   
    </div>
</li>

@code {
    [Parameter] public BaseMusicItem musicItem { get; set; } = new Album();
    [Parameter] public string placeholderBase64 { get; set; } = String.Empty;
    private string imgSrc = string.Empty;
    private Guid musicItemId;

    protected override void OnInitialized()
    {

    }

    protected override void OnParametersSet()
    {
        if (musicItem is Album)
        {
            Album album = (Album)musicItem;
            imgSrc = album.ImgSource;
            musicItemId = album.Id;
        }
        else if (musicItem is Song)
        {
            Song song = (Song)musicItem;
            imgSrc = song.ImgSource;
            musicItemId = song.Id;
        }
        else if (musicItem is Artist)
        {
            Artist artist = (Artist)musicItem;
            imgSrc = artist.ImgSource;
            musicItemId = artist.Id;
        }
        else if (musicItem is Playlist)
        {
            Playlist playlist = (Playlist)musicItem;
            imgSrc = playlist.ImgSource;
            musicItemId = playlist.Id;
        }
        base.OnParametersSet();
    }

    private void NavigateToAlbum()
    {
        if (musicItem != null)
        {
            MauiProgram.MainPage.ShowLoadingScreen(true);
            MauiProgram.WebView.NavigateAlbum(musicItemId);
        }
    }

    private void NavigateToArtist()
    {
        if (musicItem != null)
        {
            MauiProgram.MainPage.ShowLoadingScreen(true);
            MauiProgram.WebView.NavigateArtist(musicItemId);
        }
    }

    private async void OpenContextMenu()
    {
        MauiProgram.MainPage.OpenContextMenu(musicItem, 250, placeholderBase64);
        await Task.Run(() =>
        {
            // Literally just waiting for the fucking thing to close before we refresh
            while (MauiProgram.MainPage.isContextMenuOpen == true)
            {

            }
        });
        StateHasChanged();
    }
}
