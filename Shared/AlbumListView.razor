@using PortaJel_Blazor.Classes.Data
@namespace PortaJel_Blazor.Shared

<li class="music-item PageSecondaryColor" @onclick=NavigateToAlbum @oncontextmenu=OpenContextMenu>
    <div class="image-container" style="display: grid;">
        @{ 
            string imageSrc = imgSrc;
            string placeholder = "data:image/png;base64, " + placeholderBase64;
        }
        <img class="album-image album-cover-img opacityTransition"
             src="@imageSrc"
             style="opacity: 0" 
             onerror="this.src='/images/emptyAlbum.png'"/>
        <img class="album-image-placeholder"
             src=" @placeholder" 
             onerror="this.style.opacity=0" />
    </div>
    <div class="music-details PrimaryTextColor">
        @if(musicItem is Album)
        {
            Album album = (Album)musicItem;
            string artistName = " • " + album.ArtistNames;
            <b class="PrimaryTextColor">@album.Name</b> @artistName
        }   
    </div>
</li>

@code {
    [Parameter] public BaseMusicItem musicItem { get; set; } = new Album();
    [Parameter] public string placeholderBase64 { get; set; } = String.Empty;
    private string imgSrc = string.Empty;
    private Guid musicItemId;

    protected override void OnInitialized()
    {

    }

    protected override void OnParametersSet()
    {
        switch (musicItem)
        {
            case Album album:
                imgSrc = album.ImgSource;
                musicItemId = album.Id;
                break;
            case Song song:
                imgSrc = song.ImgSource;
                musicItemId = song.Id;
                break;
            case Artist artist:
                imgSrc = artist.ImgSource;
                musicItemId = artist.Id;
                break;
            case Playlist playlist:
                imgSrc = playlist.ImgSource;
                musicItemId = playlist.Id;
                break;
        }
        base.OnParametersSet();
    }

    private void NavigateToAlbum()
    {
        if (musicItem is not Album album) return;
        MauiProgram.MainPage.ShowLoadingScreen(true);
        MauiProgram.WebView.NavigateAlbum(album);
    }

    private void NavigateToArtist()
    {
        if (musicItem is not Artist artist) return;
        MauiProgram.MainPage.ShowLoadingScreen(true);
        MauiProgram.WebView.NavigateArtist(artist.Id);
        
    }

    private async void OpenContextMenu()
    {
        MauiProgram.MainPage.OpenContextMenu(musicItem, 250, placeholderBase64);
        await Task.Run(() =>
        {
            // Literally just waiting for the fucking thing to close before we refresh
            while (MauiProgram.MainPage.isContextMenuOpen == true)
            {

            }
        });
        StateHasChanged();
    }
}