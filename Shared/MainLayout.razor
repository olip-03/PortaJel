@using PortaJel_Blazor.Classes;
@using PortaJel_Blazor.Shared;
@using BlazorAnimate;
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject IJSRuntime JS
@namespace PortaJel_Blazor.Shared

<AutoStyle></AutoStyle>

<div class="page PageBackgroundColor">
    <main>
        <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
            @if (_showHeader)
            {
                <div id="mainLayoutToolbar" class="content toolbar PageSecondaryColor">
                    <h2 class="PrimaryTextColor" style="margin: 0;">@pageTitle</h2>
                    <div>
                        <a @onclick="NavigateDownloads" style="margin-right: 1rem">
                            <!-- Download Image -->
                            <svg class="toolbar-img PrimaryTextColor" xmlns="http://www.w3.org/2000/svg" fill="currentColor" height="24" viewBox="0 -960 960 960" width="24"><path d="M280-280h400v-80H280v80Zm200-120 160-160-56-56-64 62v-166h-80v166l-64-62-56 56 160 160Zm0 320q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z" /></svg>
                        </a>
                        <a @onclick="NavigateSettings">
                            <svg class="toolbar-img PrimaryTextColor" xmlns="http://www.w3.org/2000/svg" fill="currentColor" height="24" viewBox="0 -960 960 960" width="24"><path d="m370-80-16-128q-13-5-24.5-12T307-235l-119 50L78-375l103-78q-1-7-1-13.5v-27q0-6.5 1-13.5L78-585l110-190 119 50q11-8 23-15t24-12l16-128h220l16 128q13 5 24.5 12t22.5 15l119-50 110 190-103 78q1 7 1 13.5v27q0 6.5-2 13.5l103 78-110 190-118-50q-11 8-23 15t-24 12L590-80H370Zm70-80h79l14-106q31-8 57.5-23.5T639-327l99 41 39-68-86-65q5-14 7-29.5t2-31.5q0-16-2-31.5t-7-29.5l86-65-39-68-99 42q-22-23-48.5-38.5T533-694l-13-106h-79l-14 106q-31 8-57.5 23.5T321-633l-99-41-39 68 86 64q-5 15-7 30t-2 32q0 16 2 31t7 30l-86 65 39 68 99-42q22 23 48.5 38.5T427-266l13 106Zm42-180q58 0 99-41t41-99q0-58-41-99t-99-41q-59 0-99.5 41T342-480q0 58 40.5 99t99.5 41Zm-2-140Z" /></svg>
                        </a>
                    </div>
                </div>
            }
            <article class="mainContent">
                <div class="bodyContainer">
                    @Body
                </div>
                @if (MauiProgram.MiniPlayerIsOpen)
                { // TODO: Implement some legitiemate system for checking if the miniplayer
                  // should be open or not
                    <div style="height:3rem;"></div>
                }
            </article>
        </Animate>
    </main>
</div>

@code
{
    public string pageTitle
    {
        get { return _pageTitle; }
        set
        {
            _pageTitle = value;
            StateHasChanged();
        }
    }
    public bool showHeader
    {
        get { return _showHeader; }
        set
        {
            _showHeader = value;
            StateHasChanged();
        }
    }
    private bool loading { get; set; } = true;
    public bool isLoading
    {
        get { return loading; }
        set
        {
            loading = value;
            StateHasChanged();
        }
    }

    private string _pageTitle = "PortaJel";
    private bool _showHeader = true;

    private bool waiting { get; set; }
    private bool showError { get; set; }

    private bool showLoading { get; set; }

    private string errorMessage { get; set; } = "Unspecified error! You should not see this message!";

    private bool showMusicPlayer { get; set; } = true;

    public CancellationToken cancellationToken;
    public CancellationTokenSource cancellationSource = new();

    protected override void OnInitialized()
    {
        MauiProgram.webView = this;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender == true)
        {
            MauiProgram.webViewInitalized = true;
        }
    }

    public void UpdateState()
    {
        StateHasChanged();
    }

    public string currentUri = "/";
    public void NavigateHome()
    {
        if (currentUri != "/home")
        {
            showHeader = true;
            pageTitle = "PortaJel";
            currentUri = "/home";

            NavManager.NavigateTo(currentUri);
        }
    }
    public void NavigateLibrary()
    {
        if (currentUri != "/library/false")
        {
            showHeader = true;
            pageTitle = "Library";
            currentUri = "/library/false";

            NavManager.NavigateTo(currentUri);
        }
    }
    public void NavigateFavourites()
    {
        if (currentUri != "/library/true")
        {
            showHeader = true;
            pageTitle = "Favourites";
            currentUri = "/library/true";

            NavManager.NavigateTo(currentUri);
        }
    }
    public void NavigateSearch()
    {
        if (currentUri != "/search")
        {
            showHeader = true;
            pageTitle = "Search";
            currentUri = "/search";

            NavManager.NavigateTo(currentUri);
        }
    }
    public void NavigateSearch(string searchTerm)
    {
        if (currentUri != "/search")
        {
            showHeader = true;
            pageTitle = "Search";
            currentUri = "/search";

            NavManager.NavigateTo(currentUri + "/" + searchTerm, forceLoad: false);
        }
    }
    public void NavigateDownloads()
    {
        if (currentUri != "/downloads")
        {
            showHeader = true;
            pageTitle = "Downloads";
            currentUri = "/downloads";

            NavManager.NavigateTo(currentUri);
        }
    }
    public void NavigateSettings()
    {
        MauiProgram.mainPage.ShowLoadingScreen(true);

        if (currentUri != "/settings")
        {
            showHeader = true;
            pageTitle = "Settings";
            currentUri = "/settings";

            NavManager.NavigateTo(currentUri);
        }
    }
    public void NavigateAlbum(Guid guid)
    {
        if (currentUri != $"/AlbumView/{guid}")
        {
            showHeader = false;
            pageTitle = "Album View";
            currentUri = "/settings";

            NavManager.NavigateTo($"/AlbumView/{guid}");
        }
    }
    public void NavigateArtist(Guid guid)
    {
        if (currentUri != $"/ArtistView/{guid}")
        {
            showHeader = false;
            pageTitle = "Artist View";
            currentUri = $"/ArtistView/{guid}";

            NavManager.NavigateTo($"/ArtistView/{guid}");
        }
    }
    public void NavigatePlaylist(Guid guid)
    {
        showHeader = false;
        pageTitle = "Playlist";
        currentUri = $"/PlaylistView/{guid}";

        NavManager.NavigateTo($"/PlaylistView/{guid}", forceLoad: true);
    }
    // public Task FlagLoading()
    // {
    //     return Task.CompletedTask;
    // }
    // public void CancelLoading()
    // {
    //     cancellationSource.Cancel();
    // }
    public async Task OpenPlayer()
    {
        await JS.InvokeAsync<string>("dragElement", "open");
        await JS.InvokeAsync<string>("LockScroll");
        MauiProgram.MusicPlayerIsOpen = true;
    }
    public async Task ClosePlayer()
    {
        await JS.InvokeAsync<string>("dragElement", "close");
        await JS.InvokeAsync<string>("UnlockScoll");
        MauiProgram.MusicPlayerIsOpen = false;
    }
    public async Task ReturnToPlayer()
    {
        MauiProgram.MusicPlayerIsQueueOpen = false;
        await JS.InvokeAsync<string>("closeQueue");
    }
}