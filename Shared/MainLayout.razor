@inherits LayoutComponentBase
@inject NavigationManager NavManager
@using PortaJel_Blazor.Classes;

<div class="page">
    <main>
        @if (MauiProgram.loginPage)
        {
            <div class="centreItems">
                <div class="login-form">
                    <h1>PortaJel</h1>

                    <label for="server_address"><b>Server Address</b></label>
                    <input class="login-form" type="text" name="server_address" required @bind-value="serverAddress" disabled="@waiting">

                    <label for="username"><b>Username</b></label>
                    <input class="login-form" type="text" name="username" required @bind-value="username" disabled="@waiting">

                    <label for="password"><b>Password</b></label>
                    <input class="login-form" type="password" name="password" required @bind-value="password" disabled="@waiting">

                    <div style="height: 2rem; width: 100%; display:flex; justify-content:center;">
                        @if (showError)
                        {
                            <p>@errorMessage</p>
                        }
                    </div>

                    <button class="login-form" type="submit" @onclick="Login" id="signin" name="signin" disabled="@waiting">Sign In</button>
                    <a class="login-form" @onclick="SkipLogin" disabled="@waiting">Skip Login</a>
                </div>
            </div>
        }
        else
        {
            <div class="top-row px-4">
                <a class="top-row-title" href="/">PortaJel</a>
                <div class="toolbar">
                    <a href="/favourites">
                        <img class="toolbar-img" src="/images/favourite.svg" />
                    </a>
                    <a href="/search">
                        <img class="toolbar-img" src="/images/search.svg" />
                    </a>
                    <a href="/settings">
                        <img class="toolbar-img" src="/images/settings.svg" />
                    </a>
                </div>
            </div>
            @if(!MauiProgram.isConnected)
            {
                <div class="offline">
                    <img class="offline-img" src="/images/clouderror.svg" />
                    Not Connected
                </div>
            }

            <article class="content px-4">
                @Body
            </article>
        }
    </main>
</div>
@code
{
    private string serverAddress { get; set; }
    private string username { get; set; }
    private string password { get; set; }

    private bool waiting { get; set; }
    private bool showError { get; set; }
    private string errorMessage { get; set; } = "Unspecified error! You should not see this message!";

    protected override async Task OnInitializedAsync()
    {
        if (MauiProgram.servers.Count > 0)
        {
            waiting = true;

            foreach (var loadedServer in MauiProgram.servers)
            {
                serverAddress = loadedServer.GetBaseAddress();
                username = loadedServer.GetUsername();
                password = loadedServer.GetPassword();

                bool urlpass = await loadedServer.AuthenticateAddressAsync();
                bool usrpass = await loadedServer.AuthenticateUser();

                if(urlpass && usrpass)
                {
                    waiting = false;

                    MauiProgram.isConnected = true;
                    SkipLogin();
                }
                else
                {
                    waiting = false;
                    showError = true;

                    NetworkAccess accessType = Connectivity.Current.NetworkAccess;
                    if (accessType == NetworkAccess.Internet)
                    {
                        errorMessage = "One or all of the previous servers failed to authenticate!";
                    }
                    else
                    {
                        MauiProgram.isConnected = false;
                        SkipLogin();
                    }
                }
            }
        }
    }

    void SkipLogin()
    {
        if(!waiting)
        {
            MauiProgram.loginPage = false; 
            StateHasChanged();
            return;
        }
    }

    async void Login()
    {
        waiting = true;
        showError = false;

        ServerConnecter serverConnector = new ServerConnecter(DeviceInfo.Current.Name, DeviceInfo.Current.Idiom.ToString(), "PortaJel", "0.0.1");

        bool validServer = await serverConnector.AuthenticateAddressAsync(serverAddress);
        bool validUser = await serverConnector.AuthenticateUser(username, password);

        if (!validServer) 
        { 
            showError = true; 
            errorMessage = "Unable to connect to address " + serverAddress; 
        }
        if (!validUser && validServer)
        { 
            showError = true; 
            errorMessage = "Username or password is incorrect!"; 
        }

        waiting = false;
        MauiProgram.loginPage = showError;
        MauiProgram.isConnected = !showError;

        if(validServer && validUser)
        {
            // If this passed, add this server as a valid connection
            MauiProgram.AddServer(serverConnector);
        }

        StateHasChanged();
    }
}