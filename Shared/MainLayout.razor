@using PortaJel_Blazor.Classes;
@using PortaJel_Blazor.Shared;
@using BlazorAnimate;
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject IJSRuntime JS
@namespace PortaJel_Blazor.Shared

<div class="page">
    <main>
        <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
            @if (_showHeader)
            {
                <div class="content toolbar">
                    <h1 style="margin: 0;">@pageTitle</h1>
                    <div>
                        <a @onclick="NavigateDownloads" style="margin-right: 1rem">
                            <img class="toolbar-img" src="/images/download.svg" />
                        </a>
                        <a @onclick="NavigateSettings">
                            <img class="toolbar-img" src="/images/settings.svg" />
                        </a>
                    </div>
                </div>
            }
            <article class="mainContent">

                <div class="bodyContainer">
                    @Body
                </div>
                @if (MauiProgram.MiniPlayerIsOpen)
                { // TODO: Implement some legitiemate system for checking if the miniplayer
                  // should be open or not
                    <div style="height:3rem;"></div>
                }
            </article>
        </Animate>
    </main>
</div>

@code
{
    public string pageTitle
    {
        get { return _pageTitle; }
        set
        {
            _pageTitle = value;
            StateHasChanged();
        }
    }
    public bool showHeader
    {
        get { return _showHeader; }
        set
        {
            _showHeader = value;
            StateHasChanged();
        }
    }
    private bool loading { get; set; } = true;
    public bool isLoading
    {
        get { return loading; }
        set
        {
            loading = value;
            MauiProgram.mainPage.ShowLoadingScreen(loading);
            StateHasChanged();
        }
    }

    private string _pageTitle = "PortaJel";
    private bool _showHeader = true;

    private bool waiting { get; set; }
    private bool showError { get; set; }

    private bool showLoading { get; set; }

    private string errorMessage { get; set; } = "Unspecified error! You should not see this message!";

    private bool showMusicPlayer { get; set; } = true;

    public CancellationToken cancellationToken;
    public CancellationTokenSource cancellationSource = new();

    protected override void OnInitialized()
    {
        MauiProgram.webView = this;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender == true)
        {
            MauiProgram.webViewInitalized = true;
        }
    }

    public void UpdateState()
    {
        StateHasChanged();
    }

    public string currentUri = "/";
    public void NavigateHome()
    {
        if (currentUri != "/home")
        {
            isLoading = true;
            showHeader = true;
            pageTitle = "PortaJel";
            currentUri = "/home";

            NavManager.NavigateTo(currentUri);
        }
    }
    public void NavigateLibrary()
    {
        if (currentUri != "/library/false")
        {
            isLoading = false;
            showHeader = true;
            pageTitle = "Library";
            currentUri = "/library/false";

            NavManager.NavigateTo(currentUri);
        }
    }
    public void NavigateFavourites()
    {
        if (currentUri != "/library/true")
        {
            isLoading = false;
            showHeader = true;
            pageTitle = "Favourites";
            currentUri = "/library/true";

            NavManager.NavigateTo(currentUri);
        }
    }
    public void NavigateSearch()
    {
        if (currentUri != "/search")
        {
            isLoading = false; // FALSE here because this page takes no time to load
            showHeader = true;
            pageTitle = "Search";
            currentUri = "/search";

            NavManager.NavigateTo(currentUri);
        }
    }
    public void NavigateSearch(string searchTerm)
    {
        if (currentUri != "/search")
        {
            isLoading = false; // FALSE here because this page takes no time to load
            showHeader = true;
            pageTitle = "Search";
            currentUri = "/search";

            NavManager.NavigateTo(currentUri + "/" + searchTerm, forceLoad: false);
        }
    }
    public void NavigateDownloads()
    {
        if (currentUri != "/downloads")
        {
            isLoading = false;
            showHeader = true;
            pageTitle = "Downloads";
            currentUri = "/downloads";

            NavManager.NavigateTo(currentUri);
        }
    }
    public void NavigateSettings()
    {
        if (currentUri != "/settings")
        {
            isLoading = true;
            showHeader = true;
            pageTitle = "Settings";
            currentUri = "/settings";

            NavManager.NavigateTo(currentUri);
        }
    }
    public void NavigateAlbum(Guid guid)
    {
        if (currentUri != $"/AlbumView/{guid}")
        {
            isLoading = true;
            showHeader = false;
            pageTitle = "Album View";
            currentUri = "/settings";

            NavManager.NavigateTo($"/AlbumView/{guid}");
        }
    }
    public void NavigateArtist(Guid guid)
    {
        if (currentUri != $"/ArtistView/{guid}")
        {
            isLoading = true;
            showHeader = false;
            pageTitle = "Artist View";
            currentUri = $"/ArtistView/{guid}";

            NavManager.NavigateTo($"/ArtistView/{guid}");
        }
    }
    public void NavigatePlaylist(Guid guid)
    {
        isLoading = true;
        showHeader = false;
        pageTitle = "Playlist";
        currentUri = $"/PlaylistView/{guid}";

        NavManager.NavigateTo($"/PlaylistView/{guid}", forceLoad: true);
    }
    public Task FlagLoading()
    {
        isLoading = true;
        return Task.CompletedTask;
    }
    public void CancelLoading()
    {
        cancellationSource.Cancel();
    }
    public async Task OpenPlayer()
    {
        await JS.InvokeAsync<string>("dragElement", "open");
        await JS.InvokeAsync<string>("LockScroll");
        MauiProgram.MusicPlayerIsOpen = true;
    }
    public async Task ClosePlayer()
    {
        await JS.InvokeAsync<string>("dragElement", "close");
        await JS.InvokeAsync<string>("UnlockScoll");
        MauiProgram.MusicPlayerIsOpen = false;
    }
    public async Task ReturnToPlayer()
    {
        MauiProgram.MusicPlayerIsQueueOpen = false;
        await JS.InvokeAsync<string>("closeQueue");
    }
}