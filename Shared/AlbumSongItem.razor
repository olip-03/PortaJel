@using PortaJel_Blazor.Data;
@using BlazorAnimate;
@using PortaJel_Blazor.Shared.Icons;
@using PortaJel_Blazor.Classes.Services;
@using PortaJel_Blazor.Shared;
@using Blurhash;
@using CommunityToolkit.Maui.Core;
@using CommunityToolkit.Maui.Alerts;
@namespace PortaJel_Blazor.Shared
@inject IJSRuntime JS;

<div id="@guid.ToString()" @oncontextmenu="() => SelectItem()" class="albumSongItem">
    <!-- Queue overscroll -->
    <div id="@(overscrollId = guid.ToString() + "-overscroll")" class="overscroll-25vw PageBackgroundColor">
        <div class="songitem-optionbtn">
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" style="position:relative;">
                <AddQueueIcon ExtraStyle="width: 2rem; height: 2rem; margin: 0 1rem 0 1rem;" />
            </Animate>
        </div>
    </div>
    <!-- Song contents -->
    <div class="infoContainer">
        @if (ShowSongImageMode)
        { // Image Mode is ON 
            <div class="imgHolder"  @onclick="() => PlaySong(location)">
                <img src="@song.ImgSource" class="imgHolderPrimaryImg @(EngageCheckmode && IsChecked == false ? "imgHolderPrimaryImgSelected" : "")" />
                @*<img class="imgHolderBackImg"/>*@
            </div>
        }
        else
        { // Image Mode is OFF 
            if (location >= 0)
            {
                <div class="numberholder songArtistTitle PrimaryTextColor"  @onclick="() => PlaySong(location)">
                    @if (EngageCheckmode)
                    {
                        <div class="radioButtonContainer">
                            @if (IsChecked)
                            {
                                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                    <input class="radioButton" type="radio" checked="checked">
                                </Animate>
                            }
                            else
                            {
                                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                    <input class="radioButton" type="radio">
                                </Animate>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="indexNumber">
                            @{int displayLocation = location + 1;}
                            @displayLocation
                        </p>
                    }
                </div>
            }
        }

        <button class="songTextContainer" @onclick="() => PlaySong(location)">
            <p class="PrimaryTextColor songTitle">@song.Name</p>
            <p class="SecondaryTextColor songArtistTitle">@song.ArtistNames</p>
        </button>
        <div class="songitem-options">
            <div @onclick="() => FavouriteSong(song.Id)" class="songitem-optionbtn">
                @if (song.IsFavourite)
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" style="position:relative;">
                        <HeartIcon Filled="true" ExtraStyle="width: calc(2rem * 0.8); height: calc(2rem * 0.8);" />
                    </Animate>
                }
            </div>

            <div @onclick="() => OpenContextMenu()" class="songitem-optionbtn">
                <MoreHorizIcon ExtraStyle="width: 2rem; height: 2rem;" />
            </div>
        </div>
    </div>
    <!-- Like overscroll -->
    <div id="@(overscrollId = guid.ToString() + "-overscrollFav")" class="overscroll-auto PageBackgroundColor">
        <div class="songitem-optionbtn">
            @if (!song.IsFavourite)
            {
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" style="position:relative;">
                    <HeartIcon Filled="true" ExtraStyle="width: calc(2rem * 0.8); height: calc(2rem * 0.8); margin: 0 1rem 0 1rem;" />
                </Animate>
            }
            else
            {
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" style="position:relative;">
                    <HeartIcon Filled="false" ExtraStyle="width: calc(2rem * 0.8); height: calc(2rem * 0.8); margin: 0 1rem 0 1rem;" />
                </Animate>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Song song { get; set; } = Song.Empty;
    [Parameter] public Action? OnPlayCallback { get; set; } = null;
    [Parameter] public Action? OnQueueCallback { get; set; } = null;
    [Parameter] public Action? OnSelectCallback { get; set; } = null;
    [Parameter] public int location { get; set; } = -1;
    [Parameter] public bool showImage { get; set; } = false;
    [Parameter] public string base64BlurHash { get; set; } = string.Empty;
    [Parameter] public bool ShowSongImageMode { get; set; } = false;
    [Parameter] public bool EngageCheckmode { get; set; } = false;
    [Parameter] public bool IsChecked { get; set; } = false;

    private Guid guid = Guid.NewGuid();
    private string? overscrollId;
    private bool FavouriteSongLock = false;
    private bool QueueSongLock = false;

    protected override void OnInitialized()
    {
        guid = song.Id;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var lDotNetReference = DotNetObjectReference.Create(this);
            await JS.InvokeAsync<string>("InitAlbumSongItem", new object[2] { lDotNetReference, guid });
        }
    }

    private async void FavouriteSong(Guid songId)
    {
        song.SetIsFavourite(!song.IsFavourite);
        StateHasChanged();
        await Task.Run<bool>(() => MauiProgram.api.SetFavourite(song.Id, song.ServerAddress, song.IsFavourite));
    }

    private async void OpenContextMenu()
    {
        MauiProgram.MainPage.OpenContextMenu(song, 250, base64BlurHash);
        await Task.Run(() =>
        {
            // Literally just waiting for the fucking thing to close before we refresh
            while (MauiProgram.MainPage.MainContextMenu.isOpen == true)
            {

            }
            InvokeAsync(() => StateHasChanged());
        });
    }

    private void SelectItem()
    {
        if (EngageCheckmode == false)
        {
            if (OnSelectCallback != null)
            {
                OnSelectCallback.Invoke();
            }

            IsChecked = true;
            StateHasChanged();
        }
    }


    private void PlaySong(int songIndex)
    { // Play selected song, and queue the rest of the album
        if (EngageCheckmode)
        {
            IsChecked = !IsChecked;
            if (OnSelectCallback != null)
            {
                OnSelectCallback.Invoke();
            }
            StateHasChanged();
        }
        else
        {
            if (OnPlayCallback != null)
            {
                OnPlayCallback.Invoke();
            }
        }

    }

    [JSInvokable("QueueSong")]
    public void QueueSong()
    {
        if (OnQueueCallback != null)
        {
            OnQueueCallback.Invoke();
        }
    }

    [JSInvokable("FavouriteSong")]
    public async void FavouriteSong()
    {
        if (FavouriteSongLock)
        {
            return;
        }
        FavouriteSongLock = true;
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);

        song.SetIsFavourite(!song.IsFavourite);
        await Task.Delay(250);

        StateHasChanged();
        FavouriteSongLock = false;
        await Task.Run(() => MauiProgram.api.SetFavourite(song.Id, song.ServerAddress, song.IsFavourite));
    }
}
