@using PortaJel_Blazor.Data;
@using BlazorAnimate;
@using PortaJel_Blazor.Shared.Icons;
@using PortaJel_Blazor.Classes.Services;
@using PortaJel_Blazor.Shared;
@using Blurhash;
@using CommunityToolkit.Maui.Core;
@using CommunityToolkit.Maui.Alerts;
@namespace PortaJel_Blazor.Shared
@inject IJSRuntime JS;

<div id="@guid.ToString()" @oncontextmenu="() => OpenContextMenu(song)" class="albumSongItem">
    <!-- Queue overscroll -->
    <div id="@(overscrollId = guid.ToString() + "-overscroll")" class="overscroll-25vw PageBackgroundColor">
        <div class="songitem-optionbtn">
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" style="position:relative;">
                <AddQueueIcon ExtraStyle="width: 2rem; height: 2rem; margin: 0 1rem 0 1rem;" />
            </Animate>
        </div>
    </div>
    <!-- Song contents -->
    <div class="infoContainer">
        @if (location >= 0)
        {
            <div class="numberholder songArtistTitle PrimaryTextColor">
                @{int displayLocation = location + 1;}
                @displayLocation
            </div>    
        }

        <button class="songTextContainer" @onclick="() => PlaySong(location)">
            <p class="PrimaryTextColor songTitle">@song.Name</p>
            <p class="SecondaryTextColor songArtistTitle">@song.artistCongregate</p>
        </button>
        <div class="songitem-options">
            <div @onclick="() => FavouriteSong(song.Id)" class="songitem-optionbtn">
                @if (song.IsFavourite)
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" style="position:relative;">
                        <HeartIcon Filled="true" ExtraStyle="width: calc(2rem * 0.8); height: calc(2rem * 0.8);"/>
                    </Animate>
                }
            </div>
           
            <div @onclick="() => OpenContextMenu(song)" class="songitem-optionbtn">
                <MoreHorizIcon ExtraStyle="width: 2rem; height: 2rem;"/>
            </div>
        </div>
    </div>
    <!-- Like overscroll -->
    <div id="@(overscrollId = guid.ToString() + "-overscrollFav")" class="overscroll-auto PageBackgroundColor">
        <div class="songitem-optionbtn">
            @if (!song.IsFavourite)
            {
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" style="position:relative;">
                    <HeartIcon Filled="true" ExtraStyle="width: calc(2rem * 0.8); height: calc(2rem * 0.8); margin: 0 1rem 0 1rem;" />
                </Animate>
            }
            else
            {
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" style="position:relative;">
                    <HeartIcon Filled="false" ExtraStyle="width: calc(2rem * 0.8); height: calc(2rem * 0.8); margin: 0 1rem 0 1rem;" />
                </Animate>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Song song { get; set; } = Song.Empty;
    [Parameter] public int location { get; set; } = -1;
    [Parameter] public bool showImage { get; set; } = false;
    [Parameter] public string base64BlurHash { get; set; } = string.Empty;
    private Guid guid = Guid.NewGuid();
    private string? overscrollId;
    private bool FavouriteSongLock = false;
    private bool QueueSongLock = false;

    protected override void OnInitialized()
    {
        guid = song.Id;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var lDotNetReference = DotNetObjectReference.Create(this);
            await JS.InvokeAsync<string>("InitAlbumSongItem", new object[2] { lDotNetReference, guid });
        }
    }

    private async void FavouriteSong(Guid songId)
    {
        song.IsFavourite = !song.IsFavourite;
        StateHasChanged();
        await Task.Run<bool>(() => MauiProgram.api.SetFavourite(song.Id, song.ServerAddress, song.IsFavourite));
    }

    private async void OpenContextMenu(BaseMusicItem musicItem)
    {
        MauiProgram.MainPage.OpenContextMenu(musicItem, 250, base64BlurHash);
        await Task.Run(() =>
        {
            // Literally just waiting for the fucking thing to close before we refresh
            while (MauiProgram.MainPage.isContextMenuOpen == true)
            {

            }
        });
        StateHasChanged();
    }

    private async void PlaySong(int songIndex)
    { // Play selected song, and queue the rest of the album
        await Task.Delay(300); // await CSS animation to finish
        #if WINDOWS
    return;
        #endif
        // Confirm that the item itself is fine.

        if (song.AlbumData == null && Application.Current != null && Application.Current.MainPage != null)
        {
            await Application.Current.MainPage.DisplayAlert("Error?", $"PlaySong({songIndex}) failed because song.album was null! Please fetch this album before running this function!", "Continue");
            return;
        }
        if (song.AlbumData == Album.Empty && Application.Current != null && Application.Current.MainPage != null)
        {
            await Application.Current.MainPage.DisplayAlert("Error?", $"PlaySong({songIndex}) failed because song.album was null! Please fetch this album before running this function!", "Continue");
            return;
        }

        try
        {
            if (MauiProgram.MediaService == null)
            {
                MauiProgram.MediaService = new MediaService();
                await MauiProgram.MediaService.Initalize();
            }
            MauiProgram.MediaService.SetPlayingCollection(song.AlbumData, songIndex);

            MauiProgram.currentAlbumGuid = song.AlbumData.id;
            // MauiProgram.currentSongGuid = album song at index;

            MauiProgram.MainPage.RefreshPlayer();
            MauiProgram.MediaService.Play();
        }
        catch (Exception ex)
        {
            if (Application.Current != null &&
                Application.Current.MainPage != null)
            {
                await Application.Current.MainPage.DisplayAlert("Error?", $"{ex.Message} at {ex.StackTrace}", "Continue");
                return;
            }
        }

        StateHasChanged();
        MauiProgram.WebView.UpdateState();
    }

    [JSInvokable("QueueSong")]
    public async void QueueSong()
    {
        if (QueueSongLock)
        {
            return;
        }
        QueueSongLock = true;
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);

        await Task.Delay(250);

        if(MauiProgram.MediaService == null)
        {
            MauiProgram.MediaService = new MediaService();
            await MauiProgram.MediaService.Initalize();
        }
        
        // Adds song to Queue as well as UI
        MauiProgram.MediaService.AddSong(song);
        // MauiProgram.MainPage.RefreshQueue();

        #if !WINDOWS
        CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

        string text = $"{song.Name} added to queue.";
        ToastDuration duration = ToastDuration.Short;
        double fontSize = 14;

        var toast = Toast.Make(text, duration, fontSize);
        await toast.Show(cancellationTokenSource.Token);
        #endif
        QueueSongLock = false;
    }

    [JSInvokable("FavouriteSong")]
    public async void FavouriteSong()
    {
        if (FavouriteSongLock)
        {
            return;
        }
        FavouriteSongLock = true;
        HapticFeedback.Default.Perform(HapticFeedbackType.Click);

        song.IsFavourite = !song.IsFavourite;
        await Task.Delay(250);

        StateHasChanged();
        FavouriteSongLock = false;
        await Task.Run(() => MauiProgram.api.SetFavourite(song.Id, song.ServerAddress, song.IsFavourite));
    }
}
