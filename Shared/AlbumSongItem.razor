@using PortaJel_Blazor.Data;
@using BlazorAnimate;
@using PortaJel_Blazor.Shared.Icons;
@using PortaJel_Blazor.Classes.Services;
@using PortaJel_Blazor.Shared;
@using Blurhash;
@namespace PortaJel_Blazor.Shared

<div class="albumSongItem" @oncontextmenu="() => OpenContextMenu(song)">
    <div class="overscroll">
    </div>
    <div class="infoContainer">
        <button class="songTextContainer" @onclick="() => PlaySong(location)">
            <p class="PrimaryTextColor songTitle">@song.name</p>
            <p class="SecondaryTextColor songArtistTitle">@song.artistCongregate</p>
        </button>
        <div class="songitem-options">
            <div @onclick="() => FavouriteSong(song.id)">
                @if (song.isFavourite)
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" style="position:relative;">
                        <HeartIcon Filled="true" ExtraStyle="width: calc(2rem * 0.8); height: calc(2rem * 0.8);"/>
                    </Animate>
                }
                else
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" style="position:relative;">
                        <HeartIcon Filled="false" ExtraStyle="width: calc(2rem * 0.8); height: calc(2rem * 0.8);"/>
                    </Animate>
                }
            </div>
           
            <div @onclick="() => OpenContextMenu(song)">
                <MoreHorizIcon ExtraStyle="width: 2rem; height: 2rem;"/>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Song song { get; set; } = Song.Empty;
    [Parameter] public int location { get; set; } = -1;
    [Parameter] public bool showImage { get; set; } = false;
    [Parameter] public string base64BlurHash { get; set; } = string.Empty;

    private async void FavouriteSong(Guid songId)
    {
        song.isFavourite = !song.isFavourite;
        StateHasChanged();
        await Task.Run<bool>(() => MauiProgram.api.SetFavourite(song, song.isFavourite));
    }

    private async void OpenContextMenu(BaseMusicItem musicItem)
    {
        MauiProgram.MainPage.OpenContextMenu(musicItem, 250, base64BlurHash);
        await Task.Run(() =>
        {
            // Literally just waiting for the fucking thing to close before we refresh
            while (MauiProgram.MainPage.isContextMenuOpen == true)
            {

            }
        });
        StateHasChanged();
    }

    private async void PlaySong(int songIndex)
    { // Play selected song, and queue the rest of the album
        await Task.Delay(300); // await CSS animation to finish
        #if WINDOWS
        return;
        #endif
        // Confirm that the item itself is fine.
        if (song.album == Album.Empty &&
            Application.Current != null &&
            Application.Current.MainPage != null)
        {
            await Application.Current.MainPage.DisplayAlert("Error?", $"PlaySong({songIndex}) failed because song.album was null! Please fetch this album before running this function!", "Continue");
            return;
        }

        try
        {
            MauiProgram.MediaService.SetPlayingCollection(song.album, songIndex);

            MauiProgram.currentAlbumGuid = song.album.id;
            // MauiProgram.currentSongGuid = album song at index;

            MauiProgram.MainPage.RefreshPlayer();
            MauiProgram.MediaService.Play();
        }
        catch (Exception ex)
        {
            if (Application.Current != null &&
                Application.Current.MainPage != null)
            {
                await Application.Current.MainPage.DisplayAlert("Error?", $"{ex.Message} at {ex.StackTrace}", "Continue");
                return;
            }
        }

        StateHasChanged();
        MauiProgram.WebView.UpdateState();
    }
}
