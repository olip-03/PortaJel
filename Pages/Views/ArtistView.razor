@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.Shared;
@using BlazorAnimate;
@using PortaJel_Blazor.Shared.Icons;

@inject IJSRuntime JS;
@page "/ArtistView/{artistId}"

@if (!isLoading)
{
    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">

        <ViewHeader backgroundImgUrl="@backgroundImgUrl" backgroundImgUrlPlaceholder="@backgroundImgUrlPlaceholder" baseMusicItem=@artist />

        <!-- Container for background image-->
        <div class="backgroundImgContainer">
            <img src="@backgroundImgUrl" class="backgroundImg album-cover-img" />
            <img src="data:image/png;base64, @backgroundImgUrlPlaceholder" class="backgroundImgPlaceholder" />
        </div>

        <div class="artistInfoContainer">
            <!-- Artist Images -->
            <div class="artistImgContainer">
                <img class="artistImg album-cover-img" src="@imgUrl" />
                <img class="artistImgPlaceholder" src="data:image/png;base64, @imgUrlPlaceholder" />
            </div>
            <div class="artistNameContainer">
                @if (hasLogo)
                {
                    <!-- Logo image -->
                    <div class="logoImgContainer">
                        <img src="@logoUrl" class="logoImg album-cover-img" loading="eager" />
                        <!-- Placeholders dont really work for logos :( -->
                    </div>
                }
                <h1 class="artistName PrimaryTextColor">@artist.name</h1>
            </div>

        </div>

        <div class="playback-controls">
            <div @onclick=FavouriteItem id="playback-controls-fav">
                @if (artist.isFavourite)
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <HeartIcon Filled=true ExtraStyle="height: 2rem; width: 2rem;"></HeartIcon>
                    </Animate>
                }
                else
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <HeartIcon Filled=false ExtraStyle="height: 2rem; width: 2rem;"></HeartIcon>
                    </Animate>
                }
            </div>
            <div class="playback-controls-container" id="playback-controls-btns">
                <div class="playback-controls-btn">
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <ShuffleIcon Enabled=false ExtraStyle="height: 2rem; width: 2rem;"></ShuffleIcon>
                    </Animate>
                </div>
                <div class="playback-controls-btn playbtn">
                    <img class="playback-controls-btn-img" src="/images/play.svg">
                </div>
            </div>
        </div>

        <div>
            <div class="tool-container">
                <div @onclick=ToggleSort>
                    @switch (sort)
                    {
                        case sortMethod.byActivity:
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                                <p class="tools-text PrimaryTextColor">Activity</p>
                            </Animate>
                            break;
                        case sortMethod.byArtist:
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                                <p class="tools-text PrimaryTextColor">Artist</p>
                            </Animate>
                            break;
                        case sortMethod.byName:
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                                <p class="tools-text PrimaryTextColor">Name</p>
                            </Animate>
                            break;
                        case sortMethod.byDate:
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                                <p class="tools-text PrimaryTextColor">Date</p>
                            </Animate>
                            break;
                    }
                </div>
                <div @onclick=ToggleView>
                    @if (showGrid)
                    {
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <img src="/images/gridview.svg" alt="Grid Icon" class="tools-icon" />
                        </Animate>
                    }
                    else
                    {
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <img src="/images/listview.svg" alt="Grid Icon" class="tools-icon" />
                        </Animate>
                    }
                </div>
            </div>

            @* Custom styling for items when grid mode is selected *@
            @if (showGrid)
            {
                <style>
                    .album-list {
                        width: 100%;
                        display: grid;
                        grid-template-columns: repeat(2, 1fr);
                        grid-gap: 20px 10px;
                    }
                </style>
            }

            @* Load actual items *@
            <div class="album-list">
                @if (isLoading)
                { // Spinner
                    <Spinner />
                }
                else if (artistAlbums.Length > 0)
                { // Load information
                    for (int i = 0; i < artistAlbums.Length; i++)
                    {
                        Album item = new Album();
                        if (artistAlbums[i] != null)
                        {
                            item = artistAlbums[i];
                        }

                        string placeholderImg = string.Empty;
                        try { placeholderImg = placeholderImages[i]; }
                        catch { placeholderImg = string.Empty; }
                        <SearchResultItem musicObject="@item" isGrid=@showGrid placeholderBase64="@placeholderImg" />
                    }
                }
                else
                { // TODO: 'something went wrong click here to try again' prompt

                }
            </div>
        </div>

        @if (!String.IsNullOrWhiteSpace(artist.description))
        {
            <div class="PageSecondaryColor additional-info" @onclick=ToggleExpandDescription>
                <p class="additional-info-text PrimaryTextColor">@artist.description</p>
                <p style="position: absolute; bottom: 100%; left: 100%;">Read more</p>
            </div>
        }

        <p>@errorMsg</p>
    </Animate>
}

@code {
    [Parameter] public string artistId { get; set; }
    private Artist artist { get; set; } = Artist.Empty;

    private string backgroundImgUrl = string.Empty;
    private string backgroundImgUrlPlaceholder = string.Empty;
    private string imgUrl = string.Empty;
    private string imgUrlPlaceholder = string.Empty;
    private string logoUrl = string.Empty;
    private string logoUrlPlaceholder = string.Empty;
    private bool hasLogo = false;

    // List view stuff
    public Album[] artistAlbums = new Album[0];
    private string[] placeholderImages = new string[0];
    private int totalRecordCount = 0;
    private bool isLoading = false;

    private bool showGrid = false;

    private int itemsPerPage = 100;
    private int startFromIndex = 0;
    private int selectedPage = 0;
    private int pages = 0;

    private int lowerPages = 0;
    private int higherPages = 0;

    private string errorMsg = string.Empty;

    private enum sortMethod
    {
        byArtist,
        byDate,
        byName,
        byActivity
    }
    sortMethod sort = sortMethod.byDate;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        MauiProgram.WebView.pageTitle = "Artist View";
        MauiProgram.WebView.currentUri = $"/ArtistView/{artistId}";
        MauiProgram.WebView.showHeader = false;

        try
        {
            Guid parseId = Guid.Parse(artistId);
            if (artistId != null)
            {
                artist = await MauiProgram.api.GetArtistAsync(parseId);
            }
            else
            {
                MauiProgram.WebView.NavigateHome();
                return;
            }

            if (artist != null)
            {
                int screenWidth = (int)Application.Current.Windows.FirstOrDefault().Width;
                backgroundImgUrl = artist.backgroundImage.SourceAtResolution(screenWidth);

                int imgScale = (int)(Application.Current.Windows.FirstOrDefault().Width * 0.4);
                imgUrl = artist.image.SourceAtResolution(imgScale);

                artistAlbums = artist.artistAlbums;
                placeholderImages = new string[artistAlbums.Length];
                for (int i = 0; i < artistAlbums.Length; i++)
                {
                    try
                    {
                        placeholderImages[i] = await artistAlbums[i].image.BlurhashToBase64Async(20, 20);
                    }
                    catch (Exception)
                    {
                        placeholderImages[i] = string.Empty;
                    }
                }
                imgUrlPlaceholder = await artist.image.BlurhashToBase64Async(20, 20);
                backgroundImgUrlPlaceholder = await artist.backgroundImage.BlurhashToBase64Async(20, 20);

                logoUrl = artist.logoImage.source;
                if (!String.IsNullOrWhiteSpace(logoUrl))
                {
                    logoUrlPlaceholder = await artist.logoImage.BlurhashToBase64Async(20, 20);
                    hasLogo = true;
                }
            }
        }
        catch (Exception ex)
        {
            errorMsg = ex.ToString();
        }
        isLoading = false;
        MauiProgram.WebView.isLoading = false;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeAsync<string>("InitAllImages");
        await JS.InvokeAsync<string>("InitalizeArtistView");
        if (!isLoading)
        {
            MauiProgram.MainPage.ShowLoadingScreen(false);
        }
    }
    private void SelectPage(int page)
    {
        startFromIndex = itemsPerPage * page;
        selectedPage = page;
    }
    private void ToggleSort()
    {
        if (sort >= sortMethod.byActivity)
        {
            sort = 0;
        }
        else
        {
            sort++;
        }
        MauiProgram.librarySortMethod = (int)sort;
    }
    private void ToggleView()
    {
        SelectPage(selectedPage);

        showGrid = !showGrid; // toggle
        MauiProgram.libraryShowGrid = showGrid;

        StateHasChanged();
    }
    public async void ToggleExpandDescription()
    {
        await JS.InvokeAsync<string>("ToggleExpandDescription");
    }
    private async void FavouriteItem()
    {
        artist.isFavourite = !artist.isFavourite;
        StateHasChanged();
        await MauiProgram.api.SetFavourite(artist.id, artist.serverAddress, artist.isFavourite);
    }
    private async void GoBack()
    {
        MauiProgram.WebView.isLoading = true;
        try
        {
            await JS.InvokeAsync<string>("goBack");
        }
        catch (Exception ex)
        {
            bool answer = await App.Current.MainPage.DisplayAlert("Error?", $"Failed to navigate back will return home. Error: {ex} ", "Return", "Continue");
            MauiProgram.WebView.NavigateHome();
        }
    }
}