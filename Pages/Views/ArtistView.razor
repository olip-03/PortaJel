@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.UI.Search;
@using BlazorAnimate;
@inject IJSRuntime JS;
@page "/ArtistView/{artistId}"

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
    <button class="GoBackButton" @onclick=GoBack>
        <img src="/images/back.svg" class="">
    </button>

<div class="artistImgHolder">
    <div class="backgroundImg" style="background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(255, 255, 255, 1)), url(@backgroundImgUrl)" />
    <div class="artistImageContainer">
        <img src="@imgUrl" class="artistImg" loading="eager" />
        <div class="artistNameContainer">
            @if (hasLogo)
            {
                <img src="@logoUrl" class="logoImg" loading="eager" />
            }
            <h1 class="artistName">@artist.name</h1>
        </div>
    </div>
</div>

<!-- Spacer to keep albums and other elemnts from overlapping -->
<div class="headerSpacer"/>

<div class="playback-controls">
    <div @onclick=FavouriteItem>
        @if (artist.isFavourite)
        {
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                <svg class="playback-controls-btn-img favbtn" viewBox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg">
                    <path d="M 480 -120 L 422 -172 C 354.667 -232.667 299 -285 255 -329 C 211 -373 176 -412.5 150 -447.5 C 124 -482.5 105.833 -514.667 95.5 -544 C 85.167 -573.333 80 -603.333 80 -634 C 80 -696.667 101 -749 143 -791 C 185 -833 237.333 -854 300 -854 C 334.667 -854 367.667 -846.667 399 -832 C 430.333 -817.333 457.333 -796.667 480 -770 C 502.667 -796.667 529.667 -817.333 561 -832 C 592.333 -846.667 625.333 -854 660 -854 C 722.667 -854 775 -833 817 -791 C 859 -749 880 -696.667 880 -634 C 880 -603.333 874.833 -573.333 864.5 -544 C 854.167 -514.667 836 -482.5 810 -447.5 C 784 -412.5 749 -373 705 -329 C 661 -285 605.333 -232.667 538 -172 L 480 -120 Z M 480 -501 Z" fill="currentColor" transform="matrix(1, 0, 0, 1, 7.105427357601002e-15, 1.1368683772161603e-13)" />
                </svg>
            </Animate>
        }
        else
        {
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                <img class="playback-controls-btn-img" src="/images/heart.svg">
            </Animate>
        }
    </div>
    <div class="playback-controls">
        <div class="playback-controls-btn">
            <img class="playback-controls-btn-img" src="/images/shuffle.svg">
        </div>
        <div class="playback-controls-btn playbtn">
            <img class="playback-controls-btn-img" src="/images/play.svg">
        </div>
    </div>
</div>

<div>
    <div class="tool-container">
        <div @onclick=ToggleSort>
            @switch (sort)
            {
                case sortMethod.byActivity:
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                        <p class="tools-text">Activity</p>
                    </Animate>
                    break;
                case sortMethod.byArtist:
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                        <p class="tools-text">Artist</p>
                    </Animate>
                    break;
                case sortMethod.byName:
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                        <p class="tools-text">Name</p>
                    </Animate>
                    break;
                case sortMethod.byDate:
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                        <p class="tools-text">Date</p>
                    </Animate>
                    break;
            }
        </div>
        <div @onclick=ToggleView>
            @if (showGrid)
            {
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <img src="/images/gridview.svg" alt="Grid Icon" class="tools-icon" />
                </Animate>
            }
            else
            {
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <img src="/images/listview.svg" alt="Grid Icon" class="tools-icon" />
                </Animate>
            }
        </div>
    </div>

    @* Custom styling for items when grid mode is selected *@
    @if (showGrid)
    {
        <style>
            .album-list {
                width: 100%;
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                grid-gap: 20px 10px;
            }
        </style>
    }

    @* Load actual items *@
    <div class="album-list">
        @if (isLoading)
        { // Spinner
            <Spinner />
        }
        else if (artistAlbums.Length > 0)
        { // Load information
            for (int i = 0; i < artistAlbums.Length; i++)
            {
                Album item = new Album();
                if (artistAlbums[i] != null)
                {
                    item = artistAlbums[i];
                }
                <SearchResultItem musicObject="@item" isGrid=@showGrid />
            }
        }
        else
        { // TODO: 'something went wrong click here to try again' prompt

        }
    </div>
</div>

@if (@artist.description != String.Empty)
{
    <div class="additional-info">
        <p>@artist.description</p>
    </div>
}
</Animate>

@code {
    [Parameter] public string artistId { get; set; }
    private Artist artist { get; set; } = Artist.Empty;


    private string backgroundImgUrl = string.Empty;
    private string imgUrl = string.Empty;
    private string logoUrl = string.Empty;
    private bool hasLogo = false;

    // List view stuff
    public Album[] artistAlbums = new Album[0];
    private int totalRecordCount = 0;
    private bool isLoading = false;

    private bool showGrid = false;

    private int itemsPerPage = 100;
    private int startFromIndex = 0;
    private int selectedPage = 0;
    private int pages = 0;

    private int lowerPages = 0;
    private int higherPages = 0;

    private enum sortMethod
    {
        byArtist,
        byDate,
        byName,
        byActivity
    }
    sortMethod sort = sortMethod.byDate;

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.mainLayout.pageTitle = "Artist View";
        MauiProgram.mainLayout.currentUri = $"/ArtistView/{artistId}";
        MauiProgram.mainLayout.showHeader = false;

        Guid parseId = Guid.Parse(artistId);
        if (artistId != null)
        {
            artist = await MauiProgram.servers[0].GetArtistAsync(parseId);
        }
        else
        {
            MauiProgram.mainLayout.NavigateHome();
            return;
        }

        if(artist != null)
        {
            int screenWidth = (int)Application.Current.Windows.FirstOrDefault().Width;
            backgroundImgUrl = artist.backgroundImage.SourceAtResolution(screenWidth);

            int imgScale = (int)(Application.Current.Windows.FirstOrDefault().Width * 0.4);
            imgUrl = artist.image.SourceAtResolution(imgScale);

            artistAlbums = artist.artistAlbums;

            logoUrl = artist.logoImage.source;
            if (logoUrl != string.Empty)
            {
                hasLogo = true;
            }
        }

        await Task.Run(() => { Thread.Sleep(250); });
        MauiProgram.mainLayout.isLoading = false;
    }
    private async void SelectPage(int page)
    {
        startFromIndex = itemsPerPage * page;
        selectedPage = page;
    }
    private void ToggleSort()
    {
        if (sort >= sortMethod.byActivity)
        {
            sort = 0;
        }
        else
        {
            sort++;
        }
        MauiProgram.librarySortMethod = (int)sort;
    }
    private async void ToggleView()
    {
        SelectPage(selectedPage);

        showGrid = !showGrid; // toggle
        MauiProgram.libraryShowGrid = showGrid;

        StateHasChanged();
    }
    private async void FavouriteItem()
    {
        artist.isFavourite = !artist.isFavourite;
        StateHasChanged();
        await MauiProgram.servers[0].FavouriteItem(artist.id, artist.isFavourite);
    }
    private async void GoBack()
    {
        MauiProgram.mainLayout.isLoading = true;
        try
        {
            await JS.InvokeAsync<string>("goBack");
        }
        catch (Exception ex)
        {
            bool answer = await App.Current.MainPage.DisplayAlert("Error?", $"Failed to navigate back will return home. Error: {ex} ", "Return", "Continue");
            MauiProgram.mainLayout.NavigateHome();
        }
    }
}