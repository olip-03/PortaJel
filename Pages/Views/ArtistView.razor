@using PortaJel_Blazor.Shared;
@using BlazorAnimate;
@using PortaJel_Blazor.Classes.Data
@using PortaJel_Blazor.Shared.Icons;

@inject IJSRuntime JS;
@page "/ArtistView/{artistId}"

@if (loaded)
{
    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
        <ViewHeader backgroundImgUrl="@backgroundImgUrl" backgroundImgUrlPlaceholder="@backgroundImgUrlPlaceholder" baseMusicItem=@artist />

        <!-- Container for background image-->
        <div class="backgroundImgContainer">
            <img src="@backgroundImgUrl" class="backgroundImg album-cover-img" />
            <img src="data:image/png;base64, @backgroundImgUrlPlaceholder" class="backgroundImgPlaceholder" />
        </div>

        <div class="artistInfoContainer">
            <!-- Artist Images -->
            <div class="artistImgContainer">
                <img class="artistImg album-cover-img" src="@imgUrl" />
                <img class="artistImgPlaceholder" src="data:image/png;base64, @imgUrlPlaceholder" />
            </div>
            <div class="artistNameContainer">
                @if (hasLogo)
                {
                    <!-- Logo image -->
                    <div class="logoImgContainer">
                        <img src="@logoUrl" class="logoImg album-cover-img" loading="eager" />
                        <!-- Placeholders dont really work for logos :( -->
                    </div>
                }
                <h1 class="artistName PrimaryTextColor">@artist.Name</h1>
            </div>

        </div>

        <div class="playback-controls">
            <div @onclick=FavouriteItem id="playback-controls-fav">
                @if (artist.IsFavourite)
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <HeartIcon Filled=true ExtraStyle="height: 2rem; width: 2rem;"></HeartIcon>
                    </Animate>
                }
                else
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <HeartIcon Filled=false ExtraStyle="height: 2rem; width: 2rem;"></HeartIcon>
                    </Animate>
                }
            </div>
            <div class="playback-controls-container" id="playback-controls-btns">
                <div class="playback-controls-btn">
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <ShuffleIcon Enabled=false ExtraStyle="height: 2rem; width: 2rem;"></ShuffleIcon>
                    </Animate>
                </div>
                <div class="playback-controls-btn playbtn">
                    <img class="playback-controls-btn-img" src="/images/play.svg">
                </div>
            </div>
        </div>

        <div>
            <div class="tool-container">
                <div @onclick=ToggleSort>
                    @switch (sort)
                    {
                        case sortMethod.byActivity:
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                                <p class="tools-text PrimaryTextColor">Activity</p>
                            </Animate>
                            break;
                        case sortMethod.byArtist:
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                                <p class="tools-text PrimaryTextColor">Artist</p>
                            </Animate>
                            break;
                        case sortMethod.byName:
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                                <p class="tools-text PrimaryTextColor">Name</p>
                            </Animate>
                            break;
                        case sortMethod.byDate:
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                                <p class="tools-text PrimaryTextColor">Date</p>
                            </Animate>
                            break;
                    }
                </div>
                <div @onclick=ToggleView>
                    @if (showGrid)
                    {
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <ListViewIcon IsGrid=@showGrid ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                        </Animate>
                    }
                    else
                    {
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <ListViewIcon IsGrid=@showGrid ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                        </Animate>
                    }
                </div>
            </div>

            @* Custom styling for items when grid mode is selected *@
            @if (showGrid)
            {
                <style>
                    .album-list {
                        width: 100%;
                        display: grid;
                        grid-template-columns: repeat(2, 1fr);
                        grid-gap: 20px 10px;
                    }
                </style>
            }

            @* Load actual items *@
            <div class="album-list">
                @for (int i = 0; i < artistAlbums.Length; i++)
                {
                    Album item = new Album();
                    if (artistAlbums[i] != null)
                    {
                        item = artistAlbums[i];
                    }

                    string placeholderImg = string.Empty;
                    try { placeholderImg = placeholderImages[i]; }
                    catch { placeholderImg = string.Empty; }
                    <SearchResultItem musicObject="@item" isGrid=@showGrid placeholderBase64="@placeholderImg" />
                }
            </div>
        </div>

        @if (!String.IsNullOrWhiteSpace(artist.Description))
        {
            <div class="PageSecondaryColor additional-info" @onclick=ToggleExpandDescription>
                <p class="additional-info-text PrimaryTextColor">@artist.Description</p>
            </div>
        }

        @if (similarArtistsBase64BlurHash.Count() > 0)
        { // but only after the blurhash is done lol
            <HorizontalMusicItemList Title="More Like This" itemCount="@similarArtists.Count()" albumData="@similarArtists" albumBlurHashData="@similarArtistsBase64BlurHash" />
        }
        else if (similarArtists.Count() > 0)
        { // and again only if we actually HAVE reccomedation
            <HorizontalMusicItemList Title="More Like This" itemCount="@similarArtists.Count()" albumData="null" albumBlurHashData="null" />
        }

        <p>@errorMsg</p>
    </Animate>
}

@code {
    [Parameter] public string artistId { get; set; } = string.Empty;
    private Artist artist { get; set; } = Artist.Empty;

    private string backgroundImgUrl = string.Empty;
    private string backgroundImgUrlPlaceholder = string.Empty;
    private string imgUrl = string.Empty;
    private string imgUrlPlaceholder = string.Empty;
    private string logoUrl = string.Empty;
    private string logoUrlPlaceholder = string.Empty;
    private bool hasLogo = false;

    // List view stuff
    public Album[] artistAlbums = new Album[0];
    private string[] placeholderImages = new string[0];
    private int similarArtistLimit = 30;
    private Artist[] similarArtists = new Artist[0];
    private string?[] similarArtistsBase64BlurHash = new string?[0];
    private int totalRecordCount = 0;
    private bool loaded = false;

    private bool showGrid = false;

    private int itemsPerPage = 100;
    private int startFromIndex = 0;
    private int selectedPage = 0;
    private int pages = 0;

    private int lowerPages = 0;
    private int higherPages = 0;

    private string errorMsg = string.Empty;

    private enum sortMethod
    {
        byArtist,
        byDate,
        byName,
        byActivity
    }
    sortMethod sort = sortMethod.byDate;

    protected override void OnInitialized()
    {
        MauiProgram.WebView.pageTitle = "Artist View";
        MauiProgram.WebView.currentUri = $"/ArtistView/{artistId}";
        MauiProgram.WebView.showHeader = false;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (artist != null)
        {
            await JS.InvokeAsync<string>("InitAllImages");
            await JS.InvokeAsync<string>("InitalizeArtistView");
        }
        if (loaded)
        {
            MauiProgram.WebView.isLoading = false;
            MauiProgram.MainPage.ShowLoadingScreen(false);
        }
    }
    protected override void OnParametersSet()
    {
        loaded = false;
        similarArtists = new Artist[0];
        similarArtistsBase64BlurHash = new string?[0];
        StateHasChanged();
        LoadArtist();
    }
    private async void LoadArtist()
    {
        if (Application.Current == null) return;
        Window? window = Application.Current.Windows.FirstOrDefault();
        if (window == null) return;

        try
        {
            Guid parseId = Guid.Parse(artistId);
            if (artistId != null)
            {
                MauiProgram.UpdateDebugMessage("Starting request for Artists data.");
                Task<Artist> getArtist = MauiProgram.Server.Artist.GetArtistAsync(parseId);
                Task<Artist[]> getSimilarArtist = MauiProgram.Server.Artist.GetSimilarArtistAsync(parseId, similarArtistLimit);
                await Task.WhenAll(getArtist, getSimilarArtist);
                artist = getArtist.Result;
                similarArtists = getSimilarArtist.Result;

                MauiProgram.UpdateDebugMessage("Setting Image resolution.");
                int screenWidth = (int)window.Width;
                backgroundImgUrl = artist.BackgroundImgSource;

                int imgScale = (int)(window.Width * 0.4);
                imgUrl = artist.ImgSource;

                MauiProgram.UpdateDebugMessage("Decoding Blurhash.");
                artistAlbums = artist.Albums.Select(album => new Album(album)).ToArray();
                placeholderImages = await GenerateBlurHash(artistAlbums);

                string? artistBlurhash = await MusicItemImage.BlurhashToBase64Async(artist.ImgBlurhash, 20, 20);
                string? backgrounBlurhash = await MusicItemImage.BlurhashToBase64Async(artist.BackgroundImgBlurhash, 20, 20);
                imgUrlPlaceholder = artistBlurhash == null ? string.Empty : artistBlurhash;
                backgroundImgUrlPlaceholder = backgrounBlurhash == null ? string.Empty : backgrounBlurhash;

                logoUrl = artist.LogoImgSource;
                if (!String.IsNullOrWhiteSpace(logoUrl))
                {
                    string? getLogoblurhash = await MusicItemImage.BlurhashToBase64Async(artist.LogoImgSource, 20, 20);
                    logoUrlPlaceholder = getLogoblurhash == null ? string.Empty : getLogoblurhash;
                    hasLogo = true;
                }

                Task<string[]> runSimilarBlurhash = GenerateBlurHash(similarArtists);
                similarArtistsBase64BlurHash = await runSimilarBlurhash;
            }
            else
            {
                MauiProgram.WebView.NavigateHome();
                return;
            }
        }
        catch (Exception ex)
        {
            errorMsg = ex.ToString();
        }

        loaded = true;
        StateHasChanged();
        await Task.Delay(250); // allow page to catch up 
        MauiProgram.WebView.isLoading = false;
        MauiProgram.MainPage.ShowLoadingScreen(false);
    }
    private void SelectPage(int page)
    {
        startFromIndex = itemsPerPage * page;
        selectedPage = page;
    }
    private void ToggleSort()
    {
        if (sort >= sortMethod.byActivity)
        {
            sort = 0;
        }
        else
        {
            sort++;
        }
        MauiProgram.librarySortMethod = (int)sort;
    }
    private void ToggleView()
    {
        SelectPage(selectedPage);

        showGrid = !showGrid; // toggle
        MauiProgram.libraryShowGrid = showGrid;

        StateHasChanged();
    }
    public async void ToggleExpandDescription()
    {
        await JS.InvokeAsync<string>("ToggleExpandDescription");
    }
    private async void FavouriteItem()
    {
        artist.SetIsFavourite(!artist.IsFavourite);
        StateHasChanged();
        await MauiProgram.Server.SetIsFavourite(artist.Id, artist.IsFavourite, artist.ServerAddress);
    }
    private async void GoBack()
    {
        if (App.Current == null) return; 
        if (App.Current.MainPage == null) return;

        MauiProgram.WebView.isLoading = true;
        try
        {
            await JS.InvokeAsync<string>("goBack");
        }
        catch (Exception ex)
        {
            bool answer = await App.Current.MainPage.DisplayAlert("Error?", $"Failed to navigate back will return home. Error: {ex} ", "Return", "Continue");
            MauiProgram.WebView.NavigateHome();
        }
    }
    private async Task<string[]> GenerateBlurHash(BaseMusicItem[] data)
    {
        String[] toReturn = new string[data.Count()];
        for (int i = 0; i < data.Count(); i++)
        {
            try
            {
                string? base64 = await MusicItemImage.BlurhashToBase64Async(data[i], 20, 20);
                toReturn[i] = base64 == null ? string.Empty : base64;
            }
            catch (Exception)
            {
                toReturn[i] = string.Empty;
            }
        }
        return toReturn;
    }
}