@using PortaJel_Blazor.Data;
@using BlazorAnimate;
@inject IJSRuntime JS;

@page "/AlbumView/{albumId}"

@if (loaded)
{
    <button class="GoBackButton" @onclick=GoBack>
        <img src="/images/back.svg" class="">
    </button>
    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)" style="position:relative;">
        <div class="imageContainer">
            @if (album != null)
            {
                <img src="@album.imageSrc" class="albumImage" />
            }
            else
            {
                <img src="" class="albumImage" />
            }
        </div>

        @if (album != null)
        {
            <div class="item-title">
                <div class="title-text">
                    <h2>@album.name</h2>
                    <div class="artistInfo" @onclick="() => SelectArtist(album.artists.FirstOrDefault().id)">
                        @album.GetArtistName()
                    </div>
                </div>
            </div>

            <div class="playback-controls">
                <div @onclick=FavouriteItem>
                    @if (album.isFavourite)
                    {
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <svg class="playback-controls-btn-img favbtn" viewBox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg">
                                <path d="M 480 -120 L 422 -172 C 354.667 -232.667 299 -285 255 -329 C 211 -373 176 -412.5 150 -447.5 C 124 -482.5 105.833 -514.667 95.5 -544 C 85.167 -573.333 80 -603.333 80 -634 C 80 -696.667 101 -749 143 -791 C 185 -833 237.333 -854 300 -854 C 334.667 -854 367.667 -846.667 399 -832 C 430.333 -817.333 457.333 -796.667 480 -770 C 502.667 -796.667 529.667 -817.333 561 -832 C 592.333 -846.667 625.333 -854 660 -854 C 722.667 -854 775 -833 817 -791 C 859 -749 880 -696.667 880 -634 C 880 -603.333 874.833 -573.333 864.5 -544 C 854.167 -514.667 836 -482.5 810 -447.5 C 784 -412.5 749 -373 705 -329 C 661 -285 605.333 -232.667 538 -172 L 480 -120 Z M 480 -501 Z" fill="currentColor" transform="matrix(1, 0, 0, 1, 7.105427357601002e-15, 1.1368683772161603e-13)" />
                            </svg>
                        </Animate>
                    }
                    else
                    {
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <img class="playback-controls-btn-img" src="/images/heart.svg">
                        </Animate>
                    }
                </div>
                <div class="playback-controls">
                    <div class="playback-controls-btn">
                        <img class="playback-controls-btn-img" src="/images/shuffle.svg">
                    </div>
                    <div class="playback-controls-btn playbtn" @onclick=PlayAlbum>
                        <img class="playback-controls-btn-img" src="/images/play.svg">
                    </div>
                </div>
            </div>

            foreach (var song in album.songs)
            {
                <hr />
                <div>
                    <p class="songTitle">@song.name</p>
                    <p class="songArtistTitle">
                        @foreach (var item in song.artists)
                        {
                            <p>@item.name</p>
                        }
                    </p>
                </div>
            }
            <hr />

            foreach (Artist artist in album.artists)
            {
                <div class="artistInfo" @onclick="() => SelectArtist(artist.id)">
                    <img src="@artist.imageAtResolution(40)" class="artistInfoImg">
                    @artist.name
                </div>
            }
        }
    </Animate>
}

@code {
    [Parameter] public string albumId { get; set; }

    private Album album { get; set; }
    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.mainLayout.pageTitle = "Album";
        MauiProgram.mainLayout.currentUri = $"/AlbumView/{albumId}";
        MauiProgram.mainLayout.showHeader = false;

        Guid parseId = Guid.Parse(albumId);
        if (albumId != null)
        {
            album = await MauiProgram.servers[0].FetchAlbumByIDAsync(parseId, fetchFullArtist:true);
        }
        if (album != null)
        {
            foreach (Song albumSongs in album.songs)
            {
                Artist[]? songArtists = await albumSongs.GetArtistAsync();
                if (songArtists != null)
                {
                    albumSongs.artists = songArtists;
                }
            }
        }

        loaded = true;
        await Task.Run(() => { Thread.Sleep(250); });
        MauiProgram.mainLayout.isLoading = false;
    }
    private void SelectArtist(Guid artistId)
    {
        MauiProgram.mainLayout.NavigateArtist(artistId);
    }
    private async void GoBack()
    {
        MauiProgram.mainLayout.isLoading = true;
        try
        {
            await JS.InvokeAsync<string>("goBack");
        }
        catch (Exception ex)
        {
            bool answer = await App.Current.MainPage.DisplayAlert("Error?", $"Failed to navigate back will return home. Error: {ex} ", "Return", "Continue");
            MauiProgram.mainLayout.NavigateHome();
        }
    }
    private async void FavouriteItem()
    {
        album.isFavourite = !album.isFavourite;
        StateHasChanged();
        await MauiProgram.servers[0].FavouriteItem(album.id, album.isFavourite);
    }
    private void PlayAlbum()
    {
        MauiProgram.mediaService.songQueue.Clear();
        foreach (Song song in album.songs)
        {
            song.image.source = album.imageSrc;
            MauiProgram.mediaService.songQueue.QueueSong(song);
        }
        MauiProgram.mediaService.Play();
    }
}

