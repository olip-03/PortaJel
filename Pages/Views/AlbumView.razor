@using System.Web
@using BlazorAnimate;
@using PortaJel_Blazor.Classes.Services;
@using PortaJel_Blazor.Shared.Icons;
@using CommunityToolkit.Maui.Core;
@using CommunityToolkit.Maui.Alerts;
@using PortaJel_Blazor.Classes
@using PortaJel_Blazor.Classes.Data
@inject IJSRuntime Js;

@page "/AlbumView/{AlbumId}/{ServerAddress}"

<ViewHeader backgroundImgUrl="@_album.ImgSource" backgroundImgUrlPlaceholder="@_album.ImgBlurhashBase64" BaseMusicItem=@_album ShowSelectionTools="@EngageSongCheckmode" SelectionCancelCallback="@GetCancelSelectionAction()" ContextMenuOpenCallback="GetOpenContextMenuAction()"/>

<img src="data:image/png;base64, @_album.ImgBlurhashBase64" class="background-blur" alt="background" style="top: @backgroundBlurHeight"/>

<div class="album" style="top: @headerHeight">
    <div class="album-data" >
        <div class="image-container">
            <img src="data:image/png;base64, @_album.ImgBlurhashBase64" class="placeholder" alt="Placeholder Image">
            <img src="@_album.ImgSource" id="@_album.Id" class="album-cover-img" onerror="this.src='/images/emptyAlbum.png'" alt="@_album.Name album cover">
        </div>

        <div class="item-title">
            <h2 class="PrimaryTextColor" style="margin: 0">@_album.Name</h2>
            <h5 class="SecondaryTextColor" @onclick="() => SelectArtist(_album.ArtistIds.FirstOrDefault())">
                @_album.ArtistNames
            </h5>
        </div>
    </div>
    
    @* Playback controls *@
    <div class="playback-controls">
        <div @onclick=FavouriteItem>
            @if (_album.IsFavourite)
            {
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                <HeartIcon Filled=true ExtraStyle="height: 2rem; width: 2rem;"></HeartIcon>
            </Animate>
            }
            else
            {
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                <HeartIcon Filled=false ExtraStyle="height: 2rem; width: 2rem;"></HeartIcon>
            </Animate>
            }
        </div>
        <div class="playback-controls-container">
            <div class="playback-controls-btn">
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" @onclick="(() => PlayAlbum(true))">
                    <ShuffleIcon Enabled=false ExtraStyle="height: 2rem; width: 2rem;"></ShuffleIcon>
                </Animate>
            </div>
            <div class="playback-controls-btn playbtn" @onclick="(() => PlayAlbum())">
                @if (isCurrentAlbum && MauiProgram.MediaService.GetIsPlaying())
                {
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <img class="playback-controls-btn-img" src="/images/pause.svg">
                </Animate>
                }
                else
                {
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <img class="playback-controls-btn-img" src="/images/play.svg">
                </Animate>
                }
            </div>
        </div>
    </div>

    @if (_album != null)
    {
        // Add Songs
        int index = 0;
        foreach (var song in _songs)
        {
            if (song.DiskNumber > 0 && !albumsDisks.Contains(song.DiskNumber))
            {
                albumsDisks.Add(song.DiskNumber);
                <h5 class="item-disknumber PrimaryTextColor">Disk @song.DiskNumber</h5>
            }
            <AlbumSongItem song="@song"
                           OnPlayCallback="@GetPlaySongAction(index)"
                           OnQueueCallback="@GetQueueSongAction(index)"
                           OnSelectCallback="@GetSongSelectAction(index)"
                           location="@index"
                           base64BlurHash="@base64BlurHash"
                           EngageCheckmode="EngageSongCheckmode"
                           ShowSongImageMode="false"
                           IsChecked="@SongCheckState[index]"/>
            index++;
        }
        
        // Add Artists
        @if (_album.Artists != null && _album.Artists.Any() && _album.Artists.Length == _artistHash.Length)
        {
            <br/>
            var check = 0;
            foreach (var artist in _album.Artists)
            {
                <div class="PrimaryTextColor artistInfo" @onclick="() => SelectArtist(artist.Id)">
                    <div class="artistInfoImg">
                        <img src="data:image/png;base64, @artist.BlurhashBase64" class="placeholder" alt="Placeholder Image">
                        <img src="@artist.ImgSource" id="@_album.Id" class="album-cover-img" onerror="this.src='/images/emptyAlbum.png'" alt="@_album.Name album cover">
                    </div>
                    <p class="artistInfoText">@artist.Name</p>
                </div>
                check++;
            }
        }
        
        // Add Similar
        <div style="margin-top: @($"{(MauiProgram.SystemHeaderHeight)}px")">
            @if (_similarAlbums.Any())
            {
                <HorizontalMusicItemList Title="More Like This" AlbumData="@_similarAlbums"/>
            }
            else if (_similarAlbums.Any()) // but only after the blurhash is done lol
            {
                <br/>
                <HorizontalMusicItemList Title="More Like This" AlbumData="null!"/>
            }
        </div>
    }

    @if (_errorMessage != null)
    {
        <ErrorView exception="@_errorMessage"/>
    }

</div>

@code {
    [Parameter] public string AlbumId { get; set; } = string.Empty;
    [Parameter] public string ServerAddress { get; set; } = string.Empty;

    // GUID records of items that may be in the queue
    private Guid? currentAlbumGuid { get; set; } = null;
    private Guid? currentSongGuid { get; set; } = null;
    public bool isCurrentAlbum = false;
    public int selectedSong = -1;
    private bool isShuffle = false;

    private Album _album = Album.Empty;
    private Song[] _songs = [];
    public bool[] SongCheckState = [];
    private bool _loaded = false;
    private const int SimilarAlbumLimit = 30;
    private Album[] _similarAlbums = new Album[0];

    private Exception _errorMessage = null;
    string base64BlurHash = String.Empty;
    string backgroundBlurHash = String.Empty;

    private bool EngageSongCheckmode = false;

    private string[] _artistHash  = [];
    private string backgroundBlurHeight = "-" + (MauiProgram.SystemHeaderHeight + 64) + "px!important";
    private string headerHeight = "-" + (MauiProgram.SystemHeaderHeight) + "px!important";

    private List<int> albumsDisks = new();

    protected override void OnInitialized()
    {
        MauiProgram.WebView.pageTitle = "Album";
        MauiProgram.WebView.currentUri = $"/AlbumView/{AlbumId}";
        MauiProgram.WebView.showHeader = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
        }
        
        if (_album != null)
        {
            await Js.InvokeAsync<string>("InitAllImages");
            await Js.InvokeAsync<string>("InitImageLoader", _album.Id);
        }
        
        if (_loaded)
        {
            MauiProgram.WebView.IsLoading = false;
            // await JS.InvokeAsync<string>("InitAllAlbumSongItem");
            await Task.Delay(150); // allow album items time to snap into place
            // MauiProgram.MainPage.ShowLoadingScreen(false);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        ServerAddress = HttpUtility.UrlDecode(ServerAddress);
        try
        {
            Guid parseId = Guid.Parse(AlbumId);
            _album = await MauiProgram.Database.Album.GetAsync(parseId) as Album;
            if (_album != null)
            {
                var ids = _album.Songs.Select(s => (Guid?)s.LocalId).ToArray();
                var songItems = await MauiProgram.Database.Song.GetAllAsync(includeIds: ids);
                _songs = songItems.Select(s => (Song)s).OrderBy(s => s.IndexNumber).ToArray();
            }

            _songs ??= [];
            SongCheckState = _songs.Select(s => false).ToArray();
            
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Trace.WriteLine(ex.ToString());
            await Application.Current?.MainPage.DisplayAlert("Error?", $"{ex.Message}", "Continue");
            _errorMessage = ex;
            await InvokeAsync(StateHasChanged);
            
        }
        _loaded = false;
        _similarAlbums = new Album[0];
        MauiProgram.MainPage.ShowLoadingScreen(false);
        await Js.InvokeAsync<string>("InitAllAlbumSongItem");
        StateHasChanged();
        LoadAlbum();
    }

    private async void LoadAlbum()
    {
        // Block for getting all the album info
        Guid parseId = Guid.Parse(AlbumId);
        try
        {
            if (_album != null)
            {
                Task<BaseMusicItem> getAlbum = MauiProgram.Server.Album.GetAsync(_album.Id, _album.ServerAddress);
                Task<BaseMusicItem[]> getSimilarAlbum = MauiProgram.Server.Album.GetSimilarAsync(_album.Id, 50, _album.ServerAddress);
                await Task.WhenAll(getAlbum, getSimilarAlbum);

                if (getAlbum.Result is Album album)
                {
                    _album = album;
                    _songs = album.GetSongs();
                    _similarAlbums = getSimilarAlbum.Result as Album[];
                    SongCheckState = _songs.Select(s => false).ToArray();
                }
                
                MauiProgram.UpdateDebugMessage("Setting Play Additional Update Action");

                if (MauiProgram.MediaService != null)
                {
                    MauiProgram.MediaService.SetPlayAddonAction(() => { InvokeAsync(StateHasChanged); });
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Trace.WriteLine(ex.ToString());
            await Application.Current?.MainPage.DisplayAlert("Error?", $"{ex.Message}", "Continue");
            _errorMessage = ex;
            await InvokeAsync(StateHasChanged);
        }

        // Set up the songs
        _loaded = true;
        StateHasChanged();
    }

    private void SelectArtist(Guid artistId)
    {
        MauiProgram.MainPage.ShowLoadingScreen(true);
        MauiProgram.WebView.NavigateArtist(artistId);
    }

    private async void FavouriteItem()
    {
        bool resetState = _album.IsFavourite;
        try
        {
            _album.SetIsFavourite(!_album.IsFavourite);
            await MauiProgram.Server.SetIsFavourite(_album.Id, _album.IsFavourite, _album.ServerAddress);
        }
        catch (Exception ex)
        {
            _album.SetIsFavourite(resetState);
            await Application.Current.MainPage.DisplayAlert("Error?", $"{ex}", "Continue");
        }

        StateHasChanged();
        // MauiProgram.Server.SetFavourite
    }

    private async void PlayAlbum(bool shuffle = false, int fromIndex = 0)
    {
        if (MauiProgram.MediaService == null)
        {
            MauiProgram.MediaService = new MediaService();
            await MauiProgram.MediaService.Initalize();
        }

        // Move all items in the current queue to the Next Up Queue, to ensure that
        // this item is prioritised, without losing the current queue
        if (MauiProgram.currentAlbumGuid == _album.Id)
        {
            isCurrentAlbum = true;
            MauiProgram.MediaService.TogglePlay();
        }
        else
        {
            isCurrentAlbum = false;

            // When a user clicks on an album to listen to the songs go into the next up list
            MauiProgram.MediaService.SetPlayingCollection(_album, 0);

            MauiProgram.MainPage.RefreshPlayer();
            MauiProgram.MediaService.Play();
        }

        // MauiProgram.MainPage.RefreshPlayer();
        StateHasChanged();
    }

    private Action GetPlaySongAction(int songIndex)
    {
        return async () =>
        {
            try
            {
                if (Application.Current == null) return;
                if (Application.Current.MainPage == null) return;

                if (MauiProgram.MediaService == null)
                {
                    MauiProgram.MediaService = new MediaService();
                    await MauiProgram.MediaService.Initalize();
                }

                MauiProgram.MediaService.SetPlayingCollection(_album, songIndex);

                MauiProgram.currentAlbumGuid = _album.Id;
                // MauiProgram.currentSongGuid = album song at index;

                MauiProgram.MainPage.RefreshPlayer();
                MauiProgram.MediaService.Play();

                // Call Server to update the albums 'last played' status in the local db
            }
            catch (Exception ex)
            {
                if (Application.Current != null &&
                    Application.Current.MainPage != null)
                {
                    await Application.Current.MainPage.DisplayAlert("Error?", $"{ex.Message} at {ex.StackTrace}", "Continue");
                    return;
                }
            }
        };
    }

    private Action GetQueueSongAction(int songIndex)
    {
        return async () =>
        {
            HapticFeedback.Default.Perform(HapticFeedbackType.Click);

            await Task.Delay(250);

            if (MauiProgram.MediaService == null)
            {
                MauiProgram.MediaService = new MediaService();
                await MauiProgram.MediaService.Initalize();
            }

            // Adds song to Queue as well as UI
            MauiProgram.MediaService.AddSong(_songs[songIndex]);
            // MauiProgram.MainPage.RefreshQueue();

#if !WINDOWS
            CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

            string text = $"{_songs[songIndex].Name} added to queue.";
            ToastDuration duration = ToastDuration.Short;
            double fontSize = 14;

            var toast = Toast.Make(text, duration, fontSize);
            await toast.Show(cancellationTokenSource.Token);
#endif
        };
    }

    private Action GetSongSelectAction(int songIndex)
    {
        return () =>
        {
            MauiProgram.ViewHeaderCloseSelectCallback = GetCancelSelectionAction();
            SongCheckState[songIndex] = !SongCheckState[songIndex];
            EngageSongCheckmode = true;
            StateHasChanged();
        };
    }

    private Action GetCancelSelectionAction()
    {
        return async () =>
        {
            MauiProgram.ViewHeaderCloseSelectCallback = null;
            SongCheckState = _songs.Select(s => false).ToArray();
            EngageSongCheckmode = false;
            StateHasChanged();
        };
    }

    private Action GetOpenContextMenuAction()
    {
        return async () =>
        {
            if (EngageSongCheckmode)
            {
                List<Song> selected = new();
                List<string> selectedBase64 = new();
                for (int i = 0; i < SongCheckState.Length; i++)
                {
                    if (SongCheckState[i])
                    {
                        selected.Add(_songs[i]);
                        string? blurhash = Blurhelper.BlurhashToBase64Async_OpenTK(_songs[i].ImgBlurhash, 20, 20);
                        if (blurhash != null) selectedBase64.Add(blurhash);
                    }
                }

                if (selected.Count == 1)
                {
                    OpenContextMenu(selected[0]);
                }
                else
                {
                    MauiProgram.MainPage.MainContextMenu.UpdateData(selected.ToArray(), selectedBase64.ToArray(), 100);
                    MauiProgram.MainPage.MainContextMenu.Show();
                    await Task.Run(() =>
                    {
                        // Literally just waiting for the fucking thing to close before we refresh
                        while (MauiProgram.MainPage.isContextMenuOpen == true)
                        {
                        }

                        InvokeAsync(() => StateHasChanged());
                    });
                }
            }
            else
            {
                OpenContextMenu(_album);
            }
        };
    }

    private async void OpenContextMenu(BaseMusicItem musicItem)
    {
        MauiProgram.MainPage.OpenContextMenu(musicItem, 250, base64BlurHash);
        await Task.Run(() =>
        {
            // Literally just waiting for the fucking thing to close before we refresh
            while (MauiProgram.MainPage.isContextMenuOpen == true)
            {
            }

            InvokeAsync(StateHasChanged);
        });
    }
}