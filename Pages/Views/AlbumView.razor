@using PortaJel_Blazor.Data;
@using BlazorAnimate;
@using PortaJel_Blazor.Classes.Services;
@using PortaJel_Blazor.Shared;
@using PortaJel_Blazor.Shared.Icons;
@using Blurhash;
@inject IJSRuntime JS;

@page "/AlbumView/{albumId}"

@if (loaded)
{
    <ViewHeader backgroundImgUrl="@album.image.source" backgroundImgUrlPlaceholder="@base64BlurHash" baseMusicItem=@album/>

    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)" style="position:relative;">
        <img src="data:image/png;base64, @base64BlurHash" class="background-blur" alt="backgound" />

        <div class="image-container">
            <img src="data:image/png;base64, @base64BlurHash" class="placeholder" alt="Placeholder Image">
            <img src="@album.image.source" id="@album.id" class="album-cover-img" onerror="this.src='/images/emptyAlbum.png'" alt="@album.name album cover">
        </div>
        @if (album != null)
        {
            <div class="item-title">
                <div class="title-text">
                    <h2 class="PrimaryTextColor" style="margin: 0px">@album.name</h2>
                    <div class="SecondaryTextColor artistInfo" @onclick="() => SelectArtist(album.artists.FirstOrDefault().id)">
                        @album.GetArtistName()
                    </div>
                </div>
            </div>

            <div class="playback-controls">
                <div @onclick=FavouriteItem>
                    @if (album.isFavourite)
                    {
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <HeartIcon Filled=true ExtraStyle="height: 2rem; width: 2rem;"></HeartIcon>
                        </Animate>
                    }
                    else
                    {
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <HeartIcon Filled=false ExtraStyle="height: 2rem; width: 2rem;"></HeartIcon>
                        </Animate>
                    }
                </div>
                <div class="playback-controls-container">
                    <div class="playback-controls-btn">
                        <img class="playback-controls-btn-img" src="/images/shuffle.svg">
                    </div>
                    <div class="playback-controls-btn playbtn" @onclick=PlayAlbum>
                        @if (isCurrentAlbum && MauiProgram.MediaService.GetIsPlaying())
                        {
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <img class="playback-controls-btn-img" src="/images/pause.svg">
                            </Animate>
                        }
                        else
                        {
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <img class="playback-controls-btn-img" src="/images/play.svg">
                            </Animate>
                        }
                    </div>

                </div>
            </div>

            for (int i = 0; i < album.songs.Length; i++)
            {
                album.songs[i].album = album; // TODO: this should already be set figure out why it isnt
                                              // either that or complete the re-do of the data structure 
                                              // again lollllll
                <AlbumSongItem song="@album.songs[i]" location="@i" base64BlurHash="@base64BlurHash" />
            }

            int forcount = 0;
            foreach (var artist in album.artists)
            {
                <div class="PrimaryTextColor artistInfo" @onclick="() => SelectArtist(artist.id)">
                    <img src="@artist.image.SourceAtResolution(40)" class="artistInfoImg" onerror="this.src='/images/emptyAlbum.png'">
                    @artist.name
                </div>
                forcount++;
            }
@*             <hr />
            <h2>Recommended Artists</h2>
            <div class="recommended-artists">
                
                <div class="artists-list">
                    @foreach (string reco in similarArtists)
                    {
                        <div class="artist">
                            <div class="artist-image"></div>
                            <p class="artist-name">@reco</p>
                        </div>
                    }
                </div>
            </div>  *@
        }
        @errormessage
    </Animate>
}

@code {
    [Parameter] public string albumId { get; set; } = String.Empty;

    // GUID records of items that may be in the queue
    private Guid? currentAlbumGuid { get; set; } = null;
    private Guid? currentSongGuid { get; set; } = null;
    public bool isCurrentAlbum = false;
    public int selectedSong = -1;

    // This bullshit we need to do cause the fucking artists arent loading properly in the razor page
    private Dictionary<Guid, KeyValuePair<string, string>> artistData = new();

    private Album album { get; set; } = Album.Empty;
    private bool loaded = false;
    private string[] similarArtists = new string[0];

    private string errormessage = null;
    string base64BlurHash = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.WebView.pageTitle = "Album";
        MauiProgram.WebView.currentUri = $"/AlbumView/{albumId}";
        MauiProgram.WebView.showHeader = false;
        MauiProgram.UpdateDebugMessage("Page Loaded.");

        try
        {
            if (album != null)
            {
                currentAlbumGuid = MauiProgram.currentAlbumGuid;
                currentSongGuid = MauiProgram.currentSongGuid;
                if (currentAlbumGuid != null && currentAlbumGuid != Guid.Empty && currentAlbumGuid == album.id)
                {
                    isCurrentAlbum = true;
                }
                else
                {
                    isCurrentAlbum = false;
                }

                Guid parseId = Guid.Parse(albumId);
                if (albumId != null)
                {
                    // album = await MauiProgram.servers[0].FetchAlbumByIDAsync(parseId, fetchFullArtist: true);
                    MauiProgram.UpdateDebugMessage("Starting request for Album data.");
                    album = await MauiProgram.api.GetAlbumAsync(parseId);
                }

                MauiProgram.UpdateDebugMessage("Decoding Blurhash.");
                base64BlurHash = await album.image.BlurhashToBase64Async(20, 20);
            }

            // TODO: Add this as an API in the plugin, not in the app itself 
            // GnodService reccomendations = new();
            // similarArtists = await reccomendations.QueryGnod(album.artists.FirstOrDefault().name);
        }
        catch (Exception ex)
        {
            errormessage = ex.ToString();
            // TODO : Implement 'Something went wrong, please try again'
        }

        loaded = true;    
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(album != null)
        {
            await JS.InvokeAsync<string>("InitAllImages");
            await JS.InvokeAsync<string>("InitImageLoader", album.id);
        }
        if (loaded)
        {
            MauiProgram.WebView.isLoading = false;
            await JS.InvokeAsync<string>("InitAllAlbumSongItem");
            await Task.Delay(150); // allow album items time to snap into place
            MauiProgram.MainPage.ShowLoadingScreen(false);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // TODO: Come up with a solution to this that doens't cause the app to shit itself 
        // MauiProgram.MainPage.ShowLoadingScreen(true);
        // await OnInitializedAsync();
        StateHasChanged();
    }

    private void SelectArtist(Guid artistId)
    {
        MauiProgram.MainPage.ShowLoadingScreen(true);
        MauiProgram.WebView.NavigateArtist(artistId);
    }

    private async void GoBack()
    {
        MauiProgram.MainPage.ShowLoadingScreen(true);
        MauiProgram.WebView.isLoading = true;
        try
        {
            await JS.InvokeAsync<string>("goBack");
        }
        catch (Exception ex)
        {
            bool answer = await App.Current.MainPage.DisplayAlert("Error?", $"Failed to navigate back will return home. Error: {ex} ", "Return", "Continue");
            MauiProgram.WebView.NavigateHome();
        }
    }

    private async void FavouriteItem()
    {
        bool resetState = album.isFavourite;
        try
        {
            album.isFavourite = !album.isFavourite;
            await MauiProgram.api.SetFavourite(album, album.isFavourite);
        }
        catch (Exception ex)
        {
            album.isFavourite = resetState;
            await App.Current.MainPage.DisplayAlert("Error?", $"{ex}", "Continue");
        }
        StateHasChanged();
        // MauiProgram.api.SetFavourite
    }

    private async void FavouriteSong(Guid songId)
    {
        Song foundItem = null;
        foreach (var song in album.songs)
        {
            if(song.id == songId)
            {
                song.isFavourite = !song.isFavourite;
                foundItem = song;
                break;
            }
        }

        if(foundItem != null)
        {
            StateHasChanged();
            await MauiProgram.api.SetFavourite(foundItem, foundItem.isFavourite);
        }
    }

    private void PlayAlbum()
    {
        // Move all items in the current queue to the Next Up Queue, to ensure that
        // this item is prioritised, without losing the current queue 
        if (MauiProgram.currentAlbumGuid == album.id)
        {
            isCurrentAlbum = true;
            MauiProgram.MediaService.TogglePlay();
        }
        else
        {
            isCurrentAlbum = true;

            // When a user clicks on an album to listen to the songs go into the next up list
            MauiProgram.MediaService.SetPlayingCollection(album);
            MauiProgram.MediaService.Play();
        }

        MauiProgram.MainPage.RefreshPlayer();
        StateHasChanged();
    }



    private async void OpenContextMenu(BaseMusicItem musicItem)
    {
        MauiProgram.MainPage.OpenContextMenu(musicItem, 250, base64BlurHash);
        await Task.Run(() =>
        {
            // Literally just waiting for the fucking thing to close before we refresh
            while (MauiProgram.MainPage.isContextMenuOpen == true)
            {

            }
        });
        StateHasChanged();
    }
}