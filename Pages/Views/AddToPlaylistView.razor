@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using PortaJel_Blazor;
@using Jellyfin.Sdk.Generated.Models;
@using System.Text.Json;
@using PortaJel_Blazor.Classes
@using PortaJel_Blazor.Classes.Data
@using PortaJel_Blazor.Classes.EventArgs
@inject IJSRuntime Js;

@page "/AddToPlaylistView/{SongItemIds}"

<FloatingActionButton Text="Add to playlist" OnClick="AddToPlaylist"></FloatingActionButton>

<div class="addPlaylistView">
    <h3 class="title">
        @songIds.Count() Items
    </h3>
    
    <Virtualize Context="musicItem" ItemsProvider="LoadListItems" OverscanCount="20" ItemSize="100">
        <ItemContent>
            <MusicLibraryItem MusicObject="musicItem" OnCheckChanged="SelectionChanged"/>
        </ItemContent>
        <Placeholder>
            <MusicLibraryItem MusicObject="Album.Empty"/>
        </Placeholder>
        <EmptyContent>
            <p>
                There are no items to display.
            </p>
        </EmptyContent>
    </Virtualize>
</div>

@code {
    [Parameter] public string SongItemIds { get; set; } = string.Empty;
    private Guid[] songIds = Array.Empty<Guid>();
    
    private BaseMusicItem[] _playlistData = [];
    private int _totalRecordCount = 0;
    private bool _hasPlaylists = false;

    private readonly List<Guid> _selectedPlaylistIds = [];

    protected override void OnInitialized()
    {
        MauiProgram.WebView.pageTitle = "Add To Playlist";
        MauiProgram.WebView.currentUri = $"/AddToPlaylistView/{SongItemIds}";
        MauiProgram.WebView.showHeader = true;
    }
    
    protected override async Task OnParametersSetAsync()
    {
        songIds = JsonSerializer.Deserialize<Guid[]>(SongItemIds);
        
        _playlistData = await MauiProgram.Database.Playlist.GetAllAsync();
        _totalRecordCount = _playlistData.Length;
        _hasPlaylists = _totalRecordCount > 0;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_hasPlaylists)
        {
            MauiProgram.MainPage.ShowLoadingScreen(false);
            await Js.InvokeAsync<string>("InitAllImages");
        }

        if (firstRender)
        {
            MauiProgram.MainPage.ShowLoadingScreen(false);
        }
    }

    private void SelectionChanged(CheckedItemEventArg eventArg)
    {
        if (eventArg.IsChecked)
        {
            _selectedPlaylistIds.Add(eventArg.ItemId);
        }
        else
        {
            _selectedPlaylistIds.Remove(eventArg.ItemId);
        }
    }

    private async void AddToPlaylist()
    {
        // Add to playlist function here
        
        // This function just sends us back to the last page
        MauiProgram.WebView.IsLoading = true;
        MauiProgram.MainPage.ShowLoadingScreen(true);
        try
        {
            MauiProgram.WebView.NavigateBack();
        }
        catch (Exception ex)
        {
            bool answer = await Application.Current.MainPage.DisplayAlert("Error?", $"Failed to navigate back will return home. Error: {ex} ", "Return", "Continue");
            MauiProgram.WebView.NavigateHome();
        }
    }

    private async ValueTask<ItemsProviderResult<BaseMusicItem>> LoadListItems(ItemsProviderRequest request)
    {
        var toReturn = _playlistData.Skip(request.StartIndex).Take(request.Count);
        var baseMusicItems = toReturn.ToArray();
        return new ItemsProviderResult<BaseMusicItem>(baseMusicItems, _totalRecordCount);
    }
}
