@using BlazorAnimate;
@using PortaJel_Blazor.Classes.Services;
@using PortaJel_Blazor.Shared;
@using PortaJel_Blazor.Shared.Icons;
@using Blurhash;
@using CommunityToolkit.Maui.Core;
@using CommunityToolkit.Maui.Alerts;
@using PortaJel_Blazor.Classes.Data
@inject IJSRuntime JS;

@page "/PlaylistView/{playlistId}"

@if (loaded)
{
    <ViewHeader backgroundImgUrl="@playlist.ImgSource" backgroundImgUrlPlaceholder="@backgroundBlurHash" baseMusicItem=@playlist />

    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)" style="position:relative;">
        <img src="data:image/png;base64, @backgroundBlurHash" class="background-blur" alt="backgound" style="top: @backgroundBlurHeight" />

        <div class="image-container" style="top: @headerHeight">
            <img src="data:image/png;base64, @base64BlurHash" class="placeholder" alt="Placeholder Image">
            <img src="@playlist.ImgSource" id="@playlist.Id" class="album-cover-img" onerror="this.src='/images/emptyAlbum.png'" alt="@playlist.Name album cover">
        </div>
        @if (playlist != null)
        {
            <div class="item-title">
                <div class="title-text">
                    <h2 class="PrimaryTextColor" style="margin: 0px">@playlist.Name</h2>
                    @*<h5 class="SecondaryTextColor" @onclick="() => SelectArtist(album.ArtistIds.FirstOrDefault())">
                        @playlist.ArtistNames
                    </h5>*@
                </div>
            </div>

            <div class="playback-controls">
                <div @onclick=FavouriteItem>
                    @if (playlist.IsFavourite)
                    {
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <HeartIcon Filled=true ExtraStyle="height: 2rem; width: 2rem;"></HeartIcon>
                        </Animate>
                    }
                    else
                    {
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <HeartIcon Filled=false ExtraStyle="height: 2rem; width: 2rem;"></HeartIcon>
                        </Animate>
                    }
                </div>
                <div class="playback-controls-container">
                    <div class="playback-controls-btn">
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" @onclick="(() => PlayAlbum(true))">
                            <ShuffleIcon Enabled=false ExtraStyle="height: 2rem; width: 2rem;"></ShuffleIcon>
                        </Animate>
                    </div>
                    <div class="playback-controls-btn playbtn" @onclick="(() => PlayAlbum(false))">
                        @if (isCurrentAlbum && MauiProgram.MediaService.GetIsPlaying())
                        {
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <img class="playback-controls-btn-img" src="/images/pause.svg">
                            </Animate>
                        }
                        else
                        {
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <img class="playback-controls-btn-img" src="/images/play.svg">
                            </Animate>
                        }
                    </div>
                </div>
            </div>

            // Add Songs
            for (int i = 0; i < songs.Length; i++)
            {
                <AlbumSongItem song="@songs[i]" OnPlayCallback="@GetPlaySongAction(i)" OnQueueCallback="@GetQueueSongAction(i)" location="@i" base64BlurHash="@base64BlurHash" ShowSongImageMode="true"/>
            }
        }
        @errormessage
    </Animate>
}

@code {
    [Parameter] public string playlistId { get; set; } = String.Empty;

    // GUID records of items that may be in the queue
    private Guid? currentAlbumGuid { get; set; } = null;
    private Guid? currentSongGuid { get; set; } = null;
    public bool isCurrentAlbum = false;
    public int selectedSong = -1;
    private bool isShuffle = false;

    // This bullshit we need to do cause the fucking artists arent loading properly in the razor page
    private Dictionary<Guid, KeyValuePair<string, string>> artistData = new();

    private Playlist playlist { get; set; } = Playlist.Empty;
    private Song[] songs { get; set; } = [];
    private bool loaded = false;
    private int similarAlbumLimit = 30;
    private Album[] similarAlbums = new Album[0];
    private string?[] similarAlbumsBase64BlurHash = new string?[0];

    private string errormessage = String.Empty;
    string? base64BlurHash = String.Empty;
    string? backgroundBlurHash = String.Empty;

    private string backgroundBlurHeight = "-" + (MauiProgram.SystemHeaderHeight + 64) + "px!important";
    private string headerHeight = "-" + (MauiProgram.SystemHeaderHeight) + "px!important";

    protected override void OnInitialized()
    {
        MauiProgram.WebView.pageTitle = "Playlist";
        MauiProgram.WebView.currentUri = $"/PlaylistView/{playlistId}";
        MauiProgram.WebView.showHeader = false;

        MauiProgram.UpdateDebugMessage("Page Loaded.");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (playlist != null)
        {
            await JS.InvokeAsync<string>("InitAllImages");
            await JS.InvokeAsync<string>("InitImageLoader", playlist.Id);
        }
        if (loaded)
        {
            MauiProgram.WebView.isLoading = false;
            // await JS.InvokeAsync<string>("InitAllAlbumSongItem");
            await Task.Delay(150); // allow album items time to snap into place
            MauiProgram.MainPage.ShowLoadingScreen(false);
        }
    }

    protected override void OnParametersSet()
    {
        loaded = false;
        similarAlbums = new Album[0];
        similarAlbumsBase64BlurHash = new string?[0];
        StateHasChanged();
        LoadAlbum();
    }

    private async void LoadAlbum()
    {
        // Block for getting all the album info
        try
        {
            if (playlist != null)
            {
                currentAlbumGuid = MauiProgram.currentAlbumGuid;
                currentSongGuid = MauiProgram.currentSongGuid;
                if (currentAlbumGuid != null && currentAlbumGuid != Guid.Empty && currentAlbumGuid == playlist.Id)
                {
                    isCurrentAlbum = true;
                }
                else
                {
                    isCurrentAlbum = false;
                }

                Guid parseId = Guid.Parse(playlistId);
                if (playlistId != null)
                {
                    // album = await MauiProgram.servers[0].FetchAlbumByIDAsync(parseId, fetchFullArtist: true);
                    playlist = await MauiProgram.Server.Playlist.GetAsync(parseId);
                    songs = playlist.Songs.Select(song => new Song(song)).ToArray();
                }
                else
                {
                    MauiProgram.WebView.NavigateHome();
                    return;
                }

                MauiProgram.UpdateDebugMessage("Setting Play Additional Update Action");

                if (MauiProgram.MediaService != null)
                {
                    MauiProgram.MediaService.SetPlayAddonAction(() =>
                    {
                        InvokeAsync(() => StateHasChanged());
                    });
                }

                MauiProgram.UpdateDebugMessage("Decoding Blurhash.");
                base64BlurHash = await MusicItemImage.BlurhashToBase64Async(playlist.ImgBlurhash, 20, 20);
                backgroundBlurHash = await MusicItemImage.BlurhashToBase64Async(playlist.ImgBlurhash, 20, 20, 0.3f);
                Task<string[]> runSimilarBlurhash = GenerateBlurHash(similarAlbums);
                similarAlbumsBase64BlurHash = await runSimilarBlurhash;
            }

            // TODO: Add this as an Server.Playlist in the plugin, not in the app itself
            // GnodService reccomendations = new();
            // similarArtists = await reccomendations.QueryGnod(album.artists.FirstOrDefault().name);
        }
        catch (Exception ex)
        {
            errormessage = ex.ToString();
            // TODO : Implement 'Something went wrong, please try again'
        }

        // Set up the songs
        loaded = true;
        StateHasChanged();
        await JS.InvokeAsync<string>("InitAllAlbumSongItem");
        await Task.Delay(250); // allow album items time to snap into place
        MauiProgram.WebView.isLoading = false;
        MauiProgram.MainPage.ShowLoadingScreen(false);
    }

    private void SelectArtist(Guid artistId)
    {
        MauiProgram.MainPage.ShowLoadingScreen(true);
        MauiProgram.WebView.NavigateArtist(artistId);
    }

    private async void GoBack()
    {
        MauiProgram.MainPage.ShowLoadingScreen(true);
        MauiProgram.WebView.isLoading = true;
        try
        {
            await JS.InvokeAsync<string>("goBack");
        }
        catch (Exception ex)
        {
            bool answer = await Application.Current.MainPage.DisplayAlert("Error?", $"Failed to navigate back will return home. Error: {ex} ", "Return", "Continue");
            MauiProgram.WebView.NavigateHome();
        }
    }

    private async void FavouriteItem()
    {
        bool resetState = playlist.IsFavourite;
        try
        {
            playlist.SetIsFavourite(!playlist.IsFavourite);
            await MauiProgram.Server.SetIsFavourite(playlist.Id, playlist.IsFavourite, playlist.ServerAddress);
        }
        catch (Exception ex)
        {
            playlist.SetIsFavourite(resetState);
            await Application.Current.MainPage.DisplayAlert("Error?", $"{ex}", "Continue");
        }
        StateHasChanged();
        // MauiProgram.Server.Playlist.SetFavourite
    }

    private async void FavouriteSong(Guid songId)
    {
        Song foundItem = null;
        foreach (var song in playlist.Songs)
        {
            if (song.Id == songId)
            {
                song.IsFavourite = !song.IsFavourite;
                foundItem = new Song(song);
                break;
            }
        }

        if (foundItem != null)
        {
            StateHasChanged();
            await MauiProgram.Server.SetIsFavourite(foundItem.Id, foundItem.IsFavourite, foundItem.ServerAddress);
        }
    }

    private async void PlayAlbum(bool shuffle = false, int fromIndex = 0)
    {
        if (MauiProgram.MediaService == null)
        {
            MauiProgram.MediaService = new MediaService();
            await MauiProgram.MediaService.Initalize();
        }
        // Move all items in the current queue to the Next Up Queue, to ensure that
        // this item is prioritised, without losing the current queue
        if (MauiProgram.currentAlbumGuid == playlist.Id)
        {
            isCurrentAlbum = true;
            MauiProgram.MediaService.TogglePlay();
        }
        else
        {
            isCurrentAlbum = false;

            // When a user clicks on an album to listen to the songs go into the next up list
            MauiProgram.MediaService.SetPlayingCollection(playlist, 0);

            MauiProgram.MainPage.RefreshPlayer();
            MauiProgram.MediaService.Play();
        }

        // MauiProgram.MainPage.RefreshPlayer();
        StateHasChanged();
    }

    private Action GetPlaySongAction(int songIndex)
    {
        return async () =>
        {
            try
            {
                if (Application.Current == null) return;
                if (Application.Current.MainPage == null) return;

                if (MauiProgram.MediaService == null)
                {
                    MauiProgram.MediaService = new MediaService();
                    await MauiProgram.MediaService.Initalize();
                }
                MauiProgram.MediaService.SetPlayingCollection(playlist, songIndex);

                MauiProgram.currentAlbumGuid = playlist.Id;
                // MauiProgram.currentSongGuid = album song at index;

                MauiProgram.MainPage.RefreshPlayer();
                MauiProgram.MediaService.Play();
            }
            catch (Exception ex)
            {
                if (Application.Current != null &&
                Application.Current.MainPage != null)
                {
                    await Application.Current.MainPage.DisplayAlert("Error?", $"{ex.Message} at {ex.StackTrace}", "Continue");
                    return;
                }
            }
        };
    }

    private Action GetQueueSongAction(int songIndex)
    {
        return async () =>
        {
            HapticFeedback.Default.Perform(HapticFeedbackType.Click);

            await Task.Delay(250);

            if (MauiProgram.MediaService == null)
            {
                MauiProgram.MediaService = new MediaService();
                await MauiProgram.MediaService.Initalize();
            }

            // Adds song to Queue as well as UI
            MauiProgram.MediaService.AddSong(songs[songIndex]);
            // MauiProgram.MainPage.RefreshQueue();

#if !WINDOWS
            CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

            string text = $"{songs[songIndex].Name} added to queue.";
            ToastDuration duration = ToastDuration.Short;
            double fontSize = 14;

            var toast = Toast.Make(text, duration, fontSize);
            await toast.Show(cancellationTokenSource.Token);
#endif
        };
    }

    private async void OpenContextMenu(BaseMusicItem musicItem)
    {
        MauiProgram.MainPage.OpenContextMenu(musicItem, 250, base64BlurHash);
        await Task.Run(() =>
        {
            // Literally just waiting for the fucking thing to close before we refresh
            while (MauiProgram.MainPage.isContextMenuOpen == true)
            {

            }
        });
        StateHasChanged();
    }

    private async Task<string[]> GenerateBlurHash(BaseMusicItem[] data)
    {
        String[] toReturn = new string[data.Count()];
        for (int i = 0; i < data.Count(); i++)
        {
            try
            {
                string? base64 = await MusicItemImage.BlurhashToBase64Async(data[i], 20, 20);
                toReturn[i] = base64 == null ? string.Empty : base64;
            }
            catch (Exception)
            {
                toReturn[i] = string.Empty;
            }
        }
        return toReturn;
    }
}