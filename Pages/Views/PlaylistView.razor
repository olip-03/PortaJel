@using PortaJel_Blazor.Pages;
@using PortaJel_Blazor.Classes;
@using PortaJel_Blazor.Data;
@using PortaJel_Blazor;
@using BlazorAnimate;
@inject IJSRuntime JS;

@page "/PlaylistView/{playlistId}"

@if (loaded)
{
    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
        <button class="GoBackButton" @onclick=GoBack>
            <img src="/images/back.svg" class="">
        </button>
        <button class="ContextButton" @onclick=ShowPlaylistContextMenu>
            <img src="/images/more-horiz.svg" class="">
        </button>

        <div class="imageContainer">
            @if (playlist != null)
            {
                <img src="@playlist.image.source" class="albumImage" />
            }
            else
            {
                <img src="" class="albumImage" />
            }
        </div>

        @if (playlist != null)
        {
            <div class="item-title">
                <div class="title-text">
                    <h2>@playlist.name</h2>
                </div>
            </div>

            <div class="playback-controls">
                <div @onclick=FavouriteItem>
                    @if (playlist.isFavourite)
                    {
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <svg class="playback-controls-btn-img favbtn" viewBox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg">
                                <path d="M 480 -120 L 422 -172 C 354.667 -232.667 299 -285 255 -329 C 211 -373 176 -412.5 150 -447.5 C 124 -482.5 105.833 -514.667 95.5 -544 C 85.167 -573.333 80 -603.333 80 -634 C 80 -696.667 101 -749 143 -791 C 185 -833 237.333 -854 300 -854 C 334.667 -854 367.667 -846.667 399 -832 C 430.333 -817.333 457.333 -796.667 480 -770 C 502.667 -796.667 529.667 -817.333 561 -832 C 592.333 -846.667 625.333 -854 660 -854 C 722.667 -854 775 -833 817 -791 C 859 -749 880 -696.667 880 -634 C 880 -603.333 874.833 -573.333 864.5 -544 C 854.167 -514.667 836 -482.5 810 -447.5 C 784 -412.5 749 -373 705 -329 C 661 -285 605.333 -232.667 538 -172 L 480 -120 Z M 480 -501 Z" fill="currentColor" transform="matrix(1, 0, 0, 1, 7.105427357601002e-15, 1.1368683772161603e-13)" />
                            </svg>
                        </Animate>
                    }
                    else
                    {
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <img class="playback-controls-btn-img" src="/images/heart.svg">
                        </Animate>
                    }
                </div>
                <div class="playback-controls">
                    <div class="playback-controls-btn">
                        <img class="playback-controls-btn-img" src="/images/shuffle.svg">
                    </div>
                    <div class="playback-controls-btn playbtn" @onclick=PlayAlbum>
                        <img class="playback-controls-btn-img" src="/images/play.svg">
                    </div>
                </div>
            </div>

            foreach (var song in playlist.songs)
            {
                <hr />
                <div class="songItem">
                    <img src="@song.image.source" class="songItemImg" />
                    <div class="songItemTxt">
                        <p class="songTitle">@song.name</p>
                        <p class="songArtistTitle">
                            @song.artistCongregate
                        </p>
                    </div>
                </div>
            }
            <hr />
        }
    </Animate>
}

@code {
    [Parameter] public string playlistId { get; set; } = String.Empty;

    private Playlist? playlist { get; set; }
    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.webView.pageTitle = "Playlist";
        MauiProgram.webView.currentUri = $"/PlaylistView/{playlistId}";
        MauiProgram.webView.showHeader = false;

        Guid parseId = Guid.Parse(playlistId);
        if (MauiProgram.playlistDictionary.ContainsKey(parseId))
        {
            playlist = MauiProgram.playlistDictionary[parseId];
        }
        else
        {
            if (playlistId != null)
            {
                playlist = await MauiProgram.servers[0].FetchPlaylistByIDAsync(parseId);
            }
        }

        if (playlist != null)
        {
            foreach (Song albumSongs in playlist.songs)
            {
                Artist[]? songArtists = await albumSongs.GetArtistAsync();
                if (songArtists != null)
                {
                    albumSongs.artists = songArtists;
                }
            }
        }

        loaded = true;
        MauiProgram.webView.isLoading = false;
        MauiProgram.mainPage.ShowLoadingScreen(false);
        StateHasChanged();
    }
    private void SelectArtist(Guid artistId)
    {
        MauiProgram.webView.NavigateArtist(artistId);
    }
    private async void GoBack()
    {
        MauiProgram.webView.isLoading = true;
        try
        {
            await JS.InvokeAsync<string>("goBack");
        }
        catch (Exception ex)
        {
            bool answer = await App.Current.MainPage.DisplayAlert("Error?", $"Failed to navigate back will return home. Error: {ex} ", "Return", "Continue");
            MauiProgram.webView.NavigateHome();
        }
    }
    private async void ShowPlaylistContextMenu()
    {
        await MauiProgram.mainPage.OpenContextMenu(playlist, 250);
    }
    private async void FavouriteItem()
    {
        playlist.isFavourite = !playlist.isFavourite;
        StateHasChanged();
        await MauiProgram.servers[0].FavouriteItem(playlist.id, playlist.isFavourite);
    }
    private void PlayAlbum()
    {

    }
}

