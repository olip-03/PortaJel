@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.UI.Search;
@using BlazorAnimate;
@inject IJSRuntime JS

@page "/search"
<div>
    <input type="text" id="SearchPage_SearchInput" name="search" class="searchBox" @oninput="@((e) => TextChange((string)e.Value) )" />
    <hr />
    @if (waitingForResult)
    {
        <div class="album-container">
            <PortaJel_Blazor.Shared.Resources.Spinner/>
        </div>
    }
    else
    {
        <div class="searchResponse">
            @if (searchResults != null && !waitingForResult)
            {
                foreach (var item in searchResults)
                {
                    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(itemFadeInDelay)">
                        <SearchResultItem album="@item"/>
                    </Animate>

                    itemFadeInDelay += 0.1f;
                }
                if (searchResults.Count() == 0)
                {
                    <p>Nothing found...</p>
                }
            }
            @*TODO: Add spinny wheel when waiting for results
                Also need to add a 'nothing found' message and other status codes
            *@

        </div>
    }

</div>

@code {
    // https://www.meziantou.net/infinite-scrolling-in-blazor.htm
    // This is a good resource please implement it 

    private string searchQuery = String.Empty;
    private string queudQuery = String.Empty;
    private bool queryQueued = false; 
    Album[] searchResults = null;

    private bool waitingForResult = false;
    private float itemFadeInDelay = 0;

    private async void TextChange(string searchFor)
    {
        if (waitingForResult)
        {
            queudQuery = searchFor;
            queryQueued = true;
            return;
        }

        itemFadeInDelay = 0;
        searchQuery = searchFor;

        if (String.IsNullOrWhiteSpace(searchFor))
        {
            searchResults = null;
            return;
        }

        waitingForResult = true;

        // If there is a queued result 
        bool recheck = true;
        while(recheck)
        {
            recheck = false; // automatically do not reiterate 

            searchResults = await MauiProgram.servers[0].SearchAsync(searchFor, sorted: true, searchLimit: 50);

            if (searchResults == null)
            {
                waitingForResult = false;
                StateHasChanged();
                return;
            }

            // Filter exact matches (case-insensitive and exclude special characters)
            var exactMatches = searchResults
                .Where(item => RemoveSpecialCharacters(item.name).Equals(RemoveSpecialCharacters(searchFor), StringComparison.OrdinalIgnoreCase))
                .ToList();

            var sortedItems = searchResults
                .Except(exactMatches)
                .OrderBy(item => item.name.CompareTo(searchFor))
                .ToList();

            // Combine exact matches and sorted items
            var modifiedResults = exactMatches.Concat(sortedItems).ToArray();

            searchResults = modifiedResults;

            if (queryQueued)
            {
                recheck = true;
                searchFor = queudQuery;
                searchQuery = queudQuery;
                queryQueued = false;
            }
        }

        waitingForResult = false;
        StateHasChanged();
    }

    // Helper method to remove special characters from a string
    private string RemoveSpecialCharacters(string str)
    {
        return new string(str.Where(c => Char.IsLetterOrDigit(c) || Char.IsWhiteSpace(c)).ToArray());
    }

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.mainLayout.pageTitle = "Search";
        MauiProgram.mainLayout.currentUri = "/search";
        MauiProgram.mainLayout.isLoading = false;
        MauiProgram.mainLayout.showHeader = true;
    }
    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        await JS.InvokeAsync<string>("SearchPage_FocusOnInput");
    }
}
