@using System.Diagnostics
@using PortaJel_Blazor.Shared;
@using BlazorAnimate;
@using PortaJel_Blazor.Classes.Connectors.Database
@using PortaJel_Blazor.Classes.Data
@inject IJSRuntime JS

@page "/search"
@page "/search/{searchQuery}"

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
    <div class="search">
        <input type="text" id="SearchPage_SearchInput" name="search" class="input PageSecondaryBackgroundColor PrimaryTextColor" @oninput="@((e) => TextChange((string)e.Value))"/>

        @* <MatChipSet Style="padding: 8px 1rem;" Choice="true" @bind-SelectedChip="selectedChip"> *@
        @*     <MatChip Style="border-radius: 8px; margin: 0 4px;" Label="Playlist" LeadingIcon="favorite"> </MatChip> *@
        @*     <MatChip Style="border-radius: 8px; margin: 0 4px;" Label="Album" LeadingIcon="favorite"></MatChip> *@
        @*     <MatChip Style="border-radius: 8px; margin: 0 4px;" Label="Artist" LeadingIcon="favorite"></MatChip> *@
        @*     <MatChip Style="border-radius: 8px; margin: 0 4px;" Label="Song" LeadingIcon="favorite"></MatChip> *@
        @* </MatChipSet> *@
        <div class="searchResponse">
            @if (IsSearching)
            {
                <h5 class="SecondaryTextColor">Searching...</h5>
            }
            else
            {
                switch (_totals)
                {
                    case > 0:
                    {
                        foreach (Playlist playlist in _playlistResult)
                        {
                            <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <SearchResultItem musicObject="@playlist" cacheAsRecentItem=true placeholderBase64="@playlist.ImgBlurhashBase64"/>
                            </Animate>
                        }

                        foreach (Artist artist in _artistResult)
                        {
                            <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <SearchResultItem musicObject="@artist" cacheAsRecentItem=true placeholderBase64="@artist.ImgBlurhashBase64"/>
                            </Animate>
                        }

                        foreach (Album album in _albumResult)
                        {
                            <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <SearchResultItem musicObject="@album" cacheAsRecentItem=true placeholderBase64="@album.ImgBlurhashBase64"/>
                            </Animate>
                        }

                        foreach (Song song in _songResult)
                        {
                            <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <SearchResultItem musicObject="@song" cacheAsRecentItem=true placeholderBase64="@song.ImgBlurhashBase64"/>
                            </Animate>
                        }

                        break;
                    }
                    case <= 0 when !String.IsNullOrWhiteSpace(SearchQuery):
                    {
                        <h5 class="SecondaryTextColor">Nothing found</h5>
                        break;
                    }
                    default:
                    {
                        if (String.IsNullOrWhiteSpace(SearchQuery))
                        {
                            <h5 class="SecondaryTextColor">Recent searches</h5>
                        }

                        break;
                    }
                }
            }
        </div>
    </div>
</Animate>

@code {
    [Parameter] public string SearchQuery { get; set; } = String.Empty;

    private readonly DatabaseSearcher _dbSearch = new();
    private bool IsSearching => _dbSearch.IsSearching;

    private int _totals = 0;
    private Playlist[] _playlistResult = [];
    private Artist[] _artistResult = [];
    private Album[] _albumResult = [];
    private Song[] _songResult = [];

    protected override Task OnInitializedAsync()
    {
        MauiProgram.WebView.pageTitle = "Search";
        MauiProgram.WebView.currentUri = "/search";
        MauiProgram.WebView.showHeader = true;

        MauiProgram.WebView.cancellationSource = new();
        MauiProgram.WebView.cancellationToken = MauiProgram.WebView.cancellationSource.Token;

        MauiProgram.WebView.IsLoading = false;

        _dbSearch.SearchUpdated += UpdateList;
        return Task.CompletedTask;
    }

    private void TextChange(string searchFor)
    {
        searchFor ??= string.Empty;
        _dbSearch.QueueSearch(searchFor);
    }

    private void UpdateList(BaseMusicItem[] result)
    {
        _totals = result.Length;
        _playlistResult = result.OfType<Playlist>().ToArray();
        _artistResult = result.OfType<Artist>().ToArray();
        _albumResult = result.OfType<Album>().ToArray();
        _songResult = result.OfType<Song>().ToArray();
        StateHasChanged();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        await JS.InvokeAsync<string>("SearchPage_FocusOnInput");
        await JS.InvokeAsync<string>("InitAllImages");
        MauiProgram.MainPage.ShowLoadingScreen(false);
    }

}