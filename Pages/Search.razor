@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.Shared;
@using BlazorAnimate;
@inject IJSRuntime JS

@page "/search"
@page "/search/{searchQuery}"
<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
    <div>
        <input type="text" id="SearchPage_SearchInput" name="search" class="searchBox" @oninput="@((e) => TextChange((string)e.Value) )" />
        <hr />
        @if (waitingForResult)
        {
            <div class="album-container">
                <!-- TODO: Restore Spinner Element -->
                @*<PortaJel_Blazor.Shared.Resources.Spinner />*@            
</div>
        }
        else
        {
            <div class="searchResponse">
                @if (searchResults.Count() > 0)
                {
                    for (int i = 0; i < searchResults.Length; i++)
                    {
                        BaseMusicItem musicItem = null;
                        string placeholderImg = string.Empty;
                        try
                        {
                            musicItem = searchResults[i];
                            placeholderImg = placeholderImages[i];
                        }
                        catch (Exception ex)
                        {
                            <p>@ex.ToString()</p>
                        }

                        <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(itemFadeInDelay)">
                            <SearchResultItem musicObject="@musicItem" cacheAsRecentItem=true placeholderBase64="@placeholderImg" />
                        </Animate>
                        
                        if(i <= 6){
                            itemFadeInDelay += 0.05f;
                        }
                        else
                        {
                            itemFadeInDelay = 0;
                        }
                    }
                }
                else if (searchResults.Count() <= 0 && !String.IsNullOrWhiteSpace(searchQuery))
                {
                    <p>Nothing found</p>
                }
                else if (String.IsNullOrWhiteSpace(searchQuery))
                {
                    itemFadeInDelay = 0;
                    <p>Recent searches</p>
                    for (int i = 0; i < MauiProgram.recentSearchResults.Count(); i++)
                    {
                        <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(itemFadeInDelay)">
                            <SearchResultItem musicObject="@MauiProgram.recentSearchResults.ToList()[i].Value" cacheAsRecentItem=true />
                        </Animate>

                        if (i <= 6)
                        {
                            itemFadeInDelay += 0.05f;
                        }
                        else
                        {
                            itemFadeInDelay = 0;
                        }
                    }
                }
            </div>
        }
    </div>
</Animate>

@code {
    // https://www.meziantou.net/infinite-scrolling-in-blazor.htm
    // This is a good resource please implement it 

    [Parameter] public string searchQuery { get; set; } = String.Empty;
    private string queudQuery = String.Empty;
    private bool queryQueued = false; 
    BaseMusicItem[] searchResults = new BaseMusicItem[0];
    string[] placeholderImages = new string[0];

    private bool waitingForResult = false;
    private float itemFadeInDelay = 0;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.WebView.pageTitle = "Search";
        MauiProgram.WebView.currentUri = "/search";
        MauiProgram.WebView.showHeader = true;

        MauiProgram.WebView.cancellationSource = new();
        MauiProgram.WebView.cancellationToken = MauiProgram.WebView.cancellationSource.Token;

        MauiProgram.WebView.isLoading = false;
        MauiProgram.MainPage.ShowLoadingScreen(false);
        isLoading = false;
        // MauiProgram.mainPage.UpdateKeyboardLocation();
    }
    private async void TextChange(string searchFor)
    {
        if (searchFor == null)
        {
            searchFor = String.Empty;
        }

        if (waitingForResult)
        {
            queudQuery = searchFor;
            queryQueued = true;
            return;
        }

        itemFadeInDelay = 0;
        searchQuery = searchFor;

        if (String.IsNullOrWhiteSpace(searchFor))
        {
            searchResults = new BaseMusicItem[0];
            return;
        }

        waitingForResult = true;

        // If there is a queued result 
        await Task.Run(async() =>
        {
            bool recheck = true;
            while (recheck)
            {
                recheck = false; // automatically do not reiterate

                searchResults = await MauiProgram.servers[0].SearchAsync(searchFor, sorted: true, searchLimit: 50);

                if (searchResults == null)
                {
                    waitingForResult = false;
                    await InvokeAsync(StateHasChanged);
                    return;
                }

                // Filter exact matches (case-insensitive and exclude special characters)
                // var exactMatches = searchResults
                //     .Where(item => RemoveSpecialCharacters(item.Name).Equals(RemoveSpecialCharacters(searchFor), StringComparison.OrdinalIgnoreCase))
                //     .ToList();

                // var sortedItems = searchResults
                //     .Except(exactMatches)
                //     .OrderBy(item => item.name.CompareTo(searchFor))
                //     .ToList();

                // Combine exact matches and sorted items
                // var modifiedResults = exactMatches.Concat(sortedItems).ToArray();

                // searchResults = modifiedResults;
                placeholderImages = new string[searchResults.Length];
                for (int i = 0; i < searchResults.Length; i++)
                {
                    try
                    {
                        string? base64 = await MusicItemImage.BlurhashToBase64Async(searchResults[i], 20, 20);
                        placeholderImages[i] = base64 == null ? string.Empty : base64;
                    }
                    catch (Exception)
                    {
                        placeholderImages[i] = string.Empty;
                    }
                }

                if (queryQueued)
                {
                    recheck = true;
                    searchFor = queudQuery;
                    searchQuery = queudQuery;
                    queryQueued = false;
                }
            }
        });

        waitingForResult = false;
        await InvokeAsync(StateHasChanged);
    }
    // Helper method to remove special characters from a string
    private string RemoveSpecialCharacters(string str)
    {
        return new string(str.Where(c => Char.IsLetterOrDigit(c) || Char.IsWhiteSpace(c)).ToArray());
    }
    protected override async void OnAfterRender(bool firstRender)
    {
        if (!isLoading)
        {
            await JS.InvokeAsync<string>("SearchPage_FocusOnInput");
        }
        await JS.InvokeAsync<string>("InitAllImages");
    }
}
