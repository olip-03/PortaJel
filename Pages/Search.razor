@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.UI.Search;
@using BlazorAnimate;
@inject IJSRuntime JS

@page "/search"
@page "/search/{searchQuery}"
<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
    <div>
        <input type="text" id="SearchPage_SearchInput" name="search" class="searchBox" @oninput="@((e) => TextChange((string)e.Value) )" />
        <hr />
        @if (waitingForResult)
        {
            <div class="album-container">
                <PortaJel_Blazor.Shared.Resources.Spinner />
            </div>
        }
        else
        {
            <div class="searchResponse">
                @if (searchResults.Count() > 0)
                {
                    foreach (var item in searchResults)
                    {
                        <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(itemFadeInDelay)">
                            <SearchResultItem musicObject="@item" />
                        </Animate>

                        itemFadeInDelay += 0.1f;
                    }
                }
                else if (searchQuery != null)
                {
                    <p>Nothing found...</p>
                }
                else
                {
                    @* TODO: Show recent results (things the user has searched for and clicked on) *@
                    <p>Recent searches: </p>
                }
            </div>
        }

    </div>
</Animate>

@code {
    // https://www.meziantou.net/infinite-scrolling-in-blazor.htm
    // This is a good resource please implement it 

    [Parameter] public string searchQuery { get; set; } = String.Empty;
    private string queudQuery = String.Empty;
    private bool queryQueued = false; 
    BaseMusicItem[] searchResults = new BaseMusicItem[0];

    private bool waitingForResult = false;
    private float itemFadeInDelay = 0;

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.mainLayout.pageTitle = "Search";
        MauiProgram.mainLayout.currentUri = "/search";
        MauiProgram.mainLayout.showHeader = true;

        MauiProgram.mainLayout.cancellationSource = new();
        MauiProgram.mainLayout.cancellationToken = MauiProgram.mainLayout.cancellationSource.Token;

        await Task.Run(() => { Thread.Sleep(250); });
        MauiProgram.mainLayout.isLoading = false;
    }
    private async void TextChange(string searchFor)
    {
        if (searchFor == null)
        {
            searchFor = String.Empty;
        }

        if (waitingForResult)
        {
            queudQuery = searchFor;
            queryQueued = true;
            return;
        }

        itemFadeInDelay = 0;
        searchQuery = searchFor;

        if (String.IsNullOrWhiteSpace(searchFor))
        {
            searchResults = new BaseMusicItem[0];
            return;
        }

        waitingForResult = true;

        // If there is a queued result 
        bool recheck = true;
        while(recheck)
        {
            recheck = false; // automatically do not reiterate 

            searchResults = await MauiProgram.servers[0].SearchAsync(searchFor, sorted: true, searchLimit: 50);

            if (searchResults == null)
            {
                waitingForResult = false;
                await InvokeAsync(StateHasChanged);
                return;
            }

            // Filter exact matches (case-insensitive and exclude special characters)
            var exactMatches = searchResults
                .Where(item => RemoveSpecialCharacters(item.name).Equals(RemoveSpecialCharacters(searchFor), StringComparison.OrdinalIgnoreCase))
                .ToList();

            var sortedItems = searchResults
                .Except(exactMatches)
                .OrderBy(item => item.name.CompareTo(searchFor))
                .ToList();

            // Combine exact matches and sorted items
            var modifiedResults = exactMatches.Concat(sortedItems).ToArray();

            searchResults = modifiedResults;

            if (queryQueued)
            {
                recheck = true;
                searchFor = queudQuery;
                searchQuery = queudQuery;
                queryQueued = false;
            }
        }

        waitingForResult = false;
        await InvokeAsync(StateHasChanged);
    }
    // Helper method to remove special characters from a string
    private string RemoveSpecialCharacters(string str)
    {
        return new string(str.Where(c => Char.IsLetterOrDigit(c) || Char.IsWhiteSpace(c)).ToArray());
    }
    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        await JS.InvokeAsync<string>("SearchPage_FocusOnInput");
    }
}
