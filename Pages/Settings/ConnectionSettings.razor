@implements IDisposable
@inject NavigationManager NavManager
@page "/settingsconnections"

<div class="connectionSettings">
    <!-- Hide M3U Playlists -->
    <div class="header">
        <p class="PrimaryTextColor">Offline Mode</p>
        <!-- Rounded switch -->
        <label class="switch">
            <input type="checkbox">
            <span class="slider round"></span>
        </label>
    </div>

    <div class="header">
        <div class="title PrimaryTextColor">Connections</div>
        <button class="add-button" @onclick=AddConnection>Add</button>
    </div>

    @foreach (var serverConnector in MauiProgram.Server.GetServers())
    {
        <div class="connection-container ComponentColor" @onclick="@(() => MauiProgram.WebView.NavigateServerConnectorSettings(serverConnector.GetAddress()))">
            <div class="connection-details">
                <div class="details-usr">
                    <div class="user-profile">
                        <img class="user-profile-img ComponentSecondaryColor" src="@serverConnector.GetProfileImageUrl()" onerror="this.src='/images/avatar.png'"  alt="User profile photo"/>
                    </div>
                    <div>
                        <div class="user-profile-name PrimaryTextColor">@serverConnector.GetUsername()</div>
                        <div class="user-profile-connection SecondaryTextColor">@serverConnector.GetAddress()</div>
                    </div>
                </div>
                <button class="remove-button" @onclick="() => DeleteConnection(serverConnector.GetAddress())">Remove</button>
            </div>
            <div class="button-row">
                @foreach (var server in serverConnector.GetDataConnectors())
                {
                    int percent = server.Value.SyncStatusInfo.StatusPercentage;
                    <div class="ComponentSecondaryColor">
                        @switch (server.Value.SyncStatusInfo.TaskStatus)
                        {
                            case TaskStatus.Running:
                                <div class="statusIcon default">
                                    <p>@percent</p>
                                </div>
                                break;
                            case TaskStatus.RanToCompletion:
                                <div class="statusIcon complete">
                                    <p>@percent</p>
                                </div>
                                break;
                            case TaskStatus.Canceled:
                                <div class="statusIcon waitingToRun">
                                    <p>@percent</p>
                                </div>
                                break;
                            case TaskStatus.Faulted:
                                <div class="statusIcon faulted">
                                    <p>@percent</p>
                                </div>
                                break;
                            default:
                                <div class="statusIcon default">
                                    <p>@percent</p>
                                </div>
                                break;
                        }
                        <h6 class="PrimaryTextColor">@server.Key</h6>
                    </div>
                }
            </div>
        </div>
    }
    @if (!MauiProgram.isConnected)
    {
        <button class="reconnect-button">Reconnect</button>
    }
</div>

@code {
    private bool ForceOffline = false;
    private IDispatcherTimer _updateTimers = null;
    
    protected override void OnInitialized()
    {
        MauiProgram.WebView.pageTitle = "Connections";
        MauiProgram.WebView.currentUri = "/settingsconnections";
        MauiProgram.WebView.showHeader = true;

        MauiProgram.WebView.isLoading = false;
        MauiProgram.MainPage.ShowLoadingScreen(false);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && Application.Current != null)
        {
            _updateTimers = Application.Current.Dispatcher.CreateTimer();
            _updateTimers.Interval = TimeSpan.FromSeconds(1);
            _updateTimers.Tick += (s,e) => UpdateConnectionSyncStatus();
            _updateTimers.Start();
        }
    }

    private void UpdateConnectionSyncStatus()
    {
        InvokeAsync(StateHasChanged);
    }

    private void DeleteConnection(string baseAddress)
    {

    }

    private void AddConnection()
    {
        
    }

    public void Dispose()
    {
        _updateTimers.Stop();
        _updateTimers = null;
    }

}
