@page "/ServerConnectorSettings/{ServerAddress}"
@using System.Web
@using PortaJel_Blazor.Classes
@using PortaJel_Blazor.Classes.Connectors
@using PortaJel_Blazor.Classes.Data
@using PortaJel_Blazor.Classes.Interfaces
<h3>ServerConnectorSettings</h3>

@foreach (var property in _connectorProperties)
{
    <p>@property.Value</p>
}

@if (_serverConnector.GetDataConnectors().Count > 0)
{
    <button @onclick="DeleteDbs">
        @if (_waitingDelete)
        {
            <p>Deleting Data...</p>
        }
        else
        {
            <p>Resync all data?</p>
        }
    </button>
}

@code {
    [Parameter] public string ServerAddress { get; set; }
    private ConnectorProperty[] _connectorProperties = [];
    private IMediaServerConnector _serverConnector = null;

    private bool _waitingDelete = false;

    protected override void OnInitialized()
    {
    }

    protected override Task OnParametersSetAsync()
    {
        ServerAddress = HttpUtility.UrlDecode(ServerAddress);

        if (MauiProgram.Server is { } serverConnector)
        {
            _serverConnector = serverConnector.GetServers().FirstOrDefault(c => ServerAddress == c.GetAddress());
            if (_serverConnector != null) _connectorProperties = _serverConnector.Properties.Values.ToArray();
        }

        return Task.CompletedTask;
    }

    private async void DeleteDbs()
    {
        if (_waitingDelete) return;
        
        var dataConnectors = MauiProgram.Database.GetDataConnectors();
        var tasks = new List<Task>();
        
        foreach (var connector in dataConnectors)
        {
            tasks.Add(Task.Run(async () =>
            {
                var serverAddress = _serverConnector.GetAddress();
                switch (connector.Key)
                {
                    case "Album":
                        var albums = await connector.Value.GetAllAsync();
                        var albumsLocalIds = albums
                            .OfType<Album>()
                            .Where(album => string.Equals(album.ServerAddress, serverAddress, StringComparison.OrdinalIgnoreCase))
                            .Select(album => album.LocalId)
                            .ToArray();
                        await connector.Value.DeleteAsync(albumsLocalIds);
                        break;

                    case "Artist":
                        var artist = await connector.Value.GetAllAsync();
                        var artistLocalIds = artist
                            .OfType<Artist>()
                            .Where(album => string.Equals(album.ServerAddress, serverAddress, StringComparison.OrdinalIgnoreCase))
                            .Select(album => album.LocalId)
                            .ToArray();
                        await connector.Value.DeleteAsync(artistLocalIds);
                        break;

                    case "Song":
                        var songs = await connector.Value.GetAllAsync();
                        var songsLocalIds = songs
                            .OfType<Song>()
                            .Where(album => string.Equals(album.ServerAddress, serverAddress, StringComparison.OrdinalIgnoreCase))
                            .Select(album => album.LocalId)
                            .ToArray();
                        await connector.Value.DeleteAsync(songsLocalIds);
                        break;

                    case "Playlist":
                        var playlists = await connector.Value.GetAllAsync();
                        var playlistsLocalIds = playlists
                            .OfType<Playlist>()
                            .Where(album => string.Equals(album.ServerAddress, serverAddress, StringComparison.OrdinalIgnoreCase))
                            .Select(album => album.LocalId)
                            .ToArray();
                        await connector.Value.DeleteAsync(playlistsLocalIds);
                        break;

                    case "Genre":
                        var genres = await connector.Value.GetAllAsync();
                        var genresLocalIds = genres
                            .OfType<Genre>()
                            .Where(album => string.Equals(album.ServerAddress, serverAddress, StringComparison.OrdinalIgnoreCase))
                            .Select(album => album.LocalId)
                            .ToArray();
                        await connector.Value.DeleteAsync(genresLocalIds);
                        break;
                }
            }));
        }
        
        _waitingDelete = true;
        await InvokeAsync(StateHasChanged);
        
        await Task.WhenAll(tasks);
        
        await MauiProgram.Server.BeginSyncAsync();
        
        _waitingDelete = false;
        await InvokeAsync(StateHasChanged);
    }

}