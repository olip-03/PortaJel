@page "/"
@using Jellyfin.Sdk;
@using Jellyfin.Sdk.Generated.Models;
@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.Shared;
@using BlazorAnimate;
@inject IJSRuntime JS;

<input type="text" class="searchBar PageSecondaryColor PrimaryTextColor" value="" placeholder="Search" @oninput="@((e) => SearchTextChange((string)e.Value) )">

@if (isSearching)
{ // Search results (if queried)
    @if (waitingForResult)
    {
        <div style="margin-left: auto; margin-right: auto;">
            <Spinner></Spinner>
        </div>
    }
    else if (searchResults.Count() > 0)
    {
        <div class="@(searchDisplayGrid == true ? "music-list" : "search-list")">
            @for (int i = 0; i < searchResults.Length; i++)
            {
                BaseMusicItem musicItem = searchResults[i];
                string placeholderImg = placeholderImages[i];

                <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(itemFadeInDelay)">
                    <SearchResultItem musicObject="@musicItem" cacheAsRecentItem=true placeholderBase64="@placeholderImg" isGrid="false"/>
                </Animate>

                if (i <= 6)
                {
                    itemFadeInDelay += 0.05f;
                }
                else
                {
                    itemFadeInDelay = 0;
                }
            }
        </div>
    }
    else if (searchResults.Count() <= 0 && !String.IsNullOrWhiteSpace(searchQuery))
    {
        <p>Nothing found</p>
    }
}
else
{ // Home page information here
    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
        <div style="margin-bottom: 2rem; margin-top:1rem;">
            <ul class="music-list">
                @for (int i = 0; i < 6; i++)
                {
                    itemFadeInDelay += 0.1f;
                    if (i < recentPlayData.Count())
                    {
                        if (recentPlayData[i] != null)
                        {
                            BaseMusicItem item = recentPlayData[i];
                            string base64 = recentPlayPlaceholderImages[i];
                            <AlbumListView musicItem="@item" placeholderBase64="@base64" />
                        }
                    }
                }
            </ul>
        </div>

        <HorizontalMusicItemList Title="Favourites" itemCount="50" albumData="@favouritesPlayData" albumBlurHashData="@favouritesPlaceholderImages" />
        <br />

        <!-- Horizontal container for Recently added Albums -->
        <HorizontalMusicItemList Title="Recently Added" itemCount="50" albumData="@recentAddedData" albumBlurHashData="@recentAddedPlaceholderImages" />
        <br />

        <!-- Horizontal container for Most Played Songs -->
        <HorizontalMusicItemList Title="Most Played" itemCount="50" albumData="@mostPlayData" albumBlurHashData="@mostPlayPlaceholderImages" />
        <br />

        <!-- Horizontal container for Most Random Albums -->
        <HorizontalMusicItemList Title="Random" itemCount="50" albumData="@randomData" albumBlurHashData="@randomPlaceholderImages" />
    </Animate>

}

@errorMessage

@code {
    private int itemReturnCount = 50;

    private BaseMusicItem[] recentPlayData = MauiProgram.homeCache.recentPlayData;
    private string[] recentPlayPlaceholderImages = MauiProgram.homeCache.recentPlayPlaceholderImages;

    private BaseMusicItem[] favouritesPlayData = MauiProgram.homeCache.favouritesPlayData;
    private string[] favouritesPlaceholderImages = MauiProgram.homeCache.favouritesPlaceholderImages;

    private BaseMusicItem[] recentAddedData = MauiProgram.homeCache.recentAddedData;
    private string[] recentAddedPlaceholderImages = MauiProgram.homeCache.recentAddedPlaceholderImages;

    private BaseMusicItem[] mostPlayData = MauiProgram.homeCache.mostPlayData;
    private string[] mostPlayPlaceholderImages = MauiProgram.homeCache.mostPlayPlaceholderImages;

    private BaseMusicItem[] randomData = new Album[0];
    private string[] randomPlaceholderImages = new string[0];

    public string errorMessage = string.Empty;
    private int resultCount = 50;
    private bool isLoading = true;
    private float itemFadeInDelay = 0;

    private bool searchDisplayGrid = false;
    private bool isSearching = false;
    public string searchQuery { get; set; } = String.Empty;
    private string queudQuery = String.Empty;
    private bool queryQueued = false;
    BaseMusicItem[] searchResults = new BaseMusicItem[0];
    string[] placeholderImages = new string[0];

    private bool waitingForResult = false;
    private bool isSearchLoading = true;

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.WebView.pageTitle = "PortaJel";
        MauiProgram.WebView.currentUri = "/home";
        MauiProgram.WebView.showHeader = true;
        MauiProgram.UpdateDebugMessage("Home page loaded.");

        if (!MauiProgram.homeCache.IsEmpty())
        {
            isLoading = false;
            MauiProgram.MainPage.SetNavbarVisibility(true);
            MauiProgram.UpdateDebugMessage("Loading complete!");
            StateHasChanged();
        }

        await Task.Run(async () => 
        { 
            while (MauiProgram.dataLoadFinished == false)
            {
                // twiddle our thumbs
            }
            await LoadApi().ConfigureAwait(false);
        });
        MauiProgram.MainPage.SetNavbarVisibility(true);
    }

    protected override void OnParametersSet()
    {
        searchQuery = string.Empty;
        OnInitialized();
        StateHasChanged();
    }

    private async Task LoadApi()
    {
        // Run data collection
        try
        {
            MauiProgram.UpdateDebugMessage("Starting request for Home page data.");

            Task<Song[]> runGetRecent = MauiProgram.api.GetAllSongsAsync(limit: resultCount, startIndex: 0, sortTypes: ItemSortBy.DatePlayed, sortOrder: [SortOrder.Descending]);
            Task<Album[]> runGetFavourites = MauiProgram.api.GetAllAlbumsAsync(limit: resultCount, startIndex: 0, isFavourite: true);
            Task<Album[]> runGetRecentlyAdded = MauiProgram.api.GetAllAlbumsAsync(limit: resultCount, startIndex: 0, sortTypes: ItemSortBy.DateCreated, sortOrder: SortOrder.Descending);
            Task<Song[]> runGetMostPlayed = MauiProgram.api.GetAllSongsAsync(limit: resultCount, startIndex: 0, sortTypes: ItemSortBy.PlayCount, sortOrder: [SortOrder.Descending]);
            Task<Song[]> runGetRandom = MauiProgram.api.GetAllSongsAsync(limit: resultCount, startIndex: 0, sortTypes: ItemSortBy.Random, sortOrder: [SortOrder.Descending]);
            await Task.WhenAll(
                runGetRecent,
                runGetFavourites,
                runGetRecentlyAdded,
                runGetMostPlayed,
                runGetRandom
            );

            // Get albums from songs in last task.
            MauiProgram.UpdateDebugMessage("Starting request for Recent Listen data.");
            List<Guid> songAlbumIDs = new();
            List<Task<Album>> recentPlayAlbumTasks = new();
            List<Album> getRecentAlbums = new();
            foreach (Song song in runGetRecent.Result)
            {
                if (song.Album != null)
                {
                    if (!songAlbumIDs.Contains(song.AlbumId))
                    {
                        songAlbumIDs.Add(song.AlbumId);
                        recentPlayAlbumTasks.Add(MauiProgram.api.GetAlbumAsync(song.AlbumId));
                    }
                }
            }
            await Task.WhenAll(recentPlayAlbumTasks);
            for (int i = 0; i < recentPlayAlbumTasks.Count; i++)
            {
                Album data = recentPlayAlbumTasks[i].Result;
                if(data != Album.Empty)
                {
                    getRecentAlbums.Add(data);
                }
            }

            // Run blurhashing
            MauiProgram.UpdateDebugMessage("Decoding Blurhash!");
            Task<string[]> runRecentPlayBlurhash = GenerateBlurHash(getRecentAlbums.ToArray());
            Task<string[]> runFavouritesBlurhash = GenerateBlurHash(runGetFavourites.Result);
            Task<string[]> runRecentAddedBlurhash = GenerateBlurHash(runGetRecentlyAdded.Result);
            Task<string[]> runMostPlayBlurhash = GenerateBlurHash(runGetMostPlayed.Result);
            Task<string[]> runRandomBlurhash = GenerateBlurHash(runGetRandom.Result);
            await Task.WhenAll(
                runRecentPlayBlurhash,
                runFavouritesBlurhash,
                runRecentAddedBlurhash,
                runMostPlayBlurhash,
                runRandomBlurhash
            );

            if (Application.Current != null)
            {
                Application.Current.Dispatcher.Dispatch(() =>
                    {
                        recentPlayData = getRecentAlbums.ToArray();
                        favouritesPlayData = runGetFavourites.Result;
                        recentAddedData = runGetRecentlyAdded.Result;
                        mostPlayData = runGetMostPlayed.Result;
                        randomData = runGetRandom.Result;

                        MauiProgram.homeCache.recentPlayData = recentPlayData;
                        MauiProgram.homeCache.favouritesPlayData = favouritesPlayData;
                        MauiProgram.homeCache.recentAddedData = recentAddedData;
                        MauiProgram.homeCache.mostPlayData = mostPlayData;

                        recentPlayPlaceholderImages = runRecentPlayBlurhash.Result;
                        favouritesPlaceholderImages = runFavouritesBlurhash.Result;
                        recentAddedPlaceholderImages = runRecentAddedBlurhash.Result;
                        mostPlayPlaceholderImages = runMostPlayBlurhash.Result;
                        randomPlaceholderImages = runRandomBlurhash.Result;

                        MauiProgram.UpdateDebugMessage("Setting Blurhash information!");
                        MauiProgram.homeCache.recentPlayPlaceholderImages = recentPlayPlaceholderImages;
                        MauiProgram.homeCache.favouritesPlaceholderImages = favouritesPlaceholderImages;
                        MauiProgram.homeCache.recentAddedPlaceholderImages = recentAddedPlaceholderImages;
                        MauiProgram.homeCache.mostPlayPlaceholderImages = mostPlayPlaceholderImages;
                    });
            }
            MauiProgram.UpdateDebugMessage("Loading complete!");
            isLoading = false;
        }
        catch (Exception ex)
        {
            if (Application.Current != null && Application.Current.MainPage != null)
            {
                Application.Current.Dispatcher.Dispatch(() =>
                {
                    System.Diagnostics.Trace.WriteLine(ex.ToString());
                    Application.Current.MainPage.DisplayAlert("Error?", $"{ex.Message}", "Continue");
                    errorMessage = ex.ToString();
                });
            }
        }
    }



    private async void SearchTextChange(string? searchFor)
    {
        if (searchFor == null || String.IsNullOrWhiteSpace(searchFor))
        {
            searchResults = new BaseMusicItem[0];
            isSearching = false;
            StateHasChanged();
            return;
        }

        if (waitingForResult)
        {
            queudQuery = searchFor;
            queryQueued = true;
            return;
        }

        itemFadeInDelay = 0;
        searchQuery = searchFor;

        isSearching = true;
        waitingForResult = true;
        StateHasChanged();

        // If there is a queued result
        await Task.Run(async () =>
        {
            bool recheck = true;
            while (recheck)
            {
                recheck = false; // automatically do not reiterate

                searchResults = await MauiProgram.servers[0].SearchAsync(searchFor, sorted: true, searchLimit: 50);

                if (searchResults == null)
                {
                    waitingForResult = false;
                    await InvokeAsync(StateHasChanged);
                    return;
                }

                placeholderImages = new string[searchResults.Length];
                for (int i = 0; i < searchResults.Length; i++)
                {
                    try
                    {
                        string? base64 = await MusicItemImage.BlurhashToBase64Async(searchResults[i], 20, 20);
                        placeholderImages[i] = base64 == null ? string.Empty : base64;
                    }
                    catch (Exception)
                    {
                        placeholderImages[i] = string.Empty;
                    }
                }

                if (queryQueued)
                {
                    recheck = true;
                    searchFor = queudQuery;
                    searchQuery = queudQuery;
                    queryQueued = false;
                }
            }
        });

        waitingForResult = false;
        await InvokeAsync(StateHasChanged);
    }

    // Helper method to remove special characters from a string
    private string RemoveSpecialCharacters(string str)
    {
        return new string(str.Where(c => Char.IsLetterOrDigit(c) || Char.IsWhiteSpace(c)).ToArray());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        MauiProgram.UpdateDebugMessage("Initaling Blurhash!");
        await JS.InvokeAsync<string>("InitAllImages");
        if (isLoading == false)
        {
            MauiProgram.MainPage.ShowLoadingScreen(false);
            MauiProgram.WebView.isLoading = false;
        }
    }

    private async Task<string[]> GenerateBlurHash(BaseMusicItem[] data)
    {
        String[] toReturn = new string[data.Count()];
        for (int i = 0; i < data.Count(); i++)
        {
            try
            {
                string? base64 = await MusicItemImage.BlurhashToBase64Async(data[i], 20, 20);
                toReturn[i] = base64 == null ? string.Empty : base64;
            }
            catch (Exception)
            {
                toReturn[i] = string.Empty;
            }
        }
        return toReturn;
    }
}
