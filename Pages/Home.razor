@page "/home"
@using Jellyfin.Sdk;
@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.UI.Index;
@using BlazorAnimate;

@if (!isLoading)
{
    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
        <div style="margin-bottom: 2rem">
            <h3>Recently Played</h3>

            <ul class="music-list">
                @for (int i = 0; i < 6; i++)
                {
                    itemFadeInDelay += 0.1f;

                    if (recentPlayData != null)
                    {
                        if (i < recentPlayData.Count())
                        {
                            if (recentPlayData[i] != null)
                            {
                                BaseMusicItem item = recentPlayData[i];
                                <AlbumListView musicItem="@item" />
                            }
                        }
                    }
                }
            </ul>
        </div>

        @* Need to make changes to the way these are done*@
        <AlbumContainer Title="Favourites" itemCount="20" albumData="@favouritesPlayData" />
        <br />

        <AlbumContainer Title="Recently Added" itemCount="20" albumData="@recentAddedData" />
        <br />


        <AlbumContainer Title="Most Played" itemCount="20" albumData="@mostPlayData" />
        <br />

        <AlbumContainer Title="Random" itemCount="20" albumData="@randomData" />
    </Animate>
}


@code {
    private BaseMusicItem[] favouritesPlayData { get; set; } = new Album[0];
    private BaseMusicItem[] recentPlayData { get; set; } = new Album[0];
    private BaseMusicItem[] mostPlayData { get; set; } = new Album[0];
    private BaseMusicItem[] recentAddedData { get; set; } = new Album[0];
    private BaseMusicItem[] randomData { get; set; } = new Album[0];

    private bool isLoading = true;
    private float itemFadeInDelay = 0;

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.mainLayout.pageTitle = "PortaJel";
        MauiProgram.mainLayout.currentUri = "/home";
        MauiProgram.mainLayout.showHeader = true;

        bool doneRandom = false;

        // Load all the stored fucking data
        if (MauiProgram.favouritesPlayData.Count() > 0 &&
            MauiProgram.recentPlayData.Count() > 0 &&
            MauiProgram.mostPlayData.Count() > 0 &&
            MauiProgram.recentAddedData.Count() > 0)
        {
            favouritesPlayData = MauiProgram.favouritesPlayData;
            recentPlayData = MauiProgram.recentPlayData;
            mostPlayData = MauiProgram.mostPlayData;
            recentAddedData = MauiProgram.recentAddedData;

            isLoading = false;
            await InvokeAsync(() => StateHasChanged());
            await Task.Run(() => { Thread.Sleep(250); });
            MauiProgram.mainLayout.isLoading = false;

            randomData = await MauiProgram.servers[0].FetchRandomAsync(_startIndex: 0, _limit: 20);
            doneRandom = true;
        }

        MauiProgram.mainLayout.cancellationSource = new();
        MauiProgram.mainLayout.cancellationToken = MauiProgram.mainLayout.cancellationSource.Token;

        // Update all the stored fucking data
        try
        {
            favouritesPlayData = await MauiProgram.servers[0].FetchFavouritesAddedAsync(_startIndex: 0, _limit: 20);
            MauiProgram.favouritesPlayData = favouritesPlayData;

            mostPlayData = await MauiProgram.servers[0].FetchMostPlayedAsync(_startIndex: 0, _limit: 20);
            MauiProgram.mostPlayData = mostPlayData;

            recentAddedData = await MauiProgram.servers[0].FetchRecentlyAddedAsync(_startIndex: 0, _limit: 20);
            MauiProgram.recentAddedData = recentAddedData;

            if (!doneRandom)
            {
                randomData = await MauiProgram.servers[0].FetchRandomAsync(_startIndex: 0, _limit: 20);
            }

            // Only collects SONGS, need to collect album information as well
            recentPlayData = await MauiProgram.servers[0].FetchRecentlyPlayedAsync(_startIndex: 0, _limit: 75);
            MauiProgram.recentPlayData = recentPlayData;
        }
        catch (Exception ex)
        {
            Console.Write(ex);
        }

        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
        await Task.Run(() => { Thread.Sleep(250); });
        MauiProgram.mainLayout.isLoading = false;
    }
}
