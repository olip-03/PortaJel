@page "/home"
@using Jellyfin.Sdk;
@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.UI.Index;
@using BlazorAnimate;
@inject IJSRuntime JS;

@if (!isLoading)
{
    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
        <div style="margin-bottom: 2rem">
            <h3>Recently Played</h3>

            <ul class="music-list">
                @for (int i = 0; i < 6; i++)
                {
                    itemFadeInDelay += 0.1f;
                    if (i < recentPlayData.Count())
                    {
                        if (recentPlayData[i] != null)
                        {
                            BaseMusicItem item = recentPlayData[i];
                            string base64 = recentPlayPlaceholderImages[i];
                            <AlbumListView musicItem="@item" placeholderBase64="@base64" />
                        }
                    }
                }
            </ul>
        </div>

        <!-- Horizontal container for Favourite Albums -->
        <HorizontalMusicItemList Title="Favourites" itemCount="50" albumData="@favouritesPlayData" albumBlurHashData="@favouritesPlaceholderImages" />
        <br />

        <!-- Horizontal container for Recently added Albums -->
        <HorizontalMusicItemList Title="Recently Added" itemCount="50" albumData="@recentAddedData" albumBlurHashData="@recentAddedPlaceholderImages" />
        <br />

        <!-- Horizontal container for Most Played Songs -->
        <HorizontalMusicItemList Title="Most Played" itemCount="50" albumData="@mostPlayData" albumBlurHashData="@mostPlayPlaceholderImages" />
        <br />

        <!-- Horizontal container for Most Random Albums -->
        <HorizontalMusicItemList Title="Random" itemCount="50" albumData="@randomData" albumBlurHashData="@randomPlaceholderImages" />
    </Animate>
}

@code {
    private BaseMusicItem[] recentPlayData = MauiProgram.homeCache.recentPlayData;
    private string[] recentPlayPlaceholderImages = MauiProgram.homeCache.recentPlayPlaceholderImages;

    private BaseMusicItem[] favouritesPlayData = MauiProgram.homeCache.favouritesPlayData;
    private string[] favouritesPlaceholderImages = MauiProgram.homeCache.favouritesPlaceholderImages;

    private BaseMusicItem[] recentAddedData = MauiProgram.homeCache.recentAddedData;
    private string[] recentAddedPlaceholderImages = MauiProgram.homeCache.recentAddedPlaceholderImages;

    private BaseMusicItem[] mostPlayData = MauiProgram.homeCache.mostPlayData;
    private string[] mostPlayPlaceholderImages = MauiProgram.homeCache.mostPlayPlaceholderImages;

    private BaseMusicItem[] randomData = new Album[0];
    private string[] randomPlaceholderImages = new string[0];

    private bool isLoading = true;
    private float itemFadeInDelay = 0;

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.mainLayout.pageTitle = "PortaJel";
        MauiProgram.mainLayout.currentUri = "/home";
        MauiProgram.mainLayout.showHeader = true;
        MauiProgram.mainLayout.isLoading = true;

        // Update all the stored data
        bool randomLoaded = false;
        try
        {
            if (MauiProgram.homeCache.IsEmpty())
            {
                // Run data collection
                Task<Album[]> runGetRecent = MauiProgram.servers[0].FetchRecentlyPlayedAsync(_startIndex: 0, _limit: 75);
                Task<Album[]> runGetFavourites = MauiProgram.api.GetAllAlbumsAsync(limit: 50, startIndex: 0, isFavourite: true);
                Task<Album[]> runGetRecentlyAdded = MauiProgram.api.GetAllAlbumsAsync(limit: 50, startIndex: 0, sortTypes: new String[] { "DateCreated" });
                Task<Song[]> runGetMostPlayed = MauiProgram.api.GetAllSongsAsync(limit: 50, startIndex: 0, sortTypes: new String[] { "PlayCount" }, sortOrder: SortOrder.Descending);
                Task<Song[]> runGetRandom = MauiProgram.api.GetAllSongsAsync(limit: 50, startIndex: 0, sortTypes: new String[] { "Random" }, sortOrder: SortOrder.Descending);
                await Task.WhenAll(
                    runGetRecent,
                    runGetFavourites,
                    runGetRecentlyAdded,
                    runGetMostPlayed,
                    runGetRandom
                );
                recentPlayData = runGetRecent.Result;
                favouritesPlayData = runGetFavourites.Result;
                recentAddedData = runGetRecentlyAdded.Result;
                mostPlayData = runGetMostPlayed.Result;
                randomData = runGetRandom.Result;

                // Run blurhashing
                Task<string[]> runRecentPlayBlurhash = GenerateBlurHash(recentPlayData);
                Task<string[]> runFavouritesBlurhash = GenerateBlurHash(favouritesPlayData);
                Task<string[]> runRecentAddedBlurhash = GenerateBlurHash(recentAddedData);
                Task<string[]> runMostPlayBlurhash = GenerateBlurHash(mostPlayData);
                Task<string[]> runRandomBlurhash = GenerateBlurHash(randomData);
                await Task.WhenAll(
                    runRecentPlayBlurhash,
                    runFavouritesBlurhash,
                    runRecentAddedBlurhash,
                    runMostPlayBlurhash,
                    runRandomBlurhash
                );
                recentPlayPlaceholderImages = runRecentPlayBlurhash.Result;
                favouritesPlaceholderImages = runFavouritesBlurhash.Result;
                recentAddedPlaceholderImages = runRecentAddedBlurhash.Result;
                mostPlayPlaceholderImages = runMostPlayBlurhash.Result;
                randomPlaceholderImages = runRandomBlurhash.Result;

                MauiProgram.homeCache.recentPlayPlaceholderImages = recentPlayPlaceholderImages;
                MauiProgram.homeCache.favouritesPlaceholderImages = favouritesPlaceholderImages;
                MauiProgram.homeCache.recentAddedPlaceholderImages = recentAddedPlaceholderImages;
                MauiProgram.homeCache.mostPlayPlaceholderImages = mostPlayPlaceholderImages;

                randomLoaded = true;
            }
        }
        catch (Exception ex)
        {
            Console.Write(ex);
        }

        isLoading = false;
        await InvokeAsync(() => StateHasChanged());

        if (!randomLoaded)
        {
            randomData = await MauiProgram.api.GetAllSongsAsync(limit: 50, startIndex: 0, sortTypes: new String[] { "Random" }, sortOrder: SortOrder.Descending);
            randomPlaceholderImages = await GenerateBlurHash(randomData);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeAsync<string>("InitAllImages");
        if (isLoading == false)
        {
            MauiProgram.mainLayout.isLoading = false;
        }
    }

    private async Task<string[]> GenerateBlurHash(BaseMusicItem[] data)
    {
        String[] toReturn = new string[data.Count()];
        for (int i = 0; i < data.Count(); i++)
        {
            try
            {
                toReturn[i] = await data[i].image.BlurhashToBase64Async(20, 20);
            }
            catch (Exception)
            {
                toReturn[i] = string.Empty;
            }
        }
        return toReturn;
    }
}
