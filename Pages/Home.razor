@page "/"
@using System.Diagnostics
@using System.Runtime.CompilerServices
@using Jellyfin.Sdk;
@using Jellyfin.Sdk.Generated.Models;
@using PortaJel_Blazor.Shared;
@using BlazorAnimate;
@using PortaJel_Blazor.Classes
@using PortaJel_Blazor.Classes.Data
@using PortaJel_Blazor.Pages.Views
@inject IJSRuntime Js;

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
    <div style="margin-bottom: 1rem; margin-top:1rem;">
        <ul class="music-list">
            @for (int i = 0; i < 8; i++)
            {
                itemFadeInDelay += 0.1f;
                if (i >= _recentPlayData.Count())
                {
                    continue;
                }

                if (_recentPlayData[i] == null)
                {
                    continue;
                }

                var item = _recentPlayData[i];
                string base64 = item.ImgBlurhashBase64;
                <AlbumListView MusicItem="@item" placeholderBase64="@base64"/>
            }
        </ul>
    </div>
    <HorizontalMusicItemList Title="Favourites" AlbumData="@_favouritesPlayData"/>
    <br/>

    <HorizontalMusicItemList Title="Recently Added" AlbumData="@_recentAddedData"/>
    <br/>

    <HorizontalMusicItemList Title="Most Played" AlbumData="@_mostPlayData"/>
    <br/>

    <HorizontalMusicItemList Title="Random" AlbumData="@_randomData" ShowLoading="true"/>
</Animate>

@if (_errorMessage != null)
{
    <ErrorView exception="@_errorMessage"/>
}

@code {
    private BaseMusicItem[] _recentPlayData = [];
    private BaseMusicItem[] _favouritesPlayData = [];
    private BaseMusicItem[] _recentAddedData = [];
    private BaseMusicItem[] _mostPlayData = [];
    private BaseMusicItem[] _randomData = [];

    private readonly Exception _errorMessage = null;
    private const int ResultCount = 50;
    private float itemFadeInDelay = 0;
    
    protected override Task OnInitializedAsync()
    {
        MauiProgram.WebView.pageTitle = "PortaJel";
        MauiProgram.WebView.currentUri = "/home";
        MauiProgram.WebView.showHeader = true;
        MauiProgram.MainPage.SetNavbarVisibility(true);
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            MauiProgram.MainPage.ShowLoadingScreen(false);
            MauiProgram.WebView.IsLoading = false;
            await Task.Delay(500);
            
            var favTask = MauiProgram.Database.Album.GetAllAsync(limit: ResultCount, startIndex: 0, getFavourite: true).ContinueWith(async task =>
            {
                _favouritesPlayData = task.Result;
                await InvokeAsync(StateHasChanged);
                await Js.InvokeAsync<string>("InitAllImages");
            }, TaskScheduler.FromCurrentSynchronizationContext());
            var recentTask = MauiProgram.Database.Album.GetAllAsync(limit: ResultCount, startIndex: 0, setSortTypes: ItemSortBy.DateCreated, setSortOrder: SortOrder.Descending).ContinueWith(async task =>
            {
                _recentAddedData = task.Result;
                await InvokeAsync(StateHasChanged);
                await Js.InvokeAsync<string>("InitAllImages");
            }, TaskScheduler.FromCurrentSynchronizationContext());;
            var playTask = MauiProgram.Database.Song.GetAllAsync(limit: ResultCount, startIndex: 0, setSortTypes: ItemSortBy.PlayCount, setSortOrder: SortOrder.Descending).ContinueWith(async task =>
            {
                _mostPlayData = task.Result;
                await InvokeAsync(StateHasChanged);
                await Js.InvokeAsync<string>("InitAllImages");
            }, TaskScheduler.FromCurrentSynchronizationContext());;
            var randomTask = MauiProgram.Database.Song.GetAllAsync(limit: ResultCount, startIndex: 0, setSortTypes: ItemSortBy.Random, setSortOrder: SortOrder.Descending).ContinueWith(async task =>
            {
                _randomData = task.Result;
                await InvokeAsync(StateHasChanged);
                await Js.InvokeAsync<string>("InitAllImages");
            }, TaskScheduler.FromCurrentSynchronizationContext());;
            await Task.WhenAll(favTask, recentTask, playTask,randomTask);
        }
    }
}