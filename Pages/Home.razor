@page "/home"
@using Jellyfin.Sdk;
@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.Shared;
@using BlazorAnimate;
@inject IJSRuntime JS;

<div style="margin-bottom: 2rem; margin-top:1rem;">
    <h3>Recently Played</h3>

    <ul class="music-list">
        @for (int i = 0; i < 6; i++)
        {
            itemFadeInDelay += 0.1f;
            if (i < recentPlayData.Count())
            {
                if (recentPlayData[i] != null)
                {
                    BaseMusicItem item = recentPlayData[i];
                    string base64 = recentPlayPlaceholderImages[i];
                    <AlbumListView musicItem="@item" placeholderBase64="@base64" />
                }
            }
        }
    </ul>
</div>

<!-- Horizontal container for Favourite Albums -->
<HorizontalMusicItemList Title="Favourites" itemCount="50" albumData="@favouritesPlayData" albumBlurHashData="@favouritesPlaceholderImages" />
<br />

<!-- Horizontal container for Recently added Albums -->
<HorizontalMusicItemList Title="Recently Added" itemCount="50" albumData="@recentAddedData" albumBlurHashData="@recentAddedPlaceholderImages" />
<br />

<!-- Horizontal container for Most Played Songs -->
<HorizontalMusicItemList Title="Most Played" itemCount="50" albumData="@mostPlayData" albumBlurHashData="@mostPlayPlaceholderImages" />
<br />

<!-- Horizontal container for Most Random Albums -->
<HorizontalMusicItemList Title="Random" itemCount="50" albumData="@randomData" albumBlurHashData="@randomPlaceholderImages" />

@errorMessage

@code {
    private BaseMusicItem[] recentPlayData = MauiProgram.homeCache.recentPlayData;
    private string[] recentPlayPlaceholderImages = MauiProgram.homeCache.recentPlayPlaceholderImages;

    private BaseMusicItem[] favouritesPlayData = MauiProgram.homeCache.favouritesPlayData;
    private string[] favouritesPlaceholderImages = MauiProgram.homeCache.favouritesPlaceholderImages;

    private BaseMusicItem[] recentAddedData = MauiProgram.homeCache.recentAddedData;
    private string[] recentAddedPlaceholderImages = MauiProgram.homeCache.recentAddedPlaceholderImages;

    private BaseMusicItem[] mostPlayData = MauiProgram.homeCache.mostPlayData;
    private string[] mostPlayPlaceholderImages = MauiProgram.homeCache.mostPlayPlaceholderImages;

    private BaseMusicItem[] randomData = new Album[0];
    private string[] randomPlaceholderImages = new string[0];

    public string errorMessage = string.Empty;
    private int resultCount = 50;
    private bool isLoading = true;
    private float itemFadeInDelay = 0;

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.webView.pageTitle = "PortaJel";
        MauiProgram.webView.currentUri = "/home";
        MauiProgram.webView.showHeader = true;
        MauiProgram.UpdateDebugMessage("Home page loaded.");

        if (!MauiProgram.homeCache.IsEmpty())
        {
            isLoading = false;
            MauiProgram.mainPage.SetNavbarVisibility(true);
            MauiProgram.UpdateDebugMessage("Loading complete!");
            StateHasChanged();
        }

        await Task.Run(() => LoadApi());
        MauiProgram.mainPage.SetNavbarVisibility(true);
    }

    private async Task LoadApi()
    {
        // Run data collection
        try
        {
            MauiProgram.UpdateDebugMessage("Starting request for Home page data.");

            Task<Song[]> runGetRecent = MauiProgram.api.GetAllSongsAsync(limit: resultCount, startIndex: 0, sortTypes: new String[] { "DatePlayed" }, sortOrder: SortOrder.Descending);
            Task<Album[]> runGetFavourites = MauiProgram.api.GetAllAlbumsAsync(limit: resultCount, startIndex: 0, isFavourite: true);
            Task<Album[]> runGetRecentlyAdded = MauiProgram.api.GetAllAlbumsAsync(limit: resultCount, startIndex: 0, sortTypes: new String[] { "DateCreated" });
            Task<Song[]> runGetMostPlayed = MauiProgram.api.GetAllSongsAsync(limit: resultCount, startIndex: 0, sortTypes: new String[] { "PlayCount" }, sortOrder: SortOrder.Descending);
            Task<Song[]> runGetRandom = MauiProgram.api.GetAllSongsAsync(limit: resultCount, startIndex: 0, sortTypes: new String[] { "Random" }, sortOrder: SortOrder.Descending);
            await Task.WhenAll(
                runGetRecent,
                runGetFavourites,
                runGetRecentlyAdded,
                runGetMostPlayed,
                runGetRandom
            );

            // Get albums from songs in last task.
            MauiProgram.UpdateDebugMessage("Starting request for Recent Listen data.");
            List<Guid> songAlbumIDs = new();
            List<Task<Album>> recentPlayAlbumTasks = new();
            List<Album> getRecentAlbums = new();
            foreach (Song song in runGetRecent.Result)
            {
                if (song.album != null)
                {
                    if (!songAlbumIDs.Contains(song.album.id))
                    {
                        songAlbumIDs.Add(song.album.id);
                        recentPlayAlbumTasks.Add(MauiProgram.api.GetAlbumAsync(song.album.id));
                    }
                }
            }
            await Task.WhenAll(recentPlayAlbumTasks);
            for (int i = 0; i < recentPlayAlbumTasks.Count; i++)
            {
                getRecentAlbums.Add(recentPlayAlbumTasks[i].Result);
            }

            // Run blurhashing
            MauiProgram.UpdateDebugMessage("Decoding Blurhash!");
            Task<string[]> runRecentPlayBlurhash = GenerateBlurHash(runGetRecent.Result);
            Task<string[]> runFavouritesBlurhash = GenerateBlurHash(runGetFavourites.Result);
            Task<string[]> runRecentAddedBlurhash = GenerateBlurHash(runGetRecentlyAdded.Result);
            Task<string[]> runMostPlayBlurhash = GenerateBlurHash(runGetMostPlayed.Result);
            Task<string[]> runRandomBlurhash = GenerateBlurHash(runGetRandom.Result);
            await Task.WhenAll(
                runRecentPlayBlurhash,
                runFavouritesBlurhash,
                runRecentAddedBlurhash,
                runMostPlayBlurhash,
                runRandomBlurhash
            );

            if (Application.Current != null)
            {
                Application.Current.Dispatcher.Dispatch(() =>
                    {
                        recentPlayData = getRecentAlbums.ToArray();
                        favouritesPlayData = runGetFavourites.Result;
                        recentAddedData = runGetRecentlyAdded.Result;
                        mostPlayData = runGetMostPlayed.Result;
                        randomData = runGetRandom.Result;

                        MauiProgram.homeCache.recentPlayData = recentPlayData;
                        MauiProgram.homeCache.favouritesPlayData = favouritesPlayData;
                        MauiProgram.homeCache.recentAddedData = recentAddedData;
                        MauiProgram.homeCache.mostPlayData = mostPlayData;

                        recentPlayPlaceholderImages = runRecentPlayBlurhash.Result;
                        favouritesPlaceholderImages = runFavouritesBlurhash.Result;
                        recentAddedPlaceholderImages = runRecentAddedBlurhash.Result;
                        mostPlayPlaceholderImages = runMostPlayBlurhash.Result;
                        randomPlaceholderImages = runRandomBlurhash.Result;

                        MauiProgram.UpdateDebugMessage("Setting Blurhash information!");
                        MauiProgram.homeCache.recentPlayPlaceholderImages = recentPlayPlaceholderImages;
                        MauiProgram.homeCache.favouritesPlaceholderImages = favouritesPlaceholderImages;
                        MauiProgram.homeCache.recentAddedPlaceholderImages = recentAddedPlaceholderImages;
                        MauiProgram.homeCache.mostPlayPlaceholderImages = mostPlayPlaceholderImages;
                    });
            }
            MauiProgram.UpdateDebugMessage("Loading complete!");
            isLoading = false;
        }
        catch (Exception ex)
        {
            if (Application.Current != null && Application.Current.MainPage != null)
            {
                Application.Current.Dispatcher.Dispatch(() =>
                {
                    Application.Current.MainPage.DisplayAlert("Error?", $"{ex.Message}", "Continue");
                    errorMessage = ex.ToString();
                });
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        MauiProgram.UpdateDebugMessage("Initaling Blurhash!");
        await JS.InvokeAsync<string>("InitAllImages");
        if (isLoading == false)
        {
            MauiProgram.mainPage.ShowLoadingScreen(false);
            MauiProgram.webView.isLoading = false;
        }
    }

    private async Task<string[]> GenerateBlurHash(BaseMusicItem[] data)
    {
        String[] toReturn = new string[data.Count()];
        for (int i = 0; i < data.Count(); i++)
        {
            try
            {
                toReturn[i] = await data[i].image.BlurhashToBase64Async(20, 20);
            }
            catch (Exception)
            {
                toReturn[i] = string.Empty;
            }
        }
        return toReturn;
    }
}
