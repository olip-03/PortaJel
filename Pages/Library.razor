@page "/library/{showFavourites}"
@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.Shared;
@using Microsoft.AspNetCore.Components.Web.Virtualization; 
@using PortaJel_Blazor;
@using BlazorAnimate;
@using Jellyfin.Sdk;
@using Jellyfin.Sdk.Generated.Models;
@using PortaJel_Blazor.Shared.Icons;
@using System.Diagnostics;
@inject IJSRuntime JS;

<div id="libraryToolbar" class="button-container boxed PageSecondaryColor">
    @if (selected == Selectable.playlists)
    {
        <input checked type="radio" id="playlists" name="skills" value="Playlists" @onclick="() => SelectPage(Selectable.playlists)">
    }
    else
    {
        <input type="radio" id="playlists" name="skills" value="Playlists" @onclick="() => SelectPage(Selectable.playlists)">
    }
    <label class="PrimaryTextColor" for="playlists">Playlists</label>

    @if (selected == Selectable.albums)
    {
        <input checked type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(Selectable.albums)">
    }
    else
    {
        <input type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(Selectable.albums)">
    }
    <label class="PrimaryTextColor" for="albums">Albums</label>

    @if (selected == Selectable.artists)
    {
        <input checked type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(Selectable.artists)">
    }
    else
    {
        <input type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(Selectable.artists)">
    }
    <label class="PrimaryTextColor" for="artists">Artists</label>


    @if (selected == Selectable.songs)
    {
        <input checked type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(Selectable.songs)">
    }
    else
    {
        <input type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(Selectable.songs)">
    }
    <label class="PrimaryTextColor" for="songs">Songs</label>

    @* @if (!isFavouritesPage)
    {
        if (selected == Selectable.genres)
        {
            <input checked type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(Selectable.genres)">
        }
        else
        {
            <input type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(Selectable.genres)">
        }
        <label class="PrimaryTextColor" for="genres">Genres</label>
    } *@
</div>

<div class="quickplay-container">
    <button class="quickplay-button PageSecondaryColor PrimaryTextColor">Play All</button>
    <div style="width:1rem;" />
    <button class="quickplay-button PageSecondaryColor PrimaryTextColor">Shuffle</button>
</div>

<div class="tool-container">
    <div @onclick=ToggleSort>
        @switch (sort)
        {
            case sortMethod.byActivity:
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                    <p class="tools-text PrimaryTextColor">Activity</p>
                </Animate>
                break;
            case sortMethod.byArtist:
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                    <p class="tools-text PrimaryTextColor">Artist</p>
                </Animate>
                break;
            case sortMethod.byName:
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                    <p class="tools-text PrimaryTextColor">Name</p>
                </Animate>
                break;
        }
    </div>
    <div @onclick=ToggleView>
        @if (showGrid)
        {
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                <ListViewIcon IsGrid=@showGrid ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
            </Animate>
        }
        else
        {
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                <ListViewIcon IsGrid=@showGrid ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
            </Animate>
        }
    </div>
</div>

@* Custom styling for items when grid mode is selected *@
@if (showGrid)
{
    <style>
        .album-list {
            width: 100%;
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            grid-gap: 20px 10px;
        }
    </style>
}

<div class="album-list">
    <Virtualize Context="musicItem" ItemsProvider="LoadListItems" OverscanCount="100" ItemSize="80">
        <ItemContent>
            <SearchResultItem musicObject="musicItem" isGrid=@showGrid />
        </ItemContent>
        <Placeholder>
            <SearchResultItem musicObject="Album.Empty" isGrid=@showGrid />
        </Placeholder>
        <EmptyContent>
            <p>
                There are no items to display.
            </p>
        </EmptyContent>
    </Virtualize>
</div>

@code {
    [Parameter] public string showFavourites { get; set; } = "false";
    private bool isFavouritesPage = false;

    private List<BaseMusicItem> musicData = new();
    private List<BaseMusicItem> viewData = new();
    private string[] placeholderImages = [];
    private int totalRecordCount = 0;
    private bool showGrid = MauiProgram.libraryCache.showGrid;

    private int loadLimit = MauiProgram.libraryCache.loadLimit;
    private int startFromIndex = MauiProgram.libraryCache.startFromIndex;
    private int lastAmount = MauiProgram.libraryCache.lastAmount;

    private int scrolledTo = 0;

    private bool isLoading = false;

    private enum Selectable
    {
        playlists,
        albums,
        artists,
        songs,
        genres,
        none
    }
    Selectable selected = (Selectable)Enum.ToObject(typeof(Selectable), MauiProgram.libraryItemView);
    Selectable queued = Selectable.none;

    private enum sortMethod
    {
        byArtist,
        byName,
        byActivity
    }
    sortMethod sort = (sortMethod)Enum.ToObject(typeof(sortMethod), MauiProgram.librarySortMethod);

    protected override void OnInitialized()
    {
        MauiProgram.WebView.cancellationSource = new();
        MauiProgram.WebView.cancellationToken = MauiProgram.WebView.cancellationSource.Token;

        if (isFavouritesPage == true)
        {
            MauiProgram.WebView.pageTitle = "Favourites";
            MauiProgram.WebView.currentUri = "/library/true";
        }
        else
        {
            MauiProgram.WebView.pageTitle = "Library";
            MauiProgram.WebView.currentUri = "/library/false";
        }

        MauiProgram.WebView.showHeader = true;
        MauiProgram.WebView.isLoading = false;
    }

    protected override void OnParametersSet()
    {
        viewData = new();
        placeholderImages = [];
        isFavouritesPage = Boolean.Parse(showFavourites);
        isLoading = false;
        // SelectPage(selected);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeAsync<string>("InitAllImages");
        MauiProgram.MainPage.ShowLoadingScreen(false);
    }
    private void ToggleSort()
    {
        if (sort >= sortMethod.byActivity)
        {
            sort = 0;
        }
        else
        {
            sort++;
        }
        MauiProgram.librarySortMethod = (int)sort;
    }
    private void ToggleView()
    {
        // electPage(selectedPage);

        showGrid = !showGrid; // toggle
        MauiProgram.libraryShowGrid = showGrid;

        StateHasChanged();
    }

    // Please implement virtualization
    // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/virtualization?view=aspnetcore-8.0
    private async void SelectPage(Selectable page)
    {
        MauiProgram.libraryItemView = (int)page;
        selected = page;

        isLoading = true;

        viewData.Clear();
        musicData.Clear();

        await Task.Run(async () =>
        {
            bool isCompleted = false;

            int currentStartIndex = 0;
            int total = 0; //like, everything man; 

            bool firstLoop = true;

            while (!isCompleted)
            {
                BaseMusicItem[] results = new BaseMusicItem[0];
                switch (page)
                {
                    case Selectable.none:
                        viewData = new();
                        break;
                    case Selectable.playlists:
                        Task<Playlist[]> getResults = MauiProgram.api.GetAllPlaylistsAsync(limit: loadLimit, startIndex: currentStartIndex, isFavourite: isFavouritesPage);
                        Task<int> getTotals = MauiProgram.api.GetTotalPlaylistCount();
                        await Task.WhenAll(getResults, getTotals);
                        results = getResults.Result;
                        total = getTotals.Result;
                        break;
                    case Selectable.albums:
                        results = await MauiProgram.api.GetAllAlbumsAsync(limit: loadLimit, startIndex: currentStartIndex, sortOrder: SortOrder.Ascending, isFavourite: isFavouritesPage);
                        break;
                    case Selectable.artists:
                        results = await MauiProgram.api.GetAllArtistsAsync(limit: loadLimit, startIndex: currentStartIndex, isFavourite: isFavouritesPage);
                        break;
                    case Selectable.songs:
                        results = await MauiProgram.api.GetAllSongsAsync(limit: loadLimit, startIndex: currentStartIndex, sortOrder: [SortOrder.Ascending], isFavourite: isFavouritesPage);
                        break;
                    // case Selectable.genres:
                    //     results = await MauiProgram.api.GetAllGenresAsync(limit: loadLimit, startIndex: currentStartIndex);
                    //     break;
                    default:
                        results = new BaseMusicItem[0];
                        break;
                }

                if (firstLoop)
                {
                    viewData.AddRange(results);
                    isLoading = false;
                    await InvokeAsync(StateHasChanged);
                }

                startFromIndex = results.Count();
                musicData.AddRange(results);
                firstLoop = false;
                // If the total count of items, is less than what we have requested, we can assum
                // We have reached the end of the count, and have a full list of items
                if (musicData.Count() < currentStartIndex)
                {
                    isCompleted = true;
                    // only stop once literally everything has been loaded.
                }
                else
                {
                    currentStartIndex += loadLimit;
                }
            }
        });
    }

    private void UpdateScrolledToCount(int index)
    {
        if (index > scrolledTo)
        {
            scrolledTo = index;
            Trace.WriteLine("Scrolled to " + index);
        }
    }

    private async ValueTask<ItemsProviderResult<BaseMusicItem>> LoadListItems(ItemsProviderRequest request)
    {
        int totalItems = await MauiProgram.api.GetTotalAlbumCount();
        int numItems = Math.Min(request.Count, totalItems - request.StartIndex);
        var musicItems = await MauiProgram.api.GetAllAlbumsAsync(limit: numItems, startIndex: request.StartIndex, sortOrder: SortOrder.Ascending, isFavourite: isFavouritesPage, cancellactionToken: request.CancellationToken);
        await Parallel.ForEachAsync(musicItems, async (musicItem, ct) =>
        {
            musicItem.ImgBlurhashBase64 = await MusicItemImage.BlurhashToBase64Async(musicItem.ImgBlurhash, 20, 20).ConfigureAwait(false);
        });
        return new ItemsProviderResult<BaseMusicItem>(musicItems, totalItems);
    }
}
