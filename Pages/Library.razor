@page "/library/{showFavourites}"
@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.Shared;
@using PortaJel_Blazor;
@using BlazorAnimate;
@using Jellyfin.Sdk;
@using Jellyfin.Sdk.Generated.Models;
@using PortaJel_Blazor.Shared.Icons;
@inject IJSRuntime JS;

<div id="libraryToolbar" class="button-container boxed PageSecondaryColor">
    @if (selected == Selectable.playlists)
    {
        <input checked type="radio" id="playlists" name="skills" value="Playlists" @onclick="() => SelectPage(Selectable.playlists)">
    }
    else
    {
        <input type="radio" id="playlists" name="skills" value="Playlists" @onclick="() => SelectPage(Selectable.playlists)">
    }
    <label class="PrimaryTextColor" for="playlists">Playlists</label>


    @if (selected == Selectable.albums)
    {
        <input checked type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(Selectable.albums)">
    }
    else
    {
        <input type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(Selectable.albums)">
    }
    <label class="PrimaryTextColor" for="albums">Albums</label>

    @if (selected == Selectable.artists)
    {
        <input checked type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(Selectable.artists)">
    }
    else
    {
        <input type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(Selectable.artists)">
    }
    <label class="PrimaryTextColor" for="artists">Artists</label>


    @if (selected == Selectable.songs)
    {
        <input checked type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(Selectable.songs)">
    }
    else
    {
        <input type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(Selectable.songs)">
    }
    <label class="PrimaryTextColor" for="songs">Songs</label>

    @if (!isFavouritesPage)
    {
        if (selected == Selectable.genres)
        {
            <input checked type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(Selectable.genres)">
        }
        else
        {
            <input type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(Selectable.genres)">
        }
        <label class="PrimaryTextColor" for="genres">Genres</label>
    }
</div>

<div class="quickplay-container">
    <button class="quickplay-button PageSecondaryColor PrimaryTextColor">Play All</button>
    <div style="width:1rem;" />
    <button class="quickplay-button PageSecondaryColor PrimaryTextColor">Shuffle</button>
</div>

<div class="tool-container">
    <div @onclick=ToggleSort>
        @switch (sort)
        {
            case sortMethod.byActivity:
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                    <p class="tools-text PrimaryTextColor">Activity</p>
                </Animate>
                break;
            case sortMethod.byArtist:
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                    <p class="tools-text PrimaryTextColor">Artist</p>
                </Animate>
                break;
            case sortMethod.byName:
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                    <p class="tools-text PrimaryTextColor">Name</p>
                </Animate>
                break;
        }
    </div>
    <div @onclick=ToggleView>
        @if (showGrid)
        {
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                <ListViewIcon IsGrid=@showGrid ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
            </Animate>
        }
        else
        {
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                <ListViewIcon IsGrid=@showGrid ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
            </Animate>
        }
    </div>
</div>

@* Custom styling for items when grid mode is selected *@
@if (showGrid)
{
    <style>
        .album-list {
            width: 100%;
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            grid-gap: 20px 10px;
        }
    </style>
}

<div class="album-list">
    @if (isLoading)
    { // Spinner
        <Spinner />
    }
    else
    {
        <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
            @if (data.Count() > 0)
            { // Load information
                @for (int i = 0; i < data.Count(); i++)
                {
                    if (data[i] != null)
                    {
                        string base64 = string.Empty;
                        try { base64 = placeholderImages[i]; }
                        catch (Exception) { base64 = string.Empty; }
                        if (i == lastAmount)
                        {
                            <SearchResultItem musicObject="@data[i]" isGrid=@showGrid placeholderBase64="@base64" OnViewAction="LoadMore" />
                        }
                        else
                        {
                            <SearchResultItem musicObject="@data[i]" isGrid=@showGrid placeholderBase64="@base64" />
                        }
                    }
                }
            }
            else
            { // something went wrong click here to try again

            }
        </Animate>
    }
</div>

@code {
    [Parameter] public string showFavourites { get; set; } = "false";
    private bool isFavouritesPage = false;

    private List<BaseMusicItem> data = MauiProgram.libraryCache.data;
    private string[] placeholderImages = MauiProgram.libraryCache.placeholderImages;
    private int totalRecordCount = MauiProgram.libraryCache.totalRecordCount;
    private bool showGrid = MauiProgram.libraryCache.showGrid;
    
    private int loadLimit = MauiProgram.libraryCache.loadLimit;
    private int startFromIndex = MauiProgram.libraryCache.startFromIndex;
    private int lastAmount = MauiProgram.libraryCache.lastAmount;

    private Task? queuedTask = null;
    private bool isLoading = false;

    private enum Selectable
    {
        playlists,
        albums,
        artists,
        songs,
        genres,
        none
    }
    Selectable selected = (Selectable)Enum.ToObject(typeof(Selectable), MauiProgram.libraryItemView);
    Selectable queued = Selectable.none;

    private enum sortMethod
    {
        byArtist,
        byName,
        byActivity
    }
    sortMethod sort = (sortMethod)Enum.ToObject(typeof(sortMethod), MauiProgram.librarySortMethod);

    protected override void OnInitialized()
    {
        isFavouritesPage = Boolean.Parse(showFavourites);

        MauiProgram.WebView.cancellationSource = new();
        MauiProgram.WebView.cancellationToken = MauiProgram.WebView.cancellationSource.Token;

        if (isFavouritesPage == true)
        {
            MauiProgram.WebView.pageTitle = "Favourites";
            MauiProgram.WebView.currentUri = "/library/true";
        }
        else
        {
            MauiProgram.WebView.pageTitle = "Library";
            MauiProgram.WebView.currentUri = "/library/false";
        }

        MauiProgram.WebView.showHeader = true;

        MauiProgram.WebView.isLoading = false;
        if (MauiProgram.libraryCache.IsEmpty())
        {
            SelectPage(selected);
        }
    }
    protected override void OnParametersSet()
    {
        SelectPage(selected);
        OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeAsync<string>("InitAllImages");
        MauiProgram.MainPage.ShowLoadingScreen(false);
    }
    private void ToggleSort()
    {
        if (sort >= sortMethod.byActivity)
        {
            sort = 0;
        }
        else
        {
            sort++;
        }
        MauiProgram.librarySortMethod = (int)sort;
    }
    private void ToggleView()
    {
        // electPage(selectedPage);

        showGrid = !showGrid; // toggle
        MauiProgram.libraryShowGrid = showGrid;

        StateHasChanged();
    }
    private async void SelectPage(Selectable page)
    {
        MauiProgram.libraryItemView = (int)page;
        selected = page;

        if (isLoading)
        { // Still waiting for previous iteration to complete
          // Call cancellation token
          // Add this bitch to the queue
            queued = page;
            return;
        }

        isLoading = true;
        await InvokeAsync(StateHasChanged);

        await Task.Run(async () =>
        {
            bool isCompleted = false;
            while (!isCompleted)
            {
                BaseMusicItem[] results = new BaseMusicItem[0];
                switch (page)
                {
                    case Selectable.none:
                        data = new();
                        break;
                    case Selectable.playlists:
                        results = await MauiProgram.api.GetAllPlaylistsAsync(limit: loadLimit, isFavourite: isFavouritesPage);
                        break;
                    case Selectable.albums:
                        results = await MauiProgram.api.GetAllAlbumsAsync(limit: loadLimit, sortOrder: SortOrder.Ascending, isFavourite: isFavouritesPage);
                        break;
                    case Selectable.artists:
                        results = await MauiProgram.api.GetAllArtistsAsync(limit: loadLimit, isFavourite: isFavouritesPage);
                        break;
                    case Selectable.songs:
                        results = await MauiProgram.api.GetAllSongsAsync(limit: loadLimit, sortOrder: [SortOrder.Ascending], isFavourite: isFavouritesPage);
                        break;
                    case Selectable.genres:
                        results = await MauiProgram.api.GetAllGenresAsync(limit: loadLimit);
                        break;
                    default:
                        results = new BaseMusicItem[0];
                        break;
                }
                startFromIndex = data.Count();
                data = results.ToList();
                UpdateCache();

                placeholderImages = new string[data.Count()];
                for (int i = 0; i < data.Count(); i++)
                {
                    try
                    {
                        placeholderImages[i] = await data[i].image.BlurhashToBase64Async(20, 20);
                    }
                    catch (Exception)
                    {
                        placeholderImages[i] = string.Empty;
                    }
                }

                if (queued != Selectable.none)
                {
                    page = queued;
                    queued = Selectable.none;
                    continue;
                }

                isCompleted = true;
            }
        });

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
    private async void LoadMore()
    {
        Console.WriteLine("start");
        await Task.Run(async () =>
        {
            BaseMusicItem[] results = new BaseMusicItem[0];
            switch (selected)
            {
                case Selectable.albums:
                    results = await MauiProgram.api.GetAllAlbumsAsync(limit: loadLimit, startIndex: startFromIndex);
                    break;
                case Selectable.artists:
                    results = await MauiProgram.api.GetAllArtistsAsync(limit: loadLimit, startIndex: startFromIndex);
                    break;
                case Selectable.songs:
                    results = await MauiProgram.api.GetAllSongsAsync(limit: loadLimit, startIndex: startFromIndex);
                    break;
                case Selectable.genres:
                    results = await MauiProgram.api.GetAllGenresAsync(limit: loadLimit, startIndex: startFromIndex);
                    break;
                default:
                    results = new BaseMusicItem[0];
                    break;
            }
            lastAmount = data.Count();
            data.AddRange(results);
            UpdateCache();

            placeholderImages = new string[data.Count()];
            for (int i = 0; i < data.Count(); i++)
            {
                try
                {
                    placeholderImages[i] = await data[i].image.BlurhashToBase64Async(20, 20);
                }
                catch (Exception)
                {
                    placeholderImages[i] = string.Empty;
                }
            }
            MauiProgram.libraryCache.placeholderImages = placeholderImages;

            startFromIndex = data.Count() - 1;
        });
        Console.WriteLine("done");
        StateHasChanged();
    }
    public void UpdateCache()
    {
        // Update each variable in MauiProgram.libraryCache with its corresponding value
        MauiProgram.libraryCache.data = new List<BaseMusicItem>(data);
        MauiProgram.libraryCache.placeholderImages = (string[])placeholderImages.Clone();
        MauiProgram.libraryCache.totalRecordCount = totalRecordCount;

        MauiProgram.libraryCache.showGrid = showGrid;

        MauiProgram.libraryCache.loadLimit = loadLimit;
        MauiProgram.libraryCache.startFromIndex = startFromIndex;
        MauiProgram.libraryCache.lastAmount = lastAmount;
    }

}