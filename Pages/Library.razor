@page "/library/{showFavourites}"
@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.Shared;
@using Microsoft.AspNetCore.Components.Web.Virtualization; 
@using PortaJel_Blazor;
@using BlazorAnimate;
@using Jellyfin.Sdk;
@using Jellyfin.Sdk.Generated.Models;
@using PortaJel_Blazor.Shared.Icons;
@using System.Diagnostics;
@inject IJSRuntime JS;

<div id="libraryToolbar" class="button-container boxed PageSecondaryColor">
    @if (selected == Selectable.playlists)
    {
        <input checked type="radio" id="playlists" name="skills" value="Playlists" @onclick="() => SelectPage(Selectable.playlists)">
    }
    else
    {
        <input type="radio" id="playlists" name="skills" value="Playlists" @onclick="() => SelectPage(Selectable.playlists)">
    }
    <label class="PrimaryTextColor" for="playlists">Playlists</label>

    @if (selected == Selectable.albums)
    {
        <input checked type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(Selectable.albums)">
    }
    else
    {
        <input type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(Selectable.albums)">
    }
    <label class="PrimaryTextColor" for="albums">Albums</label>

    @if (selected == Selectable.artists)
    {
        <input checked type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(Selectable.artists)">
    }
    else
    {
        <input type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(Selectable.artists)">
    }
    <label class="PrimaryTextColor" for="artists">Artists</label>


    @if (selected == Selectable.songs)
    {
        <input checked type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(Selectable.songs)">
    }
    else
    {
        <input type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(Selectable.songs)">
    }
    <label class="PrimaryTextColor" for="songs">Songs</label>

    @* @if (!isFavouritesPage)
    {
        if (selected == Selectable.genres)
        {
            <input checked type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(Selectable.genres)">
        }
        else
        {
            <input type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(Selectable.genres)">
        }
        <label class="PrimaryTextColor" for="genres">Genres</label>
    } *@
</div>

@*<div class="quickplay-container">
    <button class="quickplay-button PageSecondaryColor PrimaryTextColor">Play All</button>
    <div style="width:1rem;" />
    <button class="quickplay-button PageSecondaryColor PrimaryTextColor">Shuffle</button>
</div>*@

<div class="tool-container">
    <div @onclick=ToggleSort>
        @switch (sort)
        {
            case sortMethod.byActivity:
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                    <p class="tools-text PrimaryTextColor">Activity</p>
                </Animate>
                break;
            case sortMethod.byArtist:
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                    <p class="tools-text PrimaryTextColor">Artist</p>
                </Animate>
                break;
            case sortMethod.byName:
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                    <p class="tools-text PrimaryTextColor">Name</p>
                </Animate>
                break;
        }
    </div>
    <div @onclick=ToggleView>
        @if (showGrid)
        {
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                <ListViewIcon IsGrid=@showGrid ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
            </Animate>
        }
        else
        {
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                <ListViewIcon IsGrid=@showGrid ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
            </Animate>
        }
    </div>
</div>

@* Custom styling for items when grid mode is selected *@
@if (showGrid)
{
    <style>
        .album-list {
            width: 100%;
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            grid-gap: 20px 10px;
        }
    </style>
}

<div class="album-list">
    @*  Good morning! So far, so good. Shit is working as it's supposed to be :) :) :) :P'*@
    @if (isLoading)
    {
        <Spinner/>
    }
    else
    {
        <Virtualize Context="musicItem" ItemsProvider="LoadListItems" OverscanCount="20" ItemSize="100" @ref="virtualizeComponent">
            <ItemContent>
                <SearchResultItem musicObject="musicItem" />
            </ItemContent>
            <Placeholder>
                <SearchResultItem musicObject="Album.Empty" />
            </Placeholder>
            <EmptyContent>
                <p>
                    There are no items to display.
                </p>
            </EmptyContent>
        </Virtualize>
    }
</div>

@code {
    [Parameter] public string showFavourites { get; set; } = "false";
    private bool isFavouritesPage = false;

    private List<BaseMusicItem> musicData = new();
    private List<BaseMusicItem> viewData = new();
    private string[] placeholderImages = [];
    private int totalRecordCount = 0;
    private bool showGrid = MauiProgram.libraryShowGrid;

    private int scrolledTo = 0;

    private Virtualize<BaseMusicItem>? virtualizeComponent;
    private bool isLoading = false;

    private enum Selectable
    {
        playlists,
        albums,
        artists,
        songs,
        genres,
        none
    }
    Selectable selected = (Selectable)Enum.ToObject(typeof(Selectable), MauiProgram.libraryItemView);
    Selectable queued = Selectable.none;

    private enum sortMethod
    {
        byArtist,
        byName,
        byActivity
    }
    sortMethod sort = (sortMethod)Enum.ToObject(typeof(sortMethod), MauiProgram.librarySortMethod);

    protected override void OnInitialized()
    {
        MauiProgram.WebView.cancellationSource = new();
        MauiProgram.WebView.cancellationToken = MauiProgram.WebView.cancellationSource.Token;

        if (isFavouritesPage == true)
        {
            MauiProgram.WebView.pageTitle = "Favourites";
            MauiProgram.WebView.currentUri = "/library/true";
        }
        else
        {
            MauiProgram.WebView.pageTitle = "Library";
            MauiProgram.WebView.currentUri = "/library/false";
        }

        MauiProgram.WebView.showHeader = true;
        MauiProgram.WebView.isLoading = false;
    }

    protected override void OnParametersSet()
    {
        viewData = new();
        placeholderImages = [];
        isFavouritesPage = Boolean.Parse(showFavourites);
        isLoading = true;
        SelectPage(selected);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeAsync<string>("InitAllImages");
        MauiProgram.MainPage.ShowLoadingScreen(false);
    }
    private void ToggleSort()
    {
        if (sort >= sortMethod.byActivity)
        {
            sort = 0;
        }
        else
        {
            sort++;
        }
        MauiProgram.librarySortMethod = (int)sort;
    }
    private void ToggleView()
    {
        // electPage(selectedPage);

        showGrid = !showGrid; // toggle
        MauiProgram.libraryShowGrid = showGrid;

        StateHasChanged();
    }

    // Please implement virtualization
    // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/virtualization?view=aspnetcore-8.0
    private async void SelectPage(Selectable page)
    {
        MauiProgram.libraryItemView = (int)page;
        selected = page;

        isLoading = true;
        StateHasChanged();

        viewData.Clear();
        musicData.Clear();

        if(virtualizeComponent != null)
        {
            await virtualizeComponent.RefreshDataAsync();
            await Task.Delay(50);

        }
        isLoading = false;
        StateHasChanged();
        await JS.InvokeAsync<string>("InitAllImages");
    }

    private void UpdateScrolledToCount(int index)
    {
        if (index > scrolledTo)
        {
            scrolledTo = index;
            Trace.WriteLine("Scrolled to " + index);
        }
    }

    private async ValueTask<ItemsProviderResult<BaseMusicItem>> LoadListItems(ItemsProviderRequest request)
    {
        int totalItems = 0;
        int numItems = 0;
        BaseMusicItem[] musicItems = [];

        switch (selected)
        {
            case Selectable.none:

                break;
            case Selectable.playlists:
                totalItems = await MauiProgram.api.GetTotalPlaylistCount(isFavouritesPage);
                numItems = Math.Min(request.Count, totalItems - request.StartIndex);
                MauiProgram.UpdateDebugMessage($"Grabbing playlist items from {request.StartIndex} to {request.StartIndex + numItems} of total {totalItems}.");
                musicItems = await MauiProgram.api.GetAllPlaylistsAsync(
                limit: numItems,
                startIndex: request.StartIndex,
                sortOrder: SortOrder.Ascending,
                isFavourite: isFavouritesPage,
                cancellactionToken: request.CancellationToken);
                break;
            case Selectable.albums:
                totalItems = await MauiProgram.api.GetTotalAlbumCount(isFavouritesPage);
                numItems = Math.Min(request.Count, totalItems - request.StartIndex);
                MauiProgram.UpdateDebugMessage($"Grabbing album items from {request.StartIndex} to {request.StartIndex + numItems} of total {totalItems}.");
                musicItems = await MauiProgram.api.GetAllAlbumsAsync(
                limit: numItems,
                startIndex: request.StartIndex,
                sortOrder: SortOrder.Ascending,
                isFavourite: isFavouritesPage,
                cancellactionToken: request.CancellationToken);
                break;
            case Selectable.artists:
                totalItems = await MauiProgram.api.GetTotalArtistCount(isFavouritesPage);
                numItems = Math.Min(request.Count, totalItems - request.StartIndex);
                MauiProgram.UpdateDebugMessage($"Grabbing artist items from {request.StartIndex} to {request.StartIndex + numItems} of total {totalItems}.");
                musicItems = await MauiProgram.api.GetAllArtistsAsync(
                limit: numItems,
                startIndex: request.StartIndex,
                // sortOrder: SortOrder.Ascending,
                isFavourite: isFavouritesPage,
                cancellactionToken: request.CancellationToken);
                break;
            case Selectable.songs:
                totalItems = await MauiProgram.api.GetTotalSongCount(isFavouritesPage);
                numItems = Math.Min(request.Count, totalItems - request.StartIndex);
                MauiProgram.UpdateDebugMessage($"Grabbing song items from {request.StartIndex} to {request.StartIndex + numItems} of total {totalItems}.");
                musicItems = await MauiProgram.api.GetAllSongsAsync(
                limit: numItems,
                startIndex: request.StartIndex,
                sortOrder: [SortOrder.Ascending],
                isFavourite: isFavouritesPage,
                cancellactionToken: request.CancellationToken);
                break;
            // case Selectable.genres:
            //     GENRES CURRENTLY DISABLED BECAUSE I CANNOT BE FUCKED ATM 
            //     results = await MauiProgram.api.GetAllGenresAsync(limit: loadLimit, startIndex: currentStartIndex
            //     break;
            default:

                break;
        }

        await Parallel.ForEachAsync(musicItems, async (musicItem, ct) =>
        {
            switch (selected)
            {
                case Selectable.none:

                    break;
                case Selectable.playlists:
                    Playlist playlist = musicItem as Playlist;
                    playlist.ImgBlurhashBase64 = await MusicItemImage.BlurhashToBase64Async(playlist.ImgBlurhash, 20, 20).ConfigureAwait(false);
                    musicItem = playlist;
                    break;
                case Selectable.albums:
                    Album album = musicItem as Album;
                    album.ImgBlurhashBase64 = await MusicItemImage.BlurhashToBase64Async(album.ImgBlurhash, 20, 20).ConfigureAwait(false);
                    musicItem = album;
                    break;
                case Selectable.artists:
                    Artist artist = musicItem as Artist;
                    artist.ImgBlurhashBase64 = await MusicItemImage.BlurhashToBase64Async(artist.ImgBlurhash, 20, 20).ConfigureAwait(false);
                    musicItem = artist;
                    break;
                case Selectable.songs:
                    Song song = musicItem as Song;
                    song.ImgBlurhashBase64 = await MusicItemImage.BlurhashToBase64Async(song.ImgBlurhash, 20, 20).ConfigureAwait(false);
                    musicItem = song;
                    break;
                // case Selectable.genres:
                //     GENRES CURRENTLY DISABLED BECAUSE I CANNOT BE FUCKED ATM 
                //     results = await MauiProgram.api.GetAllGenresAsync(limit: loadLimit, startIndex: currentStartIndex
                //     break;
                default:

                    break;
            }
        });
        await JS.InvokeAsync<string>("InitAllImages");
        StateHasChanged();
        return new ItemsProviderResult<BaseMusicItem>(musicItems, totalItems);
    }
}