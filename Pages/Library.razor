@page "/library/{showFavourites}"
@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using PortaJel_Blazor.Classes.Enum;
@using BlazorAnimate;
@using Jellyfin.Sdk;
@using Jellyfin.Sdk.Generated.Models;
@using PortaJel_Blazor.Shared;
@using PortaJel_Blazor.Shared.Icons;
@using System.Collections.Concurrent;
@using System.Diagnostics
@using PortaJel_Blazor.Classes
@using PortaJel_Blazor.Classes.Data
@using PortaJel_Blazor.Data
@inject IJSRuntime JS;
@implements IDisposable

<div id="libraryToolbar" class="button-container boxed PageSecondaryColor">
    @foreach (var connection in MauiProgram.Database.GetDataConnectors())
    {
        @if (_selected == connection.Key)
        {
            <input checked type="radio" id="@connection.Key" name="skills" value="@connection.Key" @onclick="() => SelectPage(connection.Key)">
        }
        else
        {
            <input type="radio" id="@connection.Key" name="skills" value="@connection.Key" @onclick="() => SelectPage(connection.Key)">
        }
        <label class="PrimaryTextColor" for="@connection.Key">@connection.Key</label>
    }

    @* @if (!isFavouritesPage)
        {
            if (selected == Selectable.genres)
            {
                <input checked type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(Selectable.genres)">
            }
            else
            {
                <input type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(Selectable.genres)">
            }
            <label class="PrimaryTextColor" for="genres">Genres</label>
        } *@
</div>

<ListSortToolbar/>

@*<div class="quickplay-container">
        <button class="quickplay-button PageSecondaryColor PrimaryTextColor">Play All</button>
        <div style="width:1rem;" />
        <button class="quickplay-button PageSecondaryColor PrimaryTextColor">Shuffle</button>
    </div>*@


@* Custom styling for items when grid mode is selected *@
@if (showGrid)
{
    <style>
        .album-list {
            width: 100%;
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            grid-gap: 20px 10px;
        }
    </style>
}

<div class="album-list">
    @*  Good morning! So far, so good. Shit is working as it's supposed to be :) :) :) :P'*@
    @if (_isLoading)
    {
        <Spinner />
    }
    else
    {
        <Virtualize Context="musicItem" ItemsProvider="LoadEmployees" OverscanCount="40" ItemSize="100" @ref="virtualizeComponent">
            <ItemContent>
                <MusicLibraryItem MusicObject="musicItem" />
            </ItemContent>
        
            <Placeholder>
                <MusicLibraryItem MusicObject="Album.Empty" />
            </Placeholder>
        
            <EmptyContent>
                <h5 class="SecondaryTextColor">There are no items to display.</h5>
            </EmptyContent>
        </Virtualize>
    }
</div>

@code {
    [Parameter] public string showFavourites { get; set; } = "false";
    private bool isFavouritesPage = false;

    private IDispatcherTimer _timer = null;

    private BaseMusicItem[] _musicData = [];
    private int _totalRecordCount = 0;
    private bool showGrid = MauiProgram.libraryShowGrid;

    private BaseMusicItem[] musicCache = new BaseMusicItem[0];
    private int totalItems = 0;
    private Virtualize<BaseMusicItem>? virtualizeComponent;
    private bool _isLoading = false;

    private bool hasData = false;
    private string _selected = string.Empty;
    
    private enum sortMethod
    {
        byArtist,
        byName,
        byActivity 
    }
    sortMethod sort = (sortMethod)Enum.ToObject(typeof(sortMethod), MauiProgram.librarySortMethod);

    protected override void OnInitialized()
    {
        MauiProgram.WebView.cancellationSource = new();
        MauiProgram.WebView.cancellationToken = MauiProgram.WebView.cancellationSource.Token;

        if (isFavouritesPage == true)
        {
            MauiProgram.WebView.pageTitle = "Favourites";
            MauiProgram.WebView.currentUri = "/library/true";
        }
        else
        {
            MauiProgram.WebView.pageTitle = "Library";
            MauiProgram.WebView.currentUri = "/library/false";
        }

        MauiProgram.WebView.showHeader = true;
        MauiProgram.WebView.IsLoading = false;
    }

    protected override void OnParametersSet()
    {
        // When parameters change (first load or catalogue/fav change)
        hasData = false;
        isFavouritesPage = Boolean.Parse(showFavourites);
        _isLoading = true;
        // SelectPage(MauiProgram.Database.GetDataConnectors().First().Key);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isLoading = true;
            MauiProgram.MainPage.ShowLoadingScreen(false);
            SelectPage(MauiProgram.Database.GetDataConnectors().First().Key);

            if (Application.Current != null)
            {
                _timer = Application.Current.Dispatcher.CreateTimer();
                _timer.Interval = TimeSpan.FromSeconds(1);
                _timer.Tick += (_,_) => InitalizeImages();
                _timer.Start();
            }
        }
        MauiProgram.MainPage.ShowLoadingScreen(false);
    }

    private bool InitalizeImages()
    {
        Trace.WriteLine("Loading Images");
        _ = Task.Run(() => JS.InvokeAsync<string>("InitAllImages"));
        return true;
    }

    public void Dispose()
    {
        _timer.Stop();
        _timer = null;
        if (MauiProgram.libraryDataCToken != null)
        {
            MauiProgram.libraryDataCToken.Cancel();
        }
    }

    private async void SelectPage(string page)
    {
        _isLoading = true;
        _selected = page;
        switch (page)
        {
            case "Album":
                _musicData = await MauiProgram.Database.Album.GetAllAsync();
                _totalRecordCount = _musicData.Length;
                break;
            case "Artist":
                _musicData = await MauiProgram.Database.Artist.GetAllAsync();
                _totalRecordCount = _musicData.Length;
                break;
            case "Song":
                _musicData = await MauiProgram.Database.Song.GetAllAsync();
                _totalRecordCount = _musicData.Length;
                break;
            case "Playlist":
                _musicData = await MauiProgram.Database.Playlist.GetAllAsync();
                _totalRecordCount = _musicData.Length;
                break;
            case "Genre":
                _musicData = await MauiProgram.Database.Genre.GetAllAsync();
                _totalRecordCount = _musicData.Length;
                break;
        }
        
        if (virtualizeComponent != null) await virtualizeComponent.RefreshDataAsync();
        _isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
    
    private async ValueTask<ItemsProviderResult<BaseMusicItem>> LoadEmployees(
        ItemsProviderRequest request)
    {
        var toReturn = _musicData.Skip(request.StartIndex).Take(request.Count);
        var baseMusicItems = toReturn.ToArray();
        return new ItemsProviderResult<BaseMusicItem>(baseMusicItems, _totalRecordCount);
    }
}