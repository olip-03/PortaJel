@page "/library"
@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.Shared.Resources;
@using PortaJel_Blazor;
@using BlazorAnimate;

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
    <div>
        <div class="button-container boxed">
            @if (selected == selectable.albums)
            {
                <input checked type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(selectable.albums)">
            }
            else
            {
                <input type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(selectable.albums)">
            }
            <label for="albums">Albums</label>

            @if (selected == selectable.artists)
            {
                <input checked type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(selectable.artists)">
            }
            else
            {
                <input type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(selectable.artists)">
            }
            <label for="artists">Artists</label>


            @if (selected == selectable.songs)
            {
                <input checked type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(selectable.songs)">
            }
            else
            {
                <input type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(selectable.songs)">
            }
            <label for="songs">Songs</label>


            @if (selected == selectable.genres)
            {
                <input checked type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(selectable.genres)">
            }
            else
            {
                <input type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(selectable.genres)">
            }
            <label for="genres">Genres</label>
        </div>

        <div class="quickplay-container">
            <button class="quickplay-button">Play All</button>
            <div style="width:1rem;" />
            <button class="quickplay-button">Shuffle</button>
        </div>

        <div class="tool-container">
            <div @onclick=ToggleSort>
                @switch (sort)
                {
                    case sortMethod.byActivity:
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                            <p class="tools-text">Activity</p>
                        </Animate>
                        break;
                    case sortMethod.byArtist:
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                            <p class="tools-text">Artist</p>
                        </Animate>
                        break;
                    case sortMethod.byName:
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                            <p class="tools-text">Name</p>
                        </Animate>
                        break;
                }
            </div>
            <div @onclick=ToggleView>
                @if (showGrid)
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img src="/images/gridview.svg" alt="Grid Icon" class="tools-icon" />
                    </Animate>
                }
                else
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img src="/images/listview.svg" alt="Grid Icon" class="tools-icon" />
                    </Animate>
                }
            </div>
        </div>

        @* Custom styling for items when grid mode is selected *@
        @if (showGrid)
        {
            <style>
                .album-list {
                    width: 100%;
                    display: grid;
                    grid-template-columns: repeat(2, 1fr);
                    grid-gap: 20px 10px;
                }
            </style>
        }

        @* Load actual items *@
        @if (isLoading)
        { // Spinner
            <div class="album-list">
                <Spinner />
            </div>
        }
        else
        {
            <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                <div class="album-list">
                    @if (data.Length > 0)
                    { // Load information

                        @for (int i = 0; i < data.Length; i++)
                        {
                            if (data[i] != null)
                            {
                                <PortaJel_Blazor.UI.Search.SearchResultItem musicObject="@data[i]" isGrid=@showGrid />
                            }
                        }
                    }
                    else
                    { // something went wrong click here to try again

                    }
                </div>
            </Animate>
        }

        @* Load page numbers *@
        @if (!isLoading)
        {
            // Disabling current pagination class as I have another idea for how this could work
            // TODO: This works however overflow:x does NOT allow for you to scroll to the left.
            // try to address this at a later stage when it's actually important. Not a priority atm cause
            // it looks pretty. I've set it to overflow:hidden so the scroll function is gone completely this
            // just needs to be fixed at some point
            <div class="grid-pgnator-container">
                <!-- Items to the left -->
                <div class="grid-pgnator-items-l">
                    @for (int i = selectedPage; i >= 0; i--)
                    { // operation should be done in revese because flex-direction:row-reverse
                        if (i != selectedPage)
                        {
                            int tempInt = i;
                            int displayNum = tempInt + 1;
                            //<div class="pagination-item" @onclick="() => SelectPage(tempInt)">@displayNum</div>
                        }
                    }
                </div>
                <!-- Centered active item -->
                <div class="grid-pgnator-items">
                    @{
                        int pgnNumInt = selectedPage;
                        int displayPgNum = pgnNumInt + 1;
                        <div class="pagination-item active">@displayPgNum</div>
                    }
                </div>
                <!-- Items to the right -->
                <div class="grid-pgnator-items-r">
                    @for (int i = selectedPage + 1; i < pages; i++)
                    {
                        int tempInt = i;
                        int displayNum = tempInt + 1;
                        //<div class="pagination-item" @onclick="() => SelectPage(tempInt)">@displayNum</div>
                    }
                </div>
            </div>
            <p>Showing @data.Length of @totalRecordCount</p>
        }
    </div>
</Animate>

@code {
    private BaseMusicItem[] data = new BaseMusicItem[0];
    private int totalRecordCount = 0;
    private bool isLoading = false;
    private Task? queuedTask = null;

    private bool showGrid = MauiProgram.libraryShowGrid;

    private int itemsPerPage = 100;
    private int startFromIndex = 0;
    private int selectedPage = 0;
    private int pages = 0;

    private int lowerPages = 0;
    private int higherPages = 0;

    private enum selectable
    {
        albums,
        artists,
        songs,
        genres,
        none
    }
    selectable selected = (selectable)Enum.ToObject(typeof(selectable), MauiProgram.libraryItemView);
    selectable queued = selectable.none;

    private enum sortMethod
    {
        byArtist,
        byName,
        byActivity
    }
    sortMethod sort = (sortMethod)Enum.ToObject(typeof(sortMethod), MauiProgram.librarySortMethod);

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.mainLayout.cancellationSource = new();
        MauiProgram.mainLayout.cancellationToken = MauiProgram.mainLayout.cancellationSource.Token;

        MauiProgram.mainLayout.pageTitle = "Library";
        MauiProgram.mainLayout.currentUri = "/library";
        MauiProgram.mainLayout.showHeader = true;

        await Task.Run(() => { Thread.Sleep(250); });
        MauiProgram.mainLayout.isLoading = false;
        SelectPage(selected);
    }
    private void ToggleSort()
    {
        if (sort >= sortMethod.byActivity)
        {
            sort = 0;
        }
        else
        {
            sort++;
        }
        MauiProgram.librarySortMethod = (int)sort;
    }
    private void ToggleView()
    {
        // electPage(selectedPage);

        showGrid = !showGrid; // toggle
        MauiProgram.libraryShowGrid = showGrid;

        StateHasChanged();
    }

    private async void SelectPage(selectable page)
    {
        MauiProgram.libraryItemView = (int)page;

        if (isLoading)
        { // Still waiting for previous iteration to complete
          // Call cancellation token
          // Add this bitch to the queue
            queued = page;
            return;
        }

        isLoading = true;
        await InvokeAsync(StateHasChanged);

        await Task.Run(async () =>
        {
            bool isCompleted = false;
            while (!isCompleted)
            {
                switch (page)
                {
                    case selectable.none:
                        data = new BaseMusicItem[0];
                        break;
                    case selectable.albums:
                        data = await MauiProgram.api.GetAllAlbumsAsync(limit: 50);
                        break;
                    case selectable.artists:
                        data = await MauiProgram.api.GetAllArtistsAsync(limit: 50);
                        break;
                    case selectable.songs:
                        data = await MauiProgram.api.GetAllSongsAsync(limit: 50);
                        break;
                    case selectable.genres:
                        data = await MauiProgram.api.GetAllGenresAsync(limit: 50);
                        break;
                    default:
                        data = new BaseMusicItem[0];
                        break;
                }

                if (queued != selectable.none)
                {
                    page = queued;
                    queued = selectable.none;
                    continue;
                }

                isCompleted = true;
            }
        });

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
}