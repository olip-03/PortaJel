@page "/library/{showFavourites}"
@using PortaJel_Blazor.Data;
@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using PortaJel_Blazor;
@using BlazorAnimate;
@using Jellyfin.Sdk;
@using Jellyfin.Sdk.Generated.Models;
@using PortaJel_Blazor.Shared;
@using PortaJel_Blazor.Shared.Icons;
@using System.Collections.Concurrent;
@using PortaJel_Blazor.Classes
@inject IJSRuntime JS;
@implements IDisposable

<div id="libraryToolbar" class="button-container boxed PageSecondaryColor">
    @if (_selected == FilterItemTypes.Playlists)
    {
        <input checked type="radio" id="playlists" name="skills" value="Playlists" @onclick="() => SelectPage(FilterItemTypes.Playlists)">
    }
    else
    {
        <input type="radio" id="playlists" name="skills" value="Playlists" @onclick="() => SelectPage(FilterItemTypes.Playlists)">
    }
    <label class="PrimaryTextColor" for="playlists">Playlists</label>

    @if (_selected == FilterItemTypes.Albums)
    {
        <input checked type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(FilterItemTypes.Albums)">
    }
    else
    {
        <input type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(FilterItemTypes.Albums)">
    }
    <label class="PrimaryTextColor" for="albums">Albums</label>

    @if (_selected == FilterItemTypes.Artists)
    {
        <input checked type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(FilterItemTypes.Artists)">
    }
    else
    {
        <input type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(FilterItemTypes.Artists)">
    }
    <label class="PrimaryTextColor" for="artists">Artists</label>


    @if (_selected == FilterItemTypes.Songs)
    {
        <input checked type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(FilterItemTypes.Songs)">
    }
    else
    {
        <input type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(FilterItemTypes.Songs)">
    }
    <label class="PrimaryTextColor" for="songs">Songs</label>

    @* @if (!isFavouritesPage)
        {
            if (selected == Selectable.genres)
            {
                <input checked type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(Selectable.genres)">
            }
            else
            {
                <input type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(Selectable.genres)">
            }
            <label class="PrimaryTextColor" for="genres">Genres</label>
        } *@
</div>

<ListSortToolbar/>

@*<div class="quickplay-container">
        <button class="quickplay-button PageSecondaryColor PrimaryTextColor">Play All</button>
        <div style="width:1rem;" />
        <button class="quickplay-button PageSecondaryColor PrimaryTextColor">Shuffle</button>
    </div>*@


@* Custom styling for items when grid mode is selected *@
@if (showGrid)
{
    <style>
        .album-list {
            width: 100%;
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            grid-gap: 20px 10px;
        }
    </style>
}

<div class="album-list">
    @*  Good morning! So far, so good. Shit is working as it's supposed to be :) :) :) :P'*@
    @if (isLoading)
    {
        <Spinner />
    }
    else
    {
        <Virtualize Context="musicItem" ItemsProvider="LoadListItems" OverscanCount="@overscan" ItemSize="100" @ref="virtualizeComponent">
            <ItemContent>
                <SearchResultItem musicObject="musicItem" />
            </ItemContent>

            <Placeholder>
                @if (_selected == FilterItemTypes.Artists)
                {
                    <SearchResultItem musicObject="Artist.Empty" />
                }
                else
                {
                    <SearchResultItem musicObject="Album.Empty" />
                }
            </Placeholder>

            <EmptyContent>
                <p>
                    There are no items to display.
                </p>
            </EmptyContent>
        </Virtualize>
    }
</div>

@code {
    [Parameter] public string showFavourites { get; set; } = "false";
    private bool isFavouritesPage = false;

    private List<BaseMusicItem> musicData = new();
    private List<BaseMusicItem> viewData = new();
    private string[] placeholderImages = [];
    private int totalRecordCount = 0;
    private bool showGrid = MauiProgram.libraryShowGrid;

    private BaseMusicItem[] musicCache = new BaseMusicItem[0];
    private int totalItems = 0;
    private int overscan = 20;
    private Virtualize<BaseMusicItem>? virtualizeComponent;
    private bool isLoading = false;

    private bool hasData = false;
    private FilterItemTypes _selected = FilterItemTypes.Playlists;
    
    private enum sortMethod
    {
        byArtist,
        byName,
        byActivity
    }
    sortMethod sort = (sortMethod)Enum.ToObject(typeof(sortMethod), MauiProgram.librarySortMethod);

    protected override void OnInitialized()
    {
        MauiProgram.WebView.cancellationSource = new();
        MauiProgram.WebView.cancellationToken = MauiProgram.WebView.cancellationSource.Token;

        if (isFavouritesPage == true)
        {
            MauiProgram.WebView.pageTitle = "Favourites";
            MauiProgram.WebView.currentUri = "/library/true";
        }
        else
        {
            MauiProgram.WebView.pageTitle = "Library";
            MauiProgram.WebView.currentUri = "/library/false";
        }

        MauiProgram.WebView.showHeader = true;
        MauiProgram.WebView.isLoading = false;
    }

    protected override void OnParametersSet()
    {
        // When parameters change (first load or catalogue/fav change)
        hasData = false;
        viewData = new();
        placeholderImages = [];
        isFavouritesPage = Boolean.Parse(showFavourites);
        isLoading = true;
        SelectPage(_selected);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }

        await JS.InvokeAsync<string>("InitAllImages");
        if (hasData)
        {
            MauiProgram.MainPage.ShowLoadingScreen(false);
        }
    }

    public void Dispose()
    {
        if (MauiProgram.libraryDataCToken != null)
        {
            MauiProgram.libraryDataCToken.Cancel();
        }
    }

    private void ToggleSort()
    {
        if (sort >= sortMethod.byActivity)
        {
            sort = 0;
        }
        else
        {
            sort++;
        }
        MauiProgram.librarySortMethod = (int)sort;
    }

    private void ToggleView()
    {
        // electPage(selectedPage);

        showGrid = !showGrid; // toggle
        MauiProgram.libraryShowGrid = showGrid;

        StateHasChanged();
    }

    // Please implement virtualization
    // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/virtualization?view=aspnetcore-8.0
    private async void SelectPage(FilterItemTypes page)
    {
        MauiProgram.libraryItemView = (int)page;
        _selected = page;

        isLoading = true;
        LoadAllListItems();
        StateHasChanged();

        viewData.Clear();
        musicData.Clear();

        if (virtualizeComponent != null)
        {
            await virtualizeComponent.RefreshDataAsync();
        }

        isLoading = false;
        StateHasChanged();
        await JS.InvokeAsync<string>("InitAllImages");
    }

    private async ValueTask<ItemsProviderResult<BaseMusicItem>> LoadListItems(ItemsProviderRequest request)
    {
        int numItems = 0;
        BaseMusicItem[] musicItems = await Task<BaseMusicItem[]>.Run(async () =>
        {
            try
            {
                if (BaseMusicItem.IsNullOrEmpty(musicCache[request.StartIndex]))
                {
                    numItems = Math.Min(request.Count, totalItems - request.StartIndex);

                    System.Diagnostics.Trace.WriteLine($"Reading API {request.StartIndex} to {request.StartIndex + numItems} of total {musicCache.Length}.");

                    return await UpdateBlurhash(await GetSelectedItems(numItems, request.StartIndex, request.CancellationToken).ConfigureAwait(false)).ConfigureAwait(false);
                }
                else
                {
                    System.Diagnostics.Trace.WriteLine($"Reading memory {request.StartIndex} to {request.StartIndex + request.Count} of total {musicCache.Length}.");
                    return await UpdateBlurhash(musicCache.Skip(request.StartIndex).Take(request.Count).ToArray());
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.WriteLine($"Memory Read Failed: {ex.Message} at {ex.StackTrace}");
            }
            return new BaseMusicItem[request.Count];
        });

        await JS.InvokeAsync<string>("InitAllImages");
        await InvokeAsync(() => StateHasChanged());

        hasData = true;
        return new ItemsProviderResult<BaseMusicItem>(musicItems, musicCache.Length);
    }

    private async Task<BaseMusicItem[]> UpdateBlurhash(BaseMusicItem[] musicItems)
    {
        for (int i = 0; i < musicItems.Length; i++)
        {
            BaseMusicItem musicItem = musicItems[i];
            switch (_selected)
            {
                case FilterItemTypes.None:

                    break;
                case FilterItemTypes.Playlists:
                    Playlist playlist = musicItem as Playlist;
                    if (playlist != null)
                    {
                        playlist.ImgBlurhashBase64 = await MusicItemImage.BlurhashToBase64Async(playlist.ImgBlurhash, 10, 10).ConfigureAwait(false);
                        musicItem = playlist;
                    }
                    break;
                case FilterItemTypes.Albums:
                    Album album = musicItem as Album;
                    if (album != null)
                    {
                        album.ImgBlurhashBase64 = await MusicItemImage.BlurhashToBase64Async(album.ImgBlurhash, 10, 10).ConfigureAwait(false);
                        musicItem = album;
                    }
                    break;
                case FilterItemTypes.Artists:
                    Artist artist = musicItem as Artist;
                    if (artist != null)
                    {
                        artist.ImgBlurhashBase64 = await MusicItemImage.BlurhashToBase64Async(artist.ImgBlurhash, 10, 10).ConfigureAwait(false);
                        musicItem = artist;
                    }
                    break;
                case FilterItemTypes.Songs:
                    Song song = musicItem as Song;
                    if (song != null)
                    {
                        song.ImgBlurhashBase64 = await MusicItemImage.BlurhashToBase64Async(song.ImgBlurhash, 10, 10).ConfigureAwait(false);
                        musicItem = song;
                    }
                    break;
                // case Selectable.genres:
                //     GENRES CURRENTLY DISABLED BECAUSE I CANNOT BE FUCKED ATM
                //     results = await MauiProgram.api.GetAllGenresAsync(limit: loadLimit, startIndex: currentStartIndex
                //     break;
                default:

                    break;
            }
            musicItems[i] = musicItem;
        }
        return musicItems;
    }

    private async Task<BaseMusicItem[]> GetSelectedItems(int setLimit, int setStartIndex, CancellationToken cancellationToken)
    {
        switch (_selected)
        {
            case FilterItemTypes.None:
                return Array.Empty<BaseMusicItem>();
            case FilterItemTypes.Playlists:
                return await MauiProgram.api.GetAllPlaylistsAsync(
                limit: setLimit,
                startIndex: setStartIndex,
                sortOrder: SortOrder.Ascending,
                isFavourite: isFavouritesPage,
                cancellactionToken: cancellationToken).ConfigureAwait(false);
            case FilterItemTypes.Albums:
                return await MauiProgram.api.GetAllAlbumsAsync(
                limit: setLimit,
                startIndex: setStartIndex,
                sortOrder: SortOrder.Ascending,
                isFavourite: isFavouritesPage,
                cancellactionToken: cancellationToken).ConfigureAwait(false);
            case FilterItemTypes.Artists:
                return await MauiProgram.api.GetAllArtistsAsync(
                limit: setLimit,
                startIndex: setStartIndex,
                // sortOrder: SortOrder.Ascending,
                isFavourite: isFavouritesPage,
                cancellactionToken: cancellationToken).ConfigureAwait(false);
            case FilterItemTypes.Songs:
                return await MauiProgram.api.GetAllSongsAsync(
                limit: setLimit,
                startIndex: setStartIndex,
                sortOrder: [SortOrder.Ascending],
                isFavourite: isFavouritesPage,
                cancellactionToken: cancellationToken).ConfigureAwait(false);
            // case Selectable.genres:
            //     GENRES CURRENTLY DISABLED BECAUSE I CANNOT BE FUCKED ATM
            //     results = await MauiProgram.api.GetAllGenresAsync(limit: loadLimit, startIndex: currentStartIndex
            //     break;
            default:
                return Array.Empty<BaseMusicItem>();
        }
        return Array.Empty<BaseMusicItem>();
    }

    private async Task<int> GetSelectedTotalItems()
    {
        try
        {
            switch (_selected)
            {
                case FilterItemTypes.None:
                    return 0;
                case FilterItemTypes.Playlists:
                    return await MauiProgram.api.GetTotalPlaylistCount(isFavouritesPage);
                case FilterItemTypes.Albums:
                    return await MauiProgram.api.GetTotalAlbumCount(isFavouritesPage);
                case FilterItemTypes.Artists:
                    return await MauiProgram.api.GetTotalArtistCount(isFavouritesPage);
                case FilterItemTypes.Songs:
                    return await MauiProgram.api.GetTotalSongCount(isFavouritesPage);
                // case Selectable.genres:
                //     GENRES CURRENTLY DISABLED BECAUSE I CANNOT BE FUCKED ATM
                //     results = await MauiProgram.api.GetAllGenresAsync(limit: loadLimit, startIndex: currentStartIndex
                //     break;
                default:
                    return 0;
            }
        }
        catch (Exception)
        {
            return 0;
        }
    }

    private bool LoadAllListItemsDebug = true;
    private async void LoadAllListItems()
    {
        if (MauiProgram.libraryDataCToken == null)
        {
            MauiProgram.libraryDataCToken = new CancellationTokenSource();

            if (LoadAllListItemsDebug) System.Diagnostics.Trace.WriteLine("Creating Data Loader thread!");
            CancellationToken token = MauiProgram.libraryDataCToken.Token;

            Task task = Task.Run(async delegate
            {
                Guid threadID = Guid.NewGuid();

                try
                {

                    bool complete = false;
                    int count = 200;
                    int loopStartIndex = 0;

                    BaseMusicItem[] musicItems = [];
                    totalItems = await GetSelectedTotalItems();
                    // Reset musicCache to new zero;
                    musicCache = new BaseMusicItem[totalItems];
                    while (!complete)
                    {
                        int itemCount = 0;
                        int iCheck = 0;
                        try
                        {
                            musicItems = await GetSelectedItems(count, loopStartIndex, MauiProgram.libraryDataCToken.Token);

                            for (int i = loopStartIndex; i < loopStartIndex + count; i++)
                            {
                                iCheck = i;
                                if (itemCount < musicItems.Length)
                                {
                                    musicCache[i] = musicItems[itemCount];
                                    itemCount++;
                                }
                            }
                            if (LoadAllListItemsDebug) System.Diagnostics.Trace.WriteLine(($"[{threadID}]: Playlists Items Between {loopStartIndex} and {loopStartIndex + count} Collected. Total of {musicCache.Length}."));

                            loopStartIndex += count;
                            token.ThrowIfCancellationRequested();

                            if (musicItems.Length < count)
                            {
                                complete = true;
                                MauiProgram.libraryDataCToken = null;
                            }
                        }
                        catch (Exception ex)
                        {
                            if (LoadAllListItemsDebug) System.Diagnostics.Trace.WriteLine($"[{threadID}]: Data load cancelled!");
                            MauiProgram.libraryDataCToken = null;
                            complete = true;
                        }
                    }
                    if (LoadAllListItemsDebug) System.Diagnostics.Trace.WriteLine($"[{threadID}]: Playlists fully loaded with {musicCache.Length} total!");
                    MauiProgram.libraryDataCToken = null;
                }
                catch (Exception ex)
                {
                    if (LoadAllListItemsDebug) System.Diagnostics.Trace.WriteLine($"[{threadID}]: Data load cancelled: {ex.Message} at {ex.StackTrace}");
                    MauiProgram.libraryDataCToken = null;
                }
            }, token);
            if (LoadAllListItemsDebug) System.Diagnostics.Trace.WriteLine("Data Loader Thread Started in background!");
        }
        else
        {
            await Task.Run(async () =>
            {
                while (MauiProgram.libraryDataCToken != null)
                {
                    await MauiProgram.libraryDataCToken.CancelAsync();
                    if (LoadAllListItemsDebug) System.Diagnostics.Trace.WriteLine("Attempting cancellation!");
                    await Task.Delay(500);
                }
            });
            LoadAllListItems();
        }
    }
}