@page "/library/{showFavourites}"
@using PortaJel_Blazor.Data;
@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using PortaJel_Blazor;
@using BlazorAnimate;
@using Jellyfin.Sdk;
@using Jellyfin.Sdk.Generated.Models;
@using PortaJel_Blazor.Shared;
@using PortaJel_Blazor.Shared.Icons;
@using System.Collections.Concurrent;
@inject IJSRuntime JS;

<div id="libraryToolbar" class="button-container boxed PageSecondaryColor">
    @if (selected == Selectable.playlists)
    {
        <input checked type="radio" id="playlists" name="skills" value="Playlists" @onclick="() => SelectPage(Selectable.playlists)">
    }
    else
    {
        <input type="radio" id="playlists" name="skills" value="Playlists" @onclick="() => SelectPage(Selectable.playlists)">
    }
    <label class="PrimaryTextColor" for="playlists">Playlists</label>

    @if (selected == Selectable.albums)
    {
        <input checked type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(Selectable.albums)">
    }
    else
    {
        <input type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(Selectable.albums)">
    }
    <label class="PrimaryTextColor" for="albums">Albums</label>

    @if (selected == Selectable.artists)
    {
        <input checked type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(Selectable.artists)">
    }
    else
    {
        <input type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(Selectable.artists)">
    }
    <label class="PrimaryTextColor" for="artists">Artists</label>


    @if (selected == Selectable.songs)
    {
        <input checked type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(Selectable.songs)">
    }
    else
    {
        <input type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(Selectable.songs)">
    }
    <label class="PrimaryTextColor" for="songs">Songs</label>

    @* @if (!isFavouritesPage)
        {
            if (selected == Selectable.genres)
            {
                <input checked type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(Selectable.genres)">
            }
            else
            {
                <input type="radio" id="genres" name="skills" value="Genres" @onclick="() => SelectPage(Selectable.genres)">
            }
            <label class="PrimaryTextColor" for="genres">Genres</label>
        } *@
</div>

@*<div class="quickplay-container">
        <button class="quickplay-button PageSecondaryColor PrimaryTextColor">Play All</button>
        <div style="width:1rem;" />
        <button class="quickplay-button PageSecondaryColor PrimaryTextColor">Shuffle</button>
    </div>*@

<div class="tool-container">
    <div @onclick=ToggleSort>
        @switch (sort)
        {
            case sortMethod.byActivity:
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                    <p class="tools-text PrimaryTextColor">Activity</p>
                </Animate>
                break;
            case sortMethod.byArtist:
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                    <p class="tools-text PrimaryTextColor">Artist</p>
                </Animate>
                break;
            case sortMethod.byName:
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <SortTypeIcon ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
                    <p class="tools-text PrimaryTextColor">Name</p>
                </Animate>
                break;
        }
    </div>
    <div @onclick=ToggleView>
        @if (showGrid)
        {
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                <ListViewIcon IsGrid=@showGrid ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
            </Animate>
        }
        else
        {
            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                <ListViewIcon IsGrid=@showGrid ExtraStyle="width: 1.75rem; height: 1.75rem; user-select: none; cursor: pointer;" />
            </Animate>
        }
    </div>
</div>

@* Custom styling for items when grid mode is selected *@
@if (showGrid)
{
    <style>
        .album-list {
            width: 100%;
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            grid-gap: 20px 10px;
        }
    </style>
}

<div class="album-list">
    @*  Good morning! So far, so good. Shit is working as it's supposed to be :) :) :) :P'*@
    @if (isLoading)
    {
        <Spinner />
    }
    else
    {
        <Virtualize Context="musicItem" ItemsProvider="LoadListItems" OverscanCount="@overscan" ItemSize="100" @ref="virtualizeComponent">
            <ItemContent>
                <SearchResultItem musicObject="musicItem" />
            </ItemContent>

            <Placeholder>
                @if (selected == Selectable.artists)
                {
                    <SearchResultItem musicObject="Artist.Empty" />
                }
                else
                {
                    <SearchResultItem musicObject="Album.Empty" />
                }
            </Placeholder>

            <EmptyContent>
                <p>
                    There are no items to display.
                </p>
            </EmptyContent>
        </Virtualize>
    }
</div>

@code {
    [Parameter] public string showFavourites { get; set; } = "false";
    private bool isFavouritesPage = false;

    private List<BaseMusicItem> musicData = new();
    private List<BaseMusicItem> viewData = new();
    private string[] placeholderImages = [];
    private int totalRecordCount = 0;
    private bool showGrid = MauiProgram.libraryShowGrid;

    private ConcurrentDictionary<int, BaseMusicItem> musicCache = new();
    private int totalItems = 0;
    private int overscan = 20;

    private Virtualize<BaseMusicItem>? virtualizeComponent;
    private bool isLoading = false;

    private bool hasData = false;

    private enum Selectable
    {
        playlists,
        albums,
        artists,
        songs,
        genres,
        none
    }
    Selectable selected = (Selectable)Enum.ToObject(typeof(Selectable), MauiProgram.libraryItemView);
    Selectable queued = Selectable.none;

    private enum sortMethod
    {
        byArtist,
        byName,
        byActivity
    }
    sortMethod sort = (sortMethod)Enum.ToObject(typeof(sortMethod), MauiProgram.librarySortMethod);

    protected override void OnInitialized()
    {
        MauiProgram.WebView.cancellationSource = new();
        MauiProgram.WebView.cancellationToken = MauiProgram.WebView.cancellationSource.Token;

        if (isFavouritesPage == true)
        {
            MauiProgram.WebView.pageTitle = "Favourites";
            MauiProgram.WebView.currentUri = "/library/true";
        }
        else
        {
            MauiProgram.WebView.pageTitle = "Library";
            MauiProgram.WebView.currentUri = "/library/false";
        }

        MauiProgram.WebView.showHeader = true;
        MauiProgram.WebView.isLoading = false;
    }

    protected override void OnParametersSet()
    {
        // When parameters change (first load or catalogue/fav change)
        hasData = false;
        viewData = new();
        placeholderImages = [];
        isFavouritesPage = Boolean.Parse(showFavourites);
        isLoading = true;
        SelectPage(selected);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }

        await JS.InvokeAsync<string>("InitAllImages");
        if (hasData)
        {
            MauiProgram.MainPage.ShowLoadingScreen(false);
        }
    }

    private void ToggleSort()
    {
        if (sort >= sortMethod.byActivity)
        {
            sort = 0;
        }
        else
        {
            sort++;
        }
        MauiProgram.librarySortMethod = (int)sort;
    }

    private void ToggleView()
    {
        // electPage(selectedPage);

        showGrid = !showGrid; // toggle
        MauiProgram.libraryShowGrid = showGrid;

        StateHasChanged();
    }

    // Please implement virtualization
    // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/virtualization?view=aspnetcore-8.0
    private async void SelectPage(Selectable page)
    {
        LoadAllListItems();

        MauiProgram.libraryItemView = (int)page;
        selected = page;

        isLoading = true;
        StateHasChanged();

        viewData.Clear();
        musicData.Clear();



        if (virtualizeComponent != null)
        {
            await virtualizeComponent.RefreshDataAsync();
            await Task.Delay(50);

        }
        isLoading = false;
        StateHasChanged();
        await JS.InvokeAsync<string>("InitAllImages");
    }

    private async ValueTask<ItemsProviderResult<BaseMusicItem>> LoadListItems(ItemsProviderRequest request)
    {
        int totalItems = 0;
        int numItems = 0;
        BaseMusicItem[] musicItems = [];
        overscan = 20;

        totalItems = musicCache.Count;
        numItems = Math.Min(request.Count, totalItems - request.StartIndex);
        MauiProgram.UpdateDebugMessage($"Reading memory {request.StartIndex} to {request.StartIndex + numItems} of total {totalItems}.");

        musicItems = musicCache.Values.Skip(request.StartIndex).Take(numItems).ToArray();

        //musicItems = await MauiProgram.api.GetAllAlbumsAsync(
        //limit: numItems,
        //startIndex: request.StartIndex,
        //sortOrder: SortOrder.Ascending,
        //isFavourite: isFavouritesPage,
        //cancellactionToken: request.CancellationToken);

        await Parallel.ForEachAsync(musicItems, async (musicItem, ct) =>
        {
            switch (selected)
            {
                case Selectable.none:

                    break;
                case Selectable.playlists:
                    Playlist playlist = musicItem as Playlist;
                    if (playlist != null)
                    {
                        playlist.ImgBlurhashBase64 = await MusicItemImage.BlurhashToBase64Async(playlist.ImgBlurhash, 20, 20).ConfigureAwait(false);
                        musicItem = playlist;
                    }
                    break;
                case Selectable.albums:
                    Album album = musicItem as Album;
                    if (album != null)
                    {
                        album.ImgBlurhashBase64 = await MusicItemImage.BlurhashToBase64Async(album.ImgBlurhash, 20, 20).ConfigureAwait(false);
                        musicItem = album;
                    }
                    break;
                case Selectable.artists:
                    Artist artist = musicItem as Artist;
                    if (artist != null)
                    {
                        artist.ImgBlurhashBase64 = await MusicItemImage.BlurhashToBase64Async(artist.ImgBlurhash, 20, 20).ConfigureAwait(false);
                        musicItem = artist;
                    }
                    break;
                case Selectable.songs:
                    Song song = musicItem as Song;
                    if (song != null)
                    {
                        song.ImgBlurhashBase64 = await MusicItemImage.BlurhashToBase64Async(song.ImgBlurhash, 20, 20).ConfigureAwait(false);
                        musicItem = song;
                    }
                    break;
                // case Selectable.genres:
                //     GENRES CURRENTLY DISABLED BECAUSE I CANNOT BE FUCKED ATM
                //     results = await MauiProgram.api.GetAllGenresAsync(limit: loadLimit, startIndex: currentStartIndex
                //     break;
                default:

                    break;
            }
        });
        await JS.InvokeAsync<string>("InitAllImages");
        StateHasChanged();
        hasData = true;
        return new ItemsProviderResult<BaseMusicItem>(musicItems, totalItems);
    }

    private async void LoadAllListItems()
    {
        if (MauiProgram.libraryDataCToken == null)
        {
            MauiProgram.libraryDataCToken = new CancellationTokenSource();

            System.Diagnostics.Trace.WriteLine("Creating Data Loader thread!");
            CancellationToken token = MauiProgram.libraryDataCToken.Token;

            Task task = Task.Run(async delegate
            {
                Guid threadID = Guid.NewGuid();
                musicCache.Clear();

                bool complete = false;
                int count = 20;
                int loopStartIndex = 0;

                BaseMusicItem[] musicItems = [];
                switch (selected)
                {
                    case Selectable.none:

                        break;
                    case Selectable.playlists:
                        totalItems = await MauiProgram.api.GetTotalPlaylistCount(isFavouritesPage);
                        while (!complete)
                        {
                            try
                            {
                                int numItems = Math.Min(count, totalItems - loopStartIndex);
                                musicItems = await MauiProgram.api.GetAllPlaylistsAsync(
                                limit: count,
                                startIndex: loopStartIndex,
                                sortOrder: SortOrder.Ascending,
                                isFavourite: isFavouritesPage,
                                cancellactionToken: token);

                                int addIndex = loopStartIndex;
                                foreach (var item in musicItems)
                                {
                                    musicCache.TryAdd(addIndex, item);
                                    addIndex++;
                                }

                                System.Diagnostics.Trace.WriteLine(($"[{threadID}]: Playlists Collected {musicCache.Count}"));

                                loopStartIndex += count;
                                token.ThrowIfCancellationRequested();

                                if (musicItems.Length < count)
                                {
                                    complete = true;
                                    MauiProgram.libraryDataCToken = null;
                                }
                            }
                            catch (Exception)
                            {
                                System.Diagnostics.Trace.WriteLine($"[{threadID}]: Data load cancelled!");
                                MauiProgram.libraryDataCToken = null;
                                complete = true;
                            }
                        }
                        System.Diagnostics.Trace.WriteLine($"[{threadID}]: Playlists fully loaded with {musicCache.Count} total!");
                        MauiProgram.libraryDataCToken = null;
                        break;
                    case Selectable.albums:
                        totalItems = await MauiProgram.api.GetTotalAlbumCount(isFavouritesPage);
                        while (!complete)
                        {
                            try
                            {
                                int numItems = Math.Min(count, totalItems - loopStartIndex);
                                musicItems = await MauiProgram.api.GetAllAlbumsAsync(
                                limit: count,
                                startIndex: loopStartIndex,
                                sortOrder: SortOrder.Ascending,
                                isFavourite: isFavouritesPage,
                                cancellactionToken: token);

                                int addIndex = loopStartIndex;
                                foreach (var item in musicItems)
                                {
                                    musicCache.TryAdd(addIndex, item);
                                    addIndex++;
                                }

                                System.Diagnostics.Trace.WriteLine(($"[{threadID}]: Albums Collected {musicCache.Count}"));

                                loopStartIndex += count;
                                token.ThrowIfCancellationRequested();

                                if (musicItems.Length < count)
                                {
                                    complete = true;
                                    MauiProgram.libraryDataCToken = null;
                                }
                            }
                            catch (Exception)
                            {
                                System.Diagnostics.Trace.WriteLine($"[{threadID}]: Data load cancelled!");
                                MauiProgram.libraryDataCToken = null;
                                complete = true;
                            }
                        }
                        System.Diagnostics.Trace.WriteLine($"[{threadID}]: Albums fully loaded with {musicCache.Count} total!");
                        MauiProgram.libraryDataCToken = null;
                        break;
                    case Selectable.artists:
                        totalItems = await MauiProgram.api.GetTotalArtistCount(isFavouritesPage);
                        while (!complete)
                        {
                            try
                            {
                                int numItems = Math.Min(count, totalItems - loopStartIndex);
                                musicItems = await MauiProgram.api.GetAllArtistsAsync(
                                limit: count,
                                startIndex: loopStartIndex,
                                // sortOrder: SortOrder.Ascending,
                                isFavourite: isFavouritesPage,
                                cancellactionToken: token);

                                int addIndex = loopStartIndex;
                                foreach (var item in musicItems)
                                {
                                    musicCache.TryAdd(addIndex, item);
                                    addIndex++;
                                }

                                System.Diagnostics.Trace.WriteLine(($"[{threadID}]: Artists Collected {musicCache.Count}"));

                                loopStartIndex += count;
                                token.ThrowIfCancellationRequested();

                                if (musicItems.Length < count)
                                {
                                    complete = true;
                                    MauiProgram.libraryDataCToken = null;
                                }
                            }
                            catch (Exception)
                            {
                                System.Diagnostics.Trace.WriteLine($"[{threadID}]: Data load cancelled!");
                                MauiProgram.libraryDataCToken = null;
                                complete = true;
                            }
                        }
                        System.Diagnostics.Trace.WriteLine($"[{threadID}]: Artists fully loaded with {musicCache.Count} total!");
                        MauiProgram.libraryDataCToken = null;
                        break;
                    case Selectable.songs:
                        totalItems = await MauiProgram.api.GetTotalSongCount(isFavouritesPage);
                        while (!complete)
                        {
                            try
                            {
                                int numItems = Math.Min(count, totalItems - loopStartIndex);
                                musicItems = await MauiProgram.api.GetAllSongsAsync(
                                limit: count,
                                startIndex: loopStartIndex,
                                sortOrder: [SortOrder.Ascending],
                                isFavourite: isFavouritesPage,
                                cancellactionToken: token);

                                int addIndex = loopStartIndex;
                                foreach (var item in musicItems)
                                {
                                    musicCache.TryAdd(addIndex, item);
                                    addIndex++;
                                }

                                System.Diagnostics.Trace.WriteLine(($"[{threadID}]: Songs Collected {musicCache.Count}"));

                                loopStartIndex += count;
                                token.ThrowIfCancellationRequested();

                                if (musicItems.Length < count)
                                {
                                    complete = true;
                                }
                            }
                            catch (Exception)
                            {
                                System.Diagnostics.Trace.WriteLine($"[{threadID}]: Data load cancelled!");
                                MauiProgram.libraryDataCToken = null;
                                complete = true;
                            }
                        }
                        System.Diagnostics.Trace.WriteLine($"[{threadID}]: Songs fully loaded with {musicCache.Count} total!");
                        MauiProgram.libraryDataCToken = null;
                        break;
                    // case Selectable.genres:
                    //     GENRES CURRENTLY DISABLED BECAUSE I CANNOT BE FUCKED ATM
                    //     results = await MauiProgram.api.GetAllGenresAsync(limit: loadLimit, startIndex: currentStartIndex
                    //     break;
                    default:

                        break;
                }
            }, token);
            System.Diagnostics.Trace.WriteLine("Data Loader Thread Started in background!");
        }
        else
        {
            await Task.Run(async () =>
            {
                while (MauiProgram.libraryDataCToken != null)
                {
                    await MauiProgram.libraryDataCToken.CancelAsync();
                    System.Diagnostics.Trace.WriteLine("Attempting cancellation!");
                    await Task.Delay(500);
                }
            });
            LoadAllListItems();
        }
    }
}