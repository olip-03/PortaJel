@using PortaJel_Blazor.Classes;
@using Microsoft.Maui.Controls;
@using PortaJel_Blazor.Shared;
@using PortaJel_Blazor.Pages.Xaml;
@using BlazorAnimate;
@page "/settings"

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
    <!-- Settings for connecting to a Jellyfin server -->
    <div>
        <div class="header">
            <div class="title">Connections</div>
            <button class="add-button" @onclick=AddConnection>Add</button>
        </div>

        @foreach (var serverConnector in MauiProgram.api.GetServers())
        {
            <div class="connection-container">
                <div class="connection-details">
                    <div class="user-profile">
                        <img class="user-profile-img" src="@serverConnector.GetProfileImage()" onerror="this.src='/images/avatar.png'" />
                    </div>
                    <div>
                        <div class="user-profile-name">@serverConnector.GetUsername()</div>
                        <div class="user-profile-connection">@serverConnector.GetBaseAddress()</div>
                    </div>
                </div>
                <button class="remove-button" @onclick="() => DeleteConnection(serverConnector.GetBaseAddress())">Remove</button>
            </div>
        }
        @if (!MauiProgram.isConnected)
        {
            <button class="reconnect-button">Reconnect</button>
        }
    </div>

    <!-- Favourites Settings -->
    <div>
        <div class="header">
            <div class="title">Favourites</div>
        </div>

        <!-- Hide M3U Playlists -->
        <div class="header">
            <div class="checkbox-wrapper-22">
                <label class="switch" for="checkbox">
                    <input type="checkbox" id="checkbox" @bind="hidem3u" />
                    <div class="slider round"></div>
                </label>
            </div>

            <p>Hide .m3u files in Playlists</p>
        </div>
    </div>
</Animate>

@code {
    string cacheDir = FileSystem.Current.CacheDirectory;
    AppTheme currentTheme = AppTheme.Unspecified;

    public bool hidem3u
    {
        get { return MauiProgram.hideM3u; }
        set { MauiProgram.hideM3u = value; }
    }

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.webView.pageTitle = "Settings";
        MauiProgram.webView.currentUri = "/settings";
        MauiProgram.webView.showHeader = true;

        MauiProgram.webView.isLoading = false;
        MauiProgram.mainPage.ShowLoadingScreen(false);
    }

    private async void DeleteConnection(string srv)
    {
        if(MauiProgram.api.GetServers().Count() <= 1)
        {
            if (App.Current != null && App.Current.MainPage != null)
            { // fuck i am so sick of these null reference checks
                bool answer = await App.Current.MainPage.DisplayAlert("Warning?", "This is your only current connection, removing it will not allow you to access online content.", "Delete", "Cancel");
                if (answer == false)
                {
                    return;
                }
            }
        }
        else
        {
            if (App.Current != null && App.Current.MainPage != null)
            { // fuck i am so sick of these null reference checks
                bool answer = await App.Current.MainPage.DisplayAlert("Warning?", $"Are you sure you want to remove {srv}?", "Yes", "No");
                if (answer == false)
                {
                    return;
                }
            }
        }
        MauiProgram.RemoveServer(srv);
        StateHasChanged();
    }

    private async void AddConnection()
    {
        AddServerView addServerView = new();
        await MauiProgram.mainPage.PushModalAsync(addServerView);
        await Task.Run(() => addServerView.AwaitClose(addServerView));

        // TODO: Save all the data again

        StateHasChanged();
    }
}
