@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.Shared.Resources;
@using BlazorAnimate;
@page "/favourites"

<div>
    <div class="button-container">
        @* this sucks this suck this sucks this sucks I KNOW this fucking sucks
            but I am FAR too lazy and tired to implement something with css right
            now.
        *@
        @if (selected == selectable.playlists)
        {
            <div class="filter-button selected">Playlists</div>
        }
        else
        {
            <div class="filter-button" @onclick=SelectPlaylist>Playlists</div>
        }
        @if (selected == selectable.albums)
        {
            <div class="filter-button selected">Albums</div>
        }
        else
        {
            <div class="filter-button" @onclick=SelectAlbums>Albums</div>
        }
        @if (selected == selectable.artists)
        {
            <div class="filter-button selected">Artists</div>
        }
        else
        {
            <div class="filter-button" @onclick=SelectArtists>Artists</div>
        }
        @if (selected == selectable.songs)
        {
            <div class="filter-button selected">Songs</div>
        }
        else
        {
            <div class="filter-button" @onclick=SelectSongs>Songs</div>
        }
        <!-- Add more buttons here as needed -->
    </div>

    <div class="tool-container">
        <div @onclick=ToggleSort>
            @switch (sort)
            {
                case sortMethod.byActivity:
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                        <p class="tools-text">Activity</p>
                    </Animate>
                    break;
                case sortMethod.byArtist:
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                        <p class="tools-text">Artist</p>
                    </Animate>
                    break;
                case sortMethod.byName:
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                        <p class="tools-text">Name</p>
                    </Animate>
                    break;
            }
        </div>
        <div @onclick=ToggleView>
            @if (showGrid)
            {
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <img src="/images/gridview.svg" alt="Grid Icon" class="tools-icon" />
                </Animate>
            }
            else
            {
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <img src="/images/listview.svg" alt="Grid Icon" class="tools-icon" />
                </Animate>
            }
        </div>
    </div>

    <div class="album-list">
        @if (isLoading)
        { // Spinner
            <Spinner />
        }
        else if (data.Length > 0)
        { // Load information
            // If playlist, add option to create new
            @if (selected == selectable.playlists)
            {
                Album dummyItem = new Album();
                dummyItem.imageSrc = "/images/emptyAlbum.png";
                dummyItem.name = "New Album";
                <PortaJel_Blazor.UI.Search.SearchResultItem album="@dummyItem" />
            }
            for (int i = 0; i < data.Length; i++)
            {
                Album item = new Album();
                if(data[i] != null)
                {
                    item = data[i];
                }
                <PortaJel_Blazor.UI.Search.SearchResultItem album="@item"/>
            }
        }
        else
        { // something went wrong click here to try again

        }
    </div>
</div>

@code {
    private Album[] data = new Album[20];
    private int totalRecordCount = 0;
    private bool isLoading = false;

    private bool showGrid = MauiProgram.favouritesShowGrid;

    private int itemsPerPage = 100;
    private int startFromIndex = 0;
    private int selectedPage = 0;
    private int pages = 0;

    private int lowerPages = 0;
    private int higherPages = 0;

    private enum selectable
    {
        albums,
        artists,
        songs,
        playlists
    }
    selectable selected = (selectable)Enum.ToObject(typeof(selectable), MauiProgram.favouritesItemView);

    private enum sortMethod
    {
        byArtist,
        byName,
        byActivity
    }
    sortMethod sort = (sortMethod)Enum.ToObject(typeof(sortMethod), MauiProgram.favouritesSortMethod);

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.mainLayout.pageTitle = "Favourites";
        MauiProgram.mainLayout.currentUri = "/favourites";
        MauiProgram.mainLayout.showHeader = true;
        MauiProgram.mainLayout.isLoading = false;

        selected = (selectable)Enum.ToObject(typeof(selectable), MauiProgram.favouritesItemView);
        switch (selected)
        {
            case selectable.albums:
                SelectAlbums();
                break;
            case selectable.artists:
                SelectArtists();
                break;
            case selectable.songs:
                SelectSongs();
                break;
            case selectable.playlists:
                SelectPlaylist();
                break;
        }
    }

    private void ToggleSort()
    {
        if (sort >= sortMethod.byActivity)
        {
            sort = 0;
        }
        else
        {
            sort++;
        }
        MauiProgram.favouritesSortMethod = (int)sort;
    }
    private void ToggleView()
    {
        showGrid = !showGrid; // toggle
        MauiProgram.favouritesShowGrid = showGrid;
    }
    private async void SelectAlbums()
    {
        if (selected != selectable.albums)
        {
            startFromIndex = 0;
            selectedPage = 0;
        }

        isLoading = true;
        selected = selectable.albums;
        MauiProgram.favouritesItemView = (int)selected;

        // Fetch Album information
        if (MauiProgram.favouriteAlbums.Count <= 0)
        {
            data = await MauiProgram.servers[0].GetAlbumsAsync(limit: itemsPerPage, startFromIndex: startFromIndex, favourites: true);
            totalRecordCount = await MauiProgram.servers[0].GetTotalAlbumCount();
            MauiProgram.favouriteAlbums = data.ToList();
        }
        else
        {
            data = MauiProgram.favouriteAlbums.ToArray();
        }

        double number = (double)totalRecordCount / (double)itemsPerPage;
        int roundedNumber = (int)Math.Ceiling(number);
        pages = roundedNumber;

        isLoading = false;
        startFromIndex = 0;
        StateHasChanged();
    }
    private async void SelectArtists()
    {
        if (selected != selectable.artists)
        {
            startFromIndex = 0;
            selectedPage = 0;
        }

        isLoading = true;
        selected = selectable.artists;
        MauiProgram.favouritesItemView = (int)selected;

        // Fetch Artist information
        if (MauiProgram.favouriteArtist.Count <= 0)
        {
            data = await MauiProgram.servers[0].GetAllArtistsAsync(limit: itemsPerPage, startFromIndex: startFromIndex, favourites: true);
            totalRecordCount = await MauiProgram.servers[0].GetTotalArtistCount();
        }
        else
        {
            data = MauiProgram.favouriteArtist.ToArray();
        }

        double number = (double)totalRecordCount / (double)itemsPerPage;
        int roundedNumber = (int)Math.Ceiling(number);
        pages = roundedNumber;

        isLoading = false;
        startFromIndex = 1;
        StateHasChanged();
    }
    private async void SelectSongs()
    {
        if (selected != selectable.artists)
        {
            startFromIndex = 0;
            selectedPage = 0;
        }

        isLoading = true;
        selected = selectable.songs;
        MauiProgram.favouritesItemView = (int)selected;

        // Fetch Artist information
        if (MauiProgram.favouriteSongs.Count <= 0)
        {
            data = await MauiProgram.servers[0].GetAllSongsAsync(limit: itemsPerPage, startFromIndex: startFromIndex, favourites: true);
            totalRecordCount = await MauiProgram.servers[0].GetTotalSongCount();
        }
        else
        {
            data = MauiProgram.favouriteSongs.ToArray();
        }

        double number = (double)totalRecordCount / (double)itemsPerPage;
        int roundedNumber = (int)Math.Ceiling(number);
        pages = roundedNumber;

        isLoading = false;
        startFromIndex = 1;
        StateHasChanged();
    }
    private void SelectPlaylist()
    {
        selected = selectable.playlists;
        MauiProgram.favouritesItemView = (int)selected;
    }
}
