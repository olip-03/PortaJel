@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.Shared.Resources;
@using BlazorAnimate;
@inject IJSRuntime JS;
@page "/favourites"

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
    <div>
        <div class="button-container boxed">
            @if (selected == PlaylistSelectable.playlists)
            {
                <input checked type="radio" id="playlists" name="skills" value="Playlists" @onclick="() => SelectPage(PlaylistSelectable.playlists)">
            }
            else
            {
                <input type="radio" id="playlists" name="skills" value="Playlists" @onclick="() => SelectPage(PlaylistSelectable.playlists)">
            }
            <label for="playlists">Playlists</label>

            @if (selected == PlaylistSelectable.albums)
            {
                <input checked type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(PlaylistSelectable.albums)">
            }
            else
            {
                <input type="radio" id="albums" name="skills" value="Albums" @onclick="() => SelectPage(PlaylistSelectable.albums)">
            }
            <label for="albums">Albums</label>

            @if (selected == PlaylistSelectable.artists)
            {
                <input checked type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(PlaylistSelectable.artists)">
            }
            else
            {
                <input type="radio" id="artists" name="skills" value="Artists" @onclick="() => SelectPage(PlaylistSelectable.artists)">
            }
            <label for="artists">Artists</label>

            @if (selected == PlaylistSelectable.songs)
            {
                <input checked type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(PlaylistSelectable.songs)">
            }
            else
            {
                <input type="radio" id="songs" name="skills" value="Songs" @onclick="() => SelectPage(PlaylistSelectable.songs)">
            }
            <label for="songs">Songs</label>
        </div>

        <div class="quickplay-container">
            @if (selected == PlaylistSelectable.playlists)
            {
                <button class="quickplay-button">New Playlist</button>
            }
            else
            {
                <button class="quickplay-button">Play All</button>
                <div style="width:1rem;" />
                <button class="quickplay-button">Shuffle</button>
            }
        </div>

        <div class="tool-container">
            <div @onclick=ToggleSort>
                @switch (sort)
                {
                    case sortMethod.byActivity:
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                            <p class="tools-text">Activity</p>
                        </Animate>
                        break;
                    case sortMethod.byArtist:
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                            <p class="tools-text">Artist</p>
                        </Animate>
                        break;
                    case sortMethod.byName:
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                            <p class="tools-text">Name</p>
                        </Animate>
                        break;
                }
            </div>
            <div @onclick=ToggleView>
                @if (showGrid)
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img src="/images/gridview.svg" alt="Grid Icon" class="tools-icon" />
                    </Animate>
                }
                else
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img src="/images/listview.svg" alt="Grid Icon" class="tools-icon" />
                    </Animate>
                }
            </div>
        </div>

        <div class="album-list">
            @if (isLoading)
            { // Spinner
                <Spinner />
            }
            else if (data != null)
            {
                <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                    @if (data.Length > 0)
                    { // Load information
                        for (int i = 0; i < data.Length; i++)
                        {
                            if (i < placeholderImages.Length)
                            {
                                <PortaJel_Blazor.UI.Search.SearchResultItem musicObject="@data[i]" isGrid="@showGrid" placeholderBase64="@placeholderImages[i]" />
                            }
                            else
                            {
                                <PortaJel_Blazor.UI.Search.SearchResultItem musicObject="@data[i]" isGrid="@showGrid"/>
                            }
                        }
                    }
                </Animate>
            }
        </div>
    </div>
</Animate>

@code {
    private BaseMusicItem[]? data = new Album[192009387];
    private string[] placeholderImages = new string[0];
    private int totalRecordCount = 0;
    private bool isLoading = false;

    private bool showGrid = MauiProgram.favouritesShowGrid;
    private bool isPlaylist = false;

    private int itemsPerPage = 100;
    private int startFromIndex = 0;
    private int selectedPage = 0;
    private int pages = 0;

    private int lowerPages = 0;
    private int higherPages = 0;

    private enum PlaylistSelectable
    {
        playlists,
        albums,
        artists,
        songs,
        none
    }
    PlaylistSelectable selected = (PlaylistSelectable)Enum.ToObject(typeof(PlaylistSelectable), MauiProgram.favouritesItemView);
    PlaylistSelectable queued = PlaylistSelectable.none;

    private enum sortMethod
    {
        byArtist,
        byName,
        byActivity
    }
    sortMethod sort = (sortMethod)Enum.ToObject(typeof(sortMethod), MauiProgram.favouritesSortMethod);

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.mainLayout.pageTitle = "Favourites";
        MauiProgram.mainLayout.currentUri = "/favourites";
        MauiProgram.mainLayout.showHeader = true;

        return;

        MauiProgram.mainLayout.cancellationSource = new();
        MauiProgram.mainLayout.cancellationToken = MauiProgram.mainLayout.cancellationSource.Token;

        selected = (PlaylistSelectable)Enum.ToObject(typeof(PlaylistSelectable), MauiProgram.favouritesItemView);
        SelectPage(selected);

        await Task.Run(() => { Thread.Sleep(250); });
        MauiProgram.mainLayout.isLoading = false;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeAsync<string>("InitAllImages");
    }
    private void ToggleSort()
    {
        if (sort >= sortMethod.byActivity)
        {
            sort = 0;
        }
        else
        {
            sort++;
        }
        MauiProgram.favouritesSortMethod = (int)sort;
    }
    private void ToggleView()
    {
        showGrid = !showGrid; // toggle
        MauiProgram.favouritesShowGrid = showGrid;
    }
    private async void SelectPage(PlaylistSelectable page)
    {
        selected = page;
        MauiProgram.favouritesItemView = (int)page;

        if (isLoading)
        { // Still waiting for previous iteration to complete
          // Call cancellation token
          // Add this bitch to the queue
            queued = page;
            return;
        }

        isLoading = true;
        await InvokeAsync(StateHasChanged);

        await Task.Run(async () =>
        {
            bool isCompleted = false;
            while (!isCompleted)
            {
                switch (page)
                {
                    case PlaylistSelectable.none:
                        data = new BaseMusicItem[0];
                        break;
                    case PlaylistSelectable.playlists:
                        data = await MauiProgram.api.GetAllPlaylistsAsync(limit: 50);
                        break;
                    case PlaylistSelectable.albums:
                        data = await MauiProgram.api.GetAllAlbumsAsync(limit: 50, isFavourite: true);
                        break;
                    case PlaylistSelectable.artists:
                        data = await MauiProgram.api.GetAllArtistsAsync(limit: 50, isFavourite: true);
                        break;
                    case PlaylistSelectable.songs:
                        data = await MauiProgram.api.GetAllSongsAsync(limit: 50, isFavourite: true);
                        break;
                    default:
                        data = new BaseMusicItem[0];
                        break;
                }

                placeholderImages = new string[data.Length];
                for (int i = 0; i < data.Length; i++)
                {
                    try
                    {
                        placeholderImages[i] = await data[i].image.BlurhashToBase64Async(20, 20);
                    }
                    catch (Exception)
                    {
                        placeholderImages[i] = string.Empty;
                    }
                }

                if (queued != PlaylistSelectable.none)
                {
                    page = queued;
                    queued = PlaylistSelectable.none;
                    continue;
                }

                isCompleted = true;
            }
        });

        isLoading = false;
        try
        {
            await InvokeAsync(StateHasChanged);
            await JS.InvokeAsync<string>("InitAllImages");
        }
        catch (Exception)
        {
            // We're cool just chill            
        }
    }
}
