@using PortaJel_Blazor.Data;
@using PortaJel_Blazor.Shared.Resources;
@using BlazorAnimate;
@page "/favourites"

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
    <div>
        <div class="button-container">
            @* this sucks this suck this sucks this sucks I KNOW this fucking sucks
            but I am FAR too lazy and tired to implement something with css right
            now.
            *@
            @if (selected == PlaylistSelectable.playlists)
            {
                <div class="filter-button selected">Playlists</div>
            }
            else
            {
                <div class="filter-button" @onclick=SelectPlaylist>Playlists</div>
            }
            @if (selected == PlaylistSelectable.albums)
            {
                <div class="filter-button selected">Albums</div>
            }
            else
            {
                <div class="filter-button" @onclick=SelectAlbums>Albums</div>
            }
            @if (selected == PlaylistSelectable.artists)
            {
                <div class="filter-button selected">Artists</div>
            }
            else
            {
                <div class="filter-button" @onclick=SelectArtists>Artists</div>
            }
            @if (selected == PlaylistSelectable.songs)
            {
                <div class="filter-button selected">Songs</div>
            }
            else
            {
                <div class="filter-button" @onclick=SelectSongs>Songs</div>
            }
            <!-- Add more buttons here as needed -->
        </div>

        <div class="tool-container">
            <div @onclick=ToggleSort>
                @switch (sort)
                {
                    case sortMethod.byActivity:
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                            <p class="tools-text">Activity</p>
                        </Animate>
                        break;
                    case sortMethod.byArtist:
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                            <p class="tools-text">Artist</p>
                        </Animate>
                        break;
                    case sortMethod.byName:
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <img src="/images/sort.svg" alt="Sort Icon" class="tools-icon" />
                            <p class="tools-text">Name</p>
                        </Animate>
                        break;
                }
            </div>
            <div @onclick=ToggleView>
                @if (showGrid)
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img src="/images/gridview.svg" alt="Grid Icon" class="tools-icon" />
                    </Animate>
                }
                else
                {
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                        <img src="/images/listview.svg" alt="Grid Icon" class="tools-icon" />
                    </Animate>
                }
            </div>
        </div>

        <div class="album-list">
            @if (isLoading)
            { // Spinner
                <Spinner />
            }
            else if (data != null)
            {
                <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.5)">
                    <div class="quickplay-container">
                        @if (selected == PlaylistSelectable.playlists)
                        {
                            <button class="quickplay-button">New Playlist</button>
                        }
                        else
                        {
                            <button class="quickplay-button">Play All</button>
                            <div style="width:1rem;" />
                            <button class="quickplay-button">Shuffle</button>
                        }
                    </div>

                    @if (data.Length > 0)
                    { // Load information
                        for (int i = 0; i < data.Length; i++)
                        {
                            <PortaJel_Blazor.UI.Search.SearchResultItem musicObject="@data[i]" isGrid="@showGrid" />
                        }
                    }
                </Animate>
            }
        </div>
    </div>
</Animate>

@code {
    private BaseMusicItem[]? data = new Album[20];
    private int totalRecordCount = 0;
    private bool isLoading = false;

    private bool showGrid = MauiProgram.favouritesShowGrid;
    private bool isPlaylist = false;

    private int itemsPerPage = 100;
    private int startFromIndex = 0;
    private int selectedPage = 0;
    private int pages = 0;

    private int lowerPages = 0;
    private int higherPages = 0;

    private enum PlaylistSelectable
    {
        playlists,
        albums,
        artists,
        songs
    }
    PlaylistSelectable selected = (PlaylistSelectable)Enum.ToObject(typeof(PlaylistSelectable), MauiProgram.favouritesItemView);

    private enum sortMethod
    {
        byArtist,
        byName,
        byActivity
    }
    sortMethod sort = (sortMethod)Enum.ToObject(typeof(sortMethod), MauiProgram.favouritesSortMethod);

    protected override async Task OnInitializedAsync()
    {
        MauiProgram.mainLayout.pageTitle = "Favourites";
        MauiProgram.mainLayout.currentUri = "/favourites";
        MauiProgram.mainLayout.showHeader = true;

        MauiProgram.mainLayout.cancellationSource = new();
        MauiProgram.mainLayout.cancellationToken = MauiProgram.mainLayout.cancellationSource.Token;

        selected = (PlaylistSelectable)Enum.ToObject(typeof(PlaylistSelectable), MauiProgram.favouritesItemView);
        switch (selected)
        {
            case PlaylistSelectable.albums:
                SelectAlbums();
                break;
            case PlaylistSelectable.artists:
                SelectArtists();
                break;
            case PlaylistSelectable.songs:
                SelectSongs();
                break;
            case PlaylistSelectable.playlists:
                SelectPlaylist();
                break;
        }
       
        await Task.Run(() => { Thread.Sleep(250); });
        MauiProgram.mainLayout.isLoading = false;
    }

    private void ToggleSort()
    {
        if (sort >= sortMethod.byActivity)
        {
            sort = 0;
        }
        else
        {
            sort++;
        }
        MauiProgram.favouritesSortMethod = (int)sort;
    }
    private void ToggleView()
    {
        showGrid = !showGrid; // toggle
        MauiProgram.favouritesShowGrid = showGrid;
    }
    private async void SelectAlbums()
    {
        if (selected != PlaylistSelectable.albums)
        {
            startFromIndex = 0;
            selectedPage = 0;
        }

        isLoading = true;
        selected = PlaylistSelectable.albums;
        MauiProgram.favouritesItemView = (int)selected;
        isPlaylist = false;

        // Fetch Album information
        Album[] albums = await MauiProgram.api.GetAllAlbumsAsync(limit: itemsPerPage, startIndex: startFromIndex, isFavourite: true);
        totalRecordCount = await MauiProgram.servers[0].GetTotalAlbumCount();

        data = albums;
        MauiProgram.favouriteAlbums = albums.ToList();

        double number = (double)totalRecordCount / (double)itemsPerPage;
        int roundedNumber = (int)Math.Ceiling(number);
        pages = roundedNumber;

        isLoading = false;
        startFromIndex = 0;
        StateHasChanged();
    }
    private async void SelectArtists()
    {
        if (selected != PlaylistSelectable.artists)
        {
            startFromIndex = 0;
            selectedPage = 0;
        }

        isLoading = true;
        selected = PlaylistSelectable.artists;
        MauiProgram.favouritesItemView = (int)selected;
        isPlaylist = false;

        // Fetch Artist information
        Artist[] artists = await MauiProgram.servers[0].GetAllArtistsAsync(limit: itemsPerPage, startFromIndex: startFromIndex, favourites: true);
        totalRecordCount = await MauiProgram.servers[0].GetTotalArtistCount();

        data = artists;
        MauiProgram.favouriteArtist = artists.ToList();

        double number = (double)totalRecordCount / (double)itemsPerPage;
        int roundedNumber = (int)Math.Ceiling(number);
        pages = roundedNumber;

        isLoading = false;
        startFromIndex = 1;
        StateHasChanged();
    }
    private async void SelectSongs()
    {
        if (selected != PlaylistSelectable.songs)
        {
            startFromIndex = 0;
            selectedPage = 0;
        }

        isLoading = true;
        selected = PlaylistSelectable.songs;
        MauiProgram.favouritesItemView = (int)selected;
        isPlaylist = false;

        // Fetch Song information
        Song[] songs = await MauiProgram.api.GetAllSongsAsync(limit: itemsPerPage, startIndex: startFromIndex, isFavourite: true);
        totalRecordCount = await MauiProgram.servers[0].GetTotalSongCount();

        data = songs;
        MauiProgram.favouriteSongs = songs.ToList();

        double number = (double)totalRecordCount / (double)itemsPerPage;
        int roundedNumber = (int)Math.Ceiling(number);
        pages = roundedNumber;

        isLoading = false;
        startFromIndex = 1;
        StateHasChanged();
    }
    private async void SelectPlaylist()
    {
        if (selected != PlaylistSelectable.playlists)
        {
            startFromIndex = 0;
            selectedPage = 0;
        }

        isLoading = true;
        selected = PlaylistSelectable.playlists;
        MauiProgram.favouritesItemView = (int)selected;
        isPlaylist = true;

        // Fetch Album information
        Playlist[] playlists = await MauiProgram.servers[0].GetPlaylistsAsycn(limit: itemsPerPage, startFromIndex: startFromIndex);
        totalRecordCount = await MauiProgram.servers[0].GetTotalPlaylistCount();

        data = playlists;
        MauiProgram.favouritePlaylists = playlists.ToList();

        double number = (double)totalRecordCount / (double)itemsPerPage;
        int roundedNumber = (int)Math.Ceiling(number);
        pages = roundedNumber;

        isLoading = false;
        startFromIndex = 0;
        StateHasChanged();
    }
}
